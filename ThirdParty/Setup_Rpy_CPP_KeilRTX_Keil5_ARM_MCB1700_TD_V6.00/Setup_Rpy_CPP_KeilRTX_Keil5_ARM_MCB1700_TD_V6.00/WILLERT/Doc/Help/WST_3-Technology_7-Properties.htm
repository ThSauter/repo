<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
  
  <meta content="text/html; charset=ISO-8859-1" http-equiv="content-type">
  <title>Product Usage - RXF Documentation</title>

  
  
  <link rel="stylesheet" href="wst.css" type="text/css" media="screen">

  
  <link rel="stylesheet" href="wst_print.css" type="text/css" media="print">

</head><body>
<div id="View">
<script src="TOC.js" type="text/javascript"> </script>
<div id="Content">
<h1>Properties</h1>
<h2>RXF specific Properties for Rpy_CPP_KeilRTX_Keil5_ARM_MCB1700_TD_V6.00</h2>
Product specific properties are organized under the property subject
and metaclass C_CG::Rpy_CPP_KeilRTX_Keil5_ARM_MCB1700_TD_V6_00. Rhapsody properties are
hierarchically organized and may be overridden in deeper hierarchical
elements, e.g. on active configuration level inside the Rhapsody UML
model. The definition of product specific properties is contained in
the file <span style="font-family: monospace;">@WILLERT_1@\ @WST_RELEASE_NAME@\ Config\UserSettings\WST_RXF_V6.prp</span>. This file is being included into Rhapsody by an automatic modification of the file <span style="font-family: monospace;"><span style="font-style: italic;">&lt;your Rhapsody directory&gt;</span>\Share\Properties\SiteC++.prp</span> which is performed during the product setup.<br>
<br>
The following properties are available in your product Rpy_CPP_KeilRTX_Keil5_ARM_MCB1700_TD under C_CG::Rpy_CPP_KeilRTX_Keil5_ARM_MCB1700_TD_V6_00:<br>
<ul>
    <li><a name="Property_AddtionalreservedWords" id="Property_AddtionalreservedWords"></a>AddtionalreservedWords&nbsp;- <span style="font-style: italic;">reserved for future use</span></li>

    <li><a name="Property_BuildCommandSet" id="Property_BuildCommandSet"></a>BuildCommandSet&nbsp;is an enumeration which correspond to the <a href="WST_2-Usage_7-Buildsets.htm">buildsets supported</a>: Debug and Release. A Debug buildset automatically sets the proper tool options to allow source level debugging.</li>

    <li><a name="Property_CppCompileCommand" id="Property_CppCompileCommand"></a>CppCompileCommand will echo a string stating you must build inside your IDE.</li>

    <li><a name="Property_CppCompileDebug" id="Property_CppCompileDebug"></a>CppCompileDebug.&nbsp;The default value is -D_DEBUG -DWST_HIGHWATERMARKS, unless it is overridden via a profile which comes with the release of your product.</li>

    <li><a name="Property_CppCompileRelease" id="Property_CppCompileRelease"></a>CppCompileRelease is used. The default value is -DNDEBUG, unless it is overridden via a profile which comes with the release of your product.</li>

    <li><a name="Property_CppCompileSwitches" id="Property_CppCompileSwitches"></a>CppCompileSwitches.
This property contains values independent on the buildset (Debug or
Release), and the&nbsp;CppCompileDebug or&nbsp;CppCompileDebug contents
is appended to it by Rhapsody when generating RxfConstants.h<br> These
resulting CppCompileSwitches should include -D&lt;macro definition&gt;
options only: if you need other options you should specify these
directly in your IDE, where the application is actually being built.
The default value of CppCompileSwitches is -DWST_RXF_V6
$(OMCPPCompileCommandSet).</li>

    <li><a name="Property_DependancyRule" id="Property_DependancyRule"></a>DependancyRule&nbsp;- Set to default dependency rules.<span style="font-style: italic;"></span></li>

    <li><a name="Property_EntryPoint" id="Property_EntryPoint"></a>EntryPoint which is set to WST_RXF_Main, which function will be generated by Rhapsody and called from main() in <a name="WST_RXF_Main" id="Property_WST_RXF_Main.c"></a>WST_RXF_Main.c.</li>

    <li><a name="Property_ErrorMessageTokensFormat" id="Property_ErrorMessageTokensFormat"></a>ErrorMessageTokensFormat - <span style="font-style: italic;">reserved for future use</span></li>
  <li><a name="Property_ExeExtension" id="Property_ErrorMessageTokensFormat"></a>ExeExtension - Set to .dat, as
Rhapsody will not really create an executable. A make command in
Rhapsody should only launch the WSTDeployer to integrate generated
files into your IDE.<span style="font-style: italic;"><br>
    </span></li>


    <li><span style="font-style: italic;"><a name="Property_FileDependancies" id="Property_FileDependancies"></a></span>FileDependancies <span style="font-style: italic;">- </span>Set to default dependency rules.</li>

    <li><a name="Property_GeneratedAllDependancyRule" id="Property_GeneratedAllDependancyRule"></a>GeneratedAllDependancyRule - <span style="font-style: italic;">reserved for future use</span></li>

    <li><a name="Property_HasInterfaceDLL" id="Property_HasInterfaceDLL"></a>HasInterfaceDLL - <span style="font-style: italic;">reserved for future use</span></li>

    <li><a name="Property_IDEInterfaceDLL" id="Property_IDEInterfaceDLL"></a>IDEInterfaceDLL - <span style="font-style: italic;">reserved for future use</span></li>

    <li><a name="Property_ImpExtension" id="Property_ImpExtension"></a>ImpExtension is set to .c for C based products and .cpp for C++ based products.</li>

    <li><a name="Property_Include" id="Property_Include"></a>Include is set to !INCLUDE because we are using Borland make thus using Borland syntax for include makefiles<span style="font-style: italic;">.<br></span></li>

    <li><a name="Property_InvokeExecutable" id="Property_InvokeExecutable"></a>InvokeExecutable Print an echo that nothing is done when pressing the run butten inside Rhapsody.</li>

    <li><a name="Property_InvokeMake" id="Property_InvokeMake"></a>InvokeMake which will generate the files RxfConstants.h, RxfDimensions.h and WSTMemoryTypes.h and will launch the WSTDeployer or display a message to manually add files to your build environment or IDE.</li>

    <li><a name="Property_IsFilenameShort" id="Property_IsFilenameShort"></a>IsFilenameShort is set to False</li>

    <li><a name="Property_LibExtension" id="Property_LibExtension"></a>LibExtension - <span style="font-style: italic;">reserved for future use</span></li>

    <li><a name="Property_LinkDebug" id="Property_LinkDebug"></a>LinkDebug is left empty: linking is done inside your IDE.</li>

    <li><a name="Property_LinkRelease" id="Property_LinkRelease"></a>LinkRelease - <span style="font-style: italic;">reserved for future use</span></li>

    <li><a name="Property_LinkSwitches" id="Property_LinkSwitches"></a>LinkSwitches - <span style="font-style: italic;">reserved for future use</span></li>

    <li><a name="Property_MakefileContent" id="Property_MakefileContent"></a>MakefileContent is used by Rhapsody to generate a makefile which builds:</li>

    <li style="list-style-type: none; list-style-image: none; list-style-position: outside; display: inline;">
      <ul>
        <li>the batch file <a name="RhapsodyRun.bat" id="Property_RhapsodyRun.bat"></a>RhapsodyRun.bat to launch the Deployer via <a name="WSTDeployer.bat" id="Property_WSTDeployer.bat"></a>WSTDeployer.bat,</li>

        <li>a makefile <span style="font-style: italic;">&lt;your Rhapsody component&gt;</span>.mak which will generate the files RxfConstants.h, RxfDimensions.h and WSTMemoryTypes.h<br>
        This makefile is executed using Borland make via the batch file <a name="RhapsodyMake.bat" id="Property_RhapsodyMake.bat"></a>RhapsodyMake.bat<br></li>
      </ul>
    </li>

    <li><a name="Property_ObjCleanCommand" id="Property_ObjectCleanCommand"></a>ObjCleanCommand is left empty: all building is done within your IDE</li>

    <li><a name="Property_ObjectName" id="Property_ObjectName"></a>ObjectName is left empty: all building is done within your IDE</li>

    <li><a name="Property_ObjectsDirectory" id="Property_ObjectsDirectory"></a>ObjectsDirectory is left empty: all building is done within your IDE</li>

    <li><a name="Property_OSFileSystemCaseSensitive" id="Property_OSFileSystemCaseSensitive"></a>OSFileSystemCaseSensitive is usually set to False for Windows, but may be overwritten via a profile for a Linux RTOS bridge.</li>

    <li><a name="Property_ParseErrorMessage" id="Property_ParseErrorMessage"></a>ParseErrorMessage - <span style="font-style: italic;">reserved for future use</span></li>
  <li><a name="Property_PathDelimiter" id="Property_ParseErrorMessage"></a>PathDelimiter - <span style="font-style: italic;">reserved for future use</span></li>


    <li><a name="Property_QuoteOMROOT" id="Property_QuoteOMROOT"></a>QuoteOMROOT is set to True. This Rhapsody path may contain spaces.<span style="font-style: italic;"></span></li>
  <li><a name="Property_ReactiveVtblKind" id="Property_ParseErrorMessage"></a>ReactiveVtblKind is
used to minimize the RAM used by objects with a statemachine. They have
a virtual table the WST_FSM class can use for callbacks into generated
code. This can be OXF for a full site and full featured WST_FSM virtual
table or it can be IDF for a minimalistic and feature limited one. This
setting has to match to the RXF version used. </li>
  <li><a name="Property_RemoteHost" id="Property_ParseErrorMessage"></a>RemoteHost is set to an empty host name.</li>


    <li><a name="Property_SpecExtension" id="Property_SpecExtension"></a>SpecExtension is set to .h for C and C++ based products.<span style="font-style: italic;"><br></span></li>

    <li><a name="Property_UseRemoteHost" id="Property_UseRemoteHost"></a>UseRemoteHost is set to True<br></li>

    <li><span style="text-decoration: underline;"><a name="Property_WSTCollectionIncrementSize" id="Property_WSTCollectionIncrementSize"></a></span>WSTCollectionIncrementSize.
This is the number of bytes objects are stepwise reallocated with when
dealing with collection classes. Only influences the implementation of
collection classes when they support this setting.</li>

    <li><a name="Property_WSTComment" id="Property_WSTComment"></a>WSTComment is used to a string containing Configuration Management keywords. It is used Willert internal only.<br>
</li>

    <li><span style="text-decoration: underline;"><a name="Property_WSTInitialTinyBuffers" id="Property_WSTInitialTinyBuffers"></a></span>WSTInitialTinyBuffers.&nbsp;This
is the number of initial buffers available in the 'tiny buffer' pool.
The define NO_MALLOC, which is not set by default, will
prevent a call to malloc() when memory is requested and the initial
buffers are not sufficient.&nbsp;See the&nbsp;<a href="WST_3-Technology_1-Memory-Management.htm">Memory Management section</a> for more details.</li>

    <li><span style="text-decoration: underline;"><a name="Property_WSTInitialSmallBuffers" id="Property_WSTInitialSmallBuffers"></a></span>WSTInitialSmallBuffers.&nbsp;This
is the number of initial buffers available in the 'small buffer' pool.
The define NO_MALLOC, which is not set by default, will
prevent a call to malloc() when memory is requested and the initial
buffers are not sufficient.&nbsp;See the&nbsp;<a href="WST_3-Technology_1-Memory-Management.htm">Memory Management section</a> for more details.</li>

    <li><span style="text-decoration: underline;"><a name="Property_WSTInitialMediumBuffers" id="Property_WSTInitialMediumBuffers"></a></span>WSTInitialMediumBuffers.&nbsp;This
is the number of initial buffers available in the 'medium buffer' pool.
The define NO_MALLOC, which is not set by default,
will prevent a call to malloc() when memory is requested and the
initial buffers are not sufficient.&nbsp;See the <a href="WST_3-Technology_1-Memory-Management.htm">Memory Management section</a> for more details.</li>

    <li><span style="text-decoration: underline;"><a name="Property_WSTInitialLargeBuffers" id="Property_WSTInitialLargeBuffers"></a></span>WSTInitialLargeBuffers.&nbsp;This
is the number of initial buffers available in the 'large buffer' pool.
The define NO_MALLOC, which is not set by default,
will prevent a call to malloc() when memory is requested and the
initial buffers are not sufficient.&nbsp;See the <a href="WST_3-Technology_1-Memory-Management.htm">Memory Management section</a> for more details.</li>

    <li><span style="text-decoration: underline;"><a name="Property_WSTInitialHugeBuffers" id="Property_WSTInitialHugeBuffers"></a></span>WSTInitialHugeBuffers.&nbsp;This
is the number of initial buffers available in the 'huge buffer' pool.
The define NO_MALLOC, which is not set by default,
will prevent a call to malloc() when memory is requested and the
initial buffers are not sufficient.&nbsp;See the <a href="WST_3-Technology_1-Memory-Management.htm">Memory Management section</a> for more details.</li>


    <li><span style="text-decoration: underline;"><a name="Property_WSTMaxTimeouts" id="Property_WSTMaxTimeouts"></a></span>WSTMaxTimeouts.&nbsp;The maximum number of timeouts in the timeout queue at one point of time within your application.&nbsp;</li>

    <li><span style="text-decoration: underline;"><a name="Property_WSTTinyBufferSize" id="Property_WSTTinyBufferSize"></a></span>WSTTinyBufferSize.&nbsp;Objects smaller or equal to this number are allocated on the 'tiny buffer' pool. See the <a href="WST_3-Technology_1-Memory-Management.htm">Memory Management section</a> for more details.</li>

    <li><span style="text-decoration: underline;"><a name="Property_WSTSmallBufferSize" id="Property_WSTSmallBufferSize"></a></span>WSTSmallBufferSize.&nbsp;Objects smaller or equal to this number are allocated on the 'small buffer' pool. See the <a href="WST_3-Technology_1-Memory-Management.htm">Memory Management section</a> for more details.</li>

    <li><span style="text-decoration: underline;"><a name="Property_WSTMediumBufferSize" id="Property_WSTMediumBufferSize"></a></span>WSTMediumBufferSize.&nbsp;Objects smaller or equal to this number are allocated on the 'medium buffer' pool. See the <a href="WST_3-Technology_1-Memory-Management.htm">Memory Management section</a> for more details</li>

    <li><span style="text-decoration: underline;"><a name="Property_WSTLargeBufferSize" id="Property_WSTLargeBufferSize"></a></span>WSTLargeBufferSize. Objects smaller or equal to this number are allocated on the 'large buffer' pool. See the <a href="WST_3-Technology_1-Memory-Management.htm">Memory Management section</a> for more details.</li>

    <li><span style="text-decoration: underline;"><a name="Property_WSTHugeBufferSize" id="Property_WSTHugeBufferSize"></a></span>WSTHugeBufferSize. Objects smaller or equal to this number are allocated on the 'huge buffer' pool. See the <a href="WST_3-Technology_1-Memory-Management.htm">Memory Management section</a> for more details.</li>

    <li><a name="Property_WSTReleasePath" id="Property_WSTReleasePath"></a>WSTReleasePath. The path to your product installation including version number.</li>

  </ul>There are two more product specific properties which are located under C_CG::Configuration:<br>
<ul>
  <li><a name="Property_WSTAdditionalDefinesMEM"></a>WSTAdditionalDefinesMEM</li>
  <li><a name="Property_WSTAdditionalDefinesTD"></a>WSTAdditionalDefinesTD</li>
  <li>WSTAdditionalDefinesComment</li>
</ul>
The last one already contains the description why we have the first two
properties: "The WSTAdditionalDefinesMEM and WSTAdditionalDefinesTD properties
allow RXF profiles to add defines to a header file, e.g. NO_MALLOC for the 
StaticComponent Stereotype."<br>
  <br>
  <br>

  </div>

  <p id="Footer">This documentation belongs to the Product Rpy_CPP_KeilRTX_Keil5_ARM_MCB1700_TD_V6.00, released on 2016-04-22. &copy;&nbsp;2016 Willert Software Tools GmbH.</p>
</div>
</body></html>
