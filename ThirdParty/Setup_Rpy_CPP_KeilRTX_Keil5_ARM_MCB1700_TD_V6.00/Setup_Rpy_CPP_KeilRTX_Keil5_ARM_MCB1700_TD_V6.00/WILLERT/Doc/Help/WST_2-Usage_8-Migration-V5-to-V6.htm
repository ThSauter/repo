<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>







  
  <meta content="text/html; charset=ISO-8859-1" http-equiv="content-type"><title>Migration from a V5 Product to V6 - RXF Documentation</title>
  

  
  <link rel="stylesheet" href="wst.css" type="text/css" media="screen">
  <link rel="stylesheet" href="wst_print.css" type="text/css" media="print"><meta http-equiv="content-type" content="text/html; charset=utf-8"><meta http-equiv="content-type" content="text/html; charset=utf-8"><meta http-equiv="content-type" content="text/html; charset=utf-8"><meta http-equiv="content-type" content="text/html; charset=utf-8"><meta http-equiv="content-type" content="text/html; charset=utf-8"></head><body>
<div id="View">
  <script src="TOC.js" type="text/javascript"> </script> 	

  <div id="Content">
  <h1><a name="RXF_Migration"></a><a name="V5_to_V6_Migration"></a>Migration from a V5 Product to V6</h1>The
RXF is currently available in major version 6. It allows Willert
Software Tools to create more customized product releases based on an
internally used, highly modular component structure. But also on the
customer side migration from a V5 product to V6 involves several
changes and improvements.<br>
<h2><a name="Modelling_Tools"></a>Modeling Tool Support<br>
</h2>
Until V5 all products have been adapted for the UML tool Rhapsody by
IBM Rational. There were only two V5 releases ("EA_Bizet" and
"EA_ez430") which were manually created for Enterprise Architect by
Sparx Systems. V6 allows to encapsulate modelling tool specifics in a
modelling specific component and makes it possible to support multiple
UML tools with code generators just as we support a wide range of
RTOSes, compilers and targets. <br>
<h2><a name="Programming_Language"></a>Programming Language Support</h2>
The support for non-ANSI-C products are been improved. The V6 of the
Willert RXF will also be available also for C++ in the near future.<br>

<h2><a name="Footprint_of_the_V6_RXF"></a><a name="Code_Size_of_the_V6_RXF"></a><a name="ROM_needs_of_the_V6_RXF"></a><a name="PEPS_of_the_V6_RXF"></a><a name="OORTX_vs_RTOS"></a>RTOS based RXF<br>
</h2>
The RXF used in combination with an RTOS is now completely switched
over to the RXF which already has been used for a long time together
with the OO-RTX by Willert Software Tools. This gives us a much better
performance in RTOS based products. But the biggest difference is the
footprint. Our V6 Multitasking RXF with Keil RTX reduces the code size
by about <span style="font-weight: bold;">60%</span>!<br>
<br>
Sample comparison based on the product <span id="BugEvents">Rpy_C_KeilRTX_Keil_ARM_MCB1700 versus Strauss, based on a Blinky model:<br>
</span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;"><br>
      </td>
      <td style="vertical-align: top;"><span style="font-weight: bold;">V5</span> with RTOS<br>
      </td>
      <td style="vertical-align: top;"><span style="font-weight: bold;">V6</span> with RTOS<br>
      </td>
      <td style="vertical-align: top; color: rgb(153, 153, 153);">OO-RTX*<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><span style="font-weight: bold;">Code Size</span> (ROM)<br>
      </td>
      <td style="vertical-align: top;">
      
      <span id="BugEvents">18 kB<br>
      </span></td>
      <td style="vertical-align: top;">
      
      <span id="BugEvents">7.7 kB<br>
      </span></td>
      <td style="vertical-align: top; color: rgb(153, 153, 153);">4.8 kB<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">Read-Only Data (ROM)<br>
      </td>
      <td style="vertical-align: top;">356 B<br>
      </td>
      <td style="vertical-align: top;">324 B<br>
      </td>
      <td style="vertical-align: top; color: rgb(153, 153, 153);">284 B<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">kPEPS<br>
(1000 Processed Events per Second)<br>
      </td>
      <td style="vertical-align: top;">68**<br>
      </td>
      <td style="vertical-align: top;">103<br>
      </td>
      <td style="vertical-align: top; color: rgb(153, 153, 153);">134<br>
      </td>
    </tr>
  </tbody>
</table>
<span id="BugEvents"><font size="-1"><span style="color: rgb(153, 153, 153);">*
The grey OO-RTX column is just for comparison to an OO-RTX based
solution, which is of course smaller but has the limitation of
non-preemptive multitasking.</span></font><br>
<font size="-1">** Value may be inaccurate, because it was measured
with different optimization level and with an older version of the test
model.<br>
Note: The values specified here may be different depending on the
versions of the RXF and compiler/linker and depend on the configuration
and optimization level. The values inside the table were measured with
disabled Highwatermarks in release buildset with the highest compiler
optimization for time.</font><br>
<br>
This also shows the </span><span id="BugEvents">Willert
Multitasking RXF (including the resource needs of the Keil RTX)
requires less than the double footprint than the OO-RTX solution.</span>
<h2><a name="Product_Naming_in_V6"></a><a name="Release_Names"></a>Product Names<span style="font-weight: bold;"></span></h2>
<h3><span style="font-weight: bold;"></span></h3>
(e.g. Rpy_CPP_KeilRTX_Keil5_ARM_MCB1700_TD_V6.00)<br>
<span style="font-weight: bold;"></span>While V5 products have always
been names after classical composers like Beethoven, Hã­¤el, Strauss or
Monteverdi, in V6 we now use product codes which are more technical and
not as easy to vocalize. They consist of all important component names
(in short form) a product has been built for. This is the big benefit
of the new product codes, you can always see what is part of a product
and what will be the difference between two installed environments.<br>
Product codes are put together following this scheme:<br>
<table style="text-align: left; width: 100%; margin-left: auto; margin-right: auto;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td>Modelling Tool</td>
      <td>Programming Language</td>
      <td>RTOS</td>
      <td>Compiler</td>
      <td>Target</td>
      <td>Evaluation Board*</td>
      <td>Extension**</td>
    </tr>
  </tbody>
</table>
An RXF Product is adapted to each of these components. The components
have short names (like EA for Sparx Systems Enterprise Architect or Rpy
for IBM Rational Rhapsody). For the product name the components are put
together in the order shown above, each separated by an underscore. <br>
* The Evaluation Board component may not be part of a product. It is
usually responsible for allowing LEDs to blink in a sample project on
the actual board or even to specify which CPU of a CPU family the
product can be used with. E.g. for "Keil_ARM" there are preconfigured
products available for the ARM7 board "Keil MCB2130" and the ARM
Cortex-M3 board "Keil MCB1700".<br>
** Extensions are optional and multiple extensions may be combined in
on product. Possible extensions are "TD" for Embedded UML Target
Debugger or&nbsp; "Eval" for an evaluation version of the RXF.<br>
<h2><a name="Version_Numbers"></a>Version Numbers<span style="font-weight: bold;"></span></h2>

<h3><span style="font-weight: bold;"></span></h3>
In version 6 releases always have a version number like V6.xx, no minor
revision separated by an "r" like in V5 is used anymore. But The new
release mechanism now also allows to create custom releases which might
have a postfix appended to the version name, e.g. "_beta" for beta
versions or "p1" for a patch which has been applied to the&nbsp;latest release. <br>
<h2><a name="Installed_Files"></a>Installed Files<br>
</h2>
V5
RXF products were installed completely into the Rhapsody directory
structure (&lt;Rhapsody&gt;\Share\WST_RXF_V5\&lt;RXF release name&gt;).
Now, with our modelling tool independent approach, RXF files are
installed in a "Willert" directory at a location of your choice. On
Windows XP it is no problem to put this folder under "C:\Program
Files". For Windows 7 it is recommended to use a directory inside the
user path, as write permissions to several files under this path are
required. To hook into Rhapsody, only
Rhapsody's Site&lt;language&gt;.prp file is adapted, tool menu entries
might be added and the product's profile is copied to the Rhapsody
Profiles folder.<br>

<h2><a name="Tags_for_WSTDeployer"></a>WSTDeployer<br>
</h2>
The WSTDeployer is now more independent of the modelling tool. In V5 it
used to access tags set inside the component to know e.g. the name of
the IDE project file. The WSTDeployer configuration was then used to
just select the path where the file can be found. V6 does not access
tags inside the model anymore and asks to browse to the IDE project
file instead of its directory.<br>

<h2><a name="Libraries_in_V6"></a><a name="RXFD"></a><a name="RXFR"></a><a name="CreateRXFLibrary_in_V6"></a>Libraries<br>
</h2>
Evaluation releases of the RXF do not contain source code of most of the RXF files.
They come with precompiles libraries (usually located under Source\LIB
and named RXFD.&lt;lib&gt; and RXFR.&lt;lib&gt;).<br>
All full product versions do not come with a library and most of them
are not prepared to be used with the RXF in a library. In V5 the first
steps for a user of non-evaluation product were always to build the IDE
projects "CreateRXFLibrary" and eventually "CreateAnimationLibrary" for
both, Debug and Release, buildsets. This is not necessary anymore, the
WSTDeployer option, if a library should be used here, is now disabled
by default. Source files of the RXF will be deployed into your IDE
project and built along with your generated application code. This has
several advantages:<br>
<ul>
  <li>First steps are easier.</li>
  <li>The problem of an updated compiler without recompiled libraries
is gone. If the user first build the RXF libraries, then later updates
the compiler and tries to link strange errors, sometimes even during
runtime may occur. We experienced such problems via related support
requests.</li>
  <li>Defines such as WST_CFG_HIGHWATERMARKS 
are now more comfortable, because the libraries do not need to be
recompiled with the defines which have been set in the current UML
model configuration.<br>
  </li>
</ul>
With todays compilers and linkers there are mostly no differences in
code size, because unused functions are deleted by the optimizer no
matter it it comes from a library or a source code/object file.<br>

<h2><a name="Container_Classes"></a><a name="List"></a><a name="WST_CON_LST"></a><a name="Map"></a><a name="Hash_Map"></a><a name="Collection"></a><a name="Set"></a><a name="Abstract_Data_Types"></a>Container Classes</h2>
UML models may contain relations between classes which are not 1-to-1
relations, but which have a multiplicity. If the multiplicity is a
fixed value, the relation can be realized via a simple array by the
code generator. But it it is a "1-to-*" or "*-to-*" relation the
relation must be managed dynamically via an implementation of container
classes. Depending on other settings of the relation, like it it is
ordered and it it has a key parameter for accessing it, container
classes like a collection, list or map are required.<br>
<br>

Your product is delivered with the full Rhapsody specific container classes
RiCList, RiCMap and RiCCollection. Other V6 products may come with a V6
specific own container class called WST_CON_LST, which is not available
in your release.<br>
<br>
<h2>Sending Events</h2>
The RXF V6 allows to send asynchronous messages / events via the macros
FIRE, FIRE_ISR and includes macros for easy
handling of static event arrays to be used in interrupt service
routines. For details please see the <a href="WST_3-Technology_6-Asynchronous-Messages.htm">asynchronous messages</a> help section.<br>
<br>


<br>




  </div>

  <p id="Footer">This documentation belongs to the Product Rpy_CPP_KeilRTX_Keil5_ARM_MCB1700_TD_V6.00, released on 2016-04-22. &copy;&nbsp;2016 Willert Software Tools GmbH.</p>
</div>
</body></html>
