<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>



  
  <meta content="text/html; charset=ISO-8859-1" http-equiv="content-type"><title>WSTDeployer - RXF Documentation</title>
  

  
  
  <link rel="stylesheet" href="wst.css" type="text/css" media="screen">

  
  <link rel="stylesheet" href="wst_print.css" type="text/css" media="print">

  
  <meta http-equiv="content-type" content="text/html; charset=utf-8"></head><body>
<div id="View">
<script src="TOC.js" type="text/javascript"> </script>
<div id="Content">
<h1><a name="WSTDeployer"></a><a name="IDE_Integration"></a>WSTDeployer
- Deploying Files to the IDE Environment<br>
</h1>
Willert Software Tools RXF products come with the tool WSTDeployer
which is used to integrate generated files and the RXF into an existing
build environment, typically the IDE. The usual approach is the
following:<br>
<ul>
  <li>Code is being generated by IBM Rational Rhapsody.</li>
  <li>If the WSTDeployer is started for the first time for an
environment it will display a configuration dialog where the
destination Keil uVision 5 project needs to be specified.</li>
  <li>The WSTDeployer copies the generated files to the destination
folder where the IDE project is located.</li>
  <li>The WSTDeployer copies required RXF files to the destination
folder.</li>
  <li>For some IDEs the WSTDeployer also modifies the project by adding
the deployed files automatically, see table below.</li>
</ul>
<h2>Advantages of Building Sources Inside the IDE</h2>
Instead of building your application within
IBM Rational Rhapsody or just via makefile, your application is
build inside Keil uVision 5 where all knowhow is available on
target derivates, memory maps and even boards, simulator-, debugger-
and emulator specifics. Your IDE may come with a Wizard and your tool
manufacturer will have provided extensive documentation on how and
where to tweak settings in the IDE to accomplish some setting.<br>
<br>
In order to build your application in Keil uVision 5, the
IBM Rational Rhapsody generated sources must be available
inside an IDE project. You can either use a product or an adaptation
which supports a Deployer to copy all generated files to an IDE project
and also update the IDE project file so all your sources will show up
in the IDE or integrate files in the IDE project manually. To prevent
you from having to specify various constants which are used in the RXF,
the code generation process will generate a few include files - one for
configuring the size of queues for example, and another include file
for defining constants used in the RXF (for details see <a href="WST_3-Technology_8-List-of-Defines.htm#WSTProduct.h">here</a>).
What you must do yourselves is specify include paths and of course as
usual, make sure the correct startup files, device configuration files
and settings are part of the IDE project.<br>
<br>
The Deployer is a separate application which
is launched when you select Run in Rhapsody. You will use:<br>
<ol>
  <li><span style="font-style: italic;">Code | Generate</span> or <span style="font-style: italic;">Code | Regenerate</span> to generate your
application sources</li>
  <li><span style="font-style: italic;">Code | Build</span> or <span style="font-style: italic;">Code | Rebuild</span> to generate the
necessary include files (with defined constants)</li>
  <li><span style="font-style: italic;">Code | Run</span> to launch the
Deployer</li>
</ol>
or use the G/M/R button to perform all this with one click.<br>
<br>
<span style="font-weight: bold;">Please Note</span>: The WSTDeployer
needs to access the Rhapsody API to get model specific information.
Rhapsody only allows API connections to the Rhapsody instance which was
first started. This means only one running Rhapsody application at a
time is recommended when working with the WSTDeployer. After a crash or
Rhapsody, please make sure no orphaned instance is still listed in the
system's task manager.<br>
<br>
<h2>Deployment Configuration</h2>
The WSTDeployer does not save the location of the IDE project to deploy
to inside the IBM Rational Rhapsody model, but stores this
information in the local registry to allow different users working on a
model to have different IDE locations. The Keil uVision 5
project file location is configured when
the WSTDeployer is running in configuration mode. This is the case if
no destination project for the current environment has been configured
yet or if the Deployer configuration is opened manually. This is
possible via a Tools menu entry in
Rhapsody. <br>
<br>
<img style="width: 530px; height: 200px;" alt="" src="Images/DeployerConfig1.png"><br>
<br>
In the configuration dialog please use the "..." button to browse to
your IDE project, for the first steps this is usually the
GettingStarted project which can be found in <small>"@WILLERT_1@\@WST_RELEASE_NAME@\Samples\Code\GettingStarted"</small>
on your machine. You need to select the ".uvprojx" file.<br>
<br>
<a name="RXF_Library"></a><a name="Dimensioning_Files"></a>If the
checkbox "RXF Library is used" is checked, you need to build a library
from the RXF sources and make sure that library is included in the IDE
project manually. It will make sure the WSTDeployer does not add RXF
files except a few dimensioning files which should not be part of the
RXF library, but should be part of the IDE destination project. These
dimensioning files are WST_CFG.c, WST_MEM.c, WSTTarget.c and possibly
additional product specific ones.<br>
<br>
<a name="WST_MAX_TIMEOUTS"></a>
Please note: WST_TMM_Init uses a modelling tool generated #define for
the maximum timeouts. Changing this value in the modelling tool
requires a recompilation of the RXF library.<br>
<br>
<br>
<a name="Registry_PAth_used_by_WSTDeployer"></a> The place where
environment
specific configurations are saved by the WSTDeployer is the windows
registry under this path:<br>
<div style="margin-left: 40px;"><small>HKEY_CURRENT_USER\</small><br>
<small>Software\JavaSoft\Prefs\de\willert\deployer\</small><br>
<small>Rpy_CPP_KeilRTX_Keil5_ARM_MCB1700_TD_V6.00\<span style="font-style: italic;"><br>
&lt;current
model name&gt;</span></small><small>\<span style="font-style: italic;">&lt;current
component name&gt;</span></small><small>\<span style="font-style: italic;">&lt;current configuration name&gt;</span></small><small><span style="font-style: italic;"></span>"</small>.<br>
</div>
This means the destination IDE project configuration is saved specific
per environment, model name, active component name and active
configuration.<br>
<br>
Actually for technical reasons the model,
component and configuration names are not exactly known when calling
the WSTDeployer, so they are extracted from the generated sources
directory&nbsp; (via <a href="WST_2-Usage_7-Deployment.htm#WSTDeployer_Command_Line_Arguments">setSourceDir</a>)
which it expects in the following format to extract the information
correctly from the path: "...\<span style="font-style: italic;">&lt;model
name&gt;</span>\<span style="font-style: italic;">&lt;active
component&gt;</span>\<span style="font-style: italic;">&lt;active
configuration&gt;</span>".
In Rhapsody this would be the default, but the configuration's path can
be changed to a user defined one. This is no problem and still the
WSTDeployer will work well, it will use just the deepest three
directory levels of the generated source directory as its key for the
registry.<br>
<h2><a name="Features_of_the_WSTDeployer"></a>Features of the
WSTDeployer for Keil uVision 5</h2>
Some IDE adaptations for the WSTDeployer support additional features:<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;"><span style="font-weight: bold;">Feature</span><br>
      </td>
      <td style="vertical-align: top; text-align: center; font-weight: bold;">Support
for Keil uVision 5 </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">Copying files from code
generation directory to IDE project destination<br>
      </td>
      <td style="vertical-align: top; text-align: center;">supported</td>
    </tr>
    <tr>
      <td style="vertical-align: top;">Adding new files automatically
to the Keil uVision 5 project<br>
      </td>
      <td style="vertical-align: top; text-align: center;">supported</td>
    </tr>
    <tr>
      <td style="vertical-align: top;">Removing deleted or renamed
files automatically from the Keil uVision 5 project</td>
      <td style="vertical-align: top; text-align: center;">supported</td>
    </tr>
    <tr>
      <td style="vertical-align: top;">Reflect package and subpackage
structure from the model as groups inside the Keil uVision 5
project</td>
      <td style="vertical-align: top; text-align: center;">supported</td>
    </tr>
    <tr>
      <td style="vertical-align: top;">Default Group name(s) used to
add RXF and generated model files to<br>
      </td>
      <td style="vertical-align: top; text-align: center;">"RXF" and "GeneratedModel"</td>
    </tr>
    <tr>
      <td style="vertical-align: top;">How the IDE project is updated<br>
      </td>
      <td style="vertical-align: top; text-align: center;">IDE will automatically ask to reload project after changes to project files</td>
    </tr>
  </tbody>
</table>
<br>
<span style="font-weight: bold;">Please Note</span>: Features listed as
not supported for
Keil uVision 5 in this table may limit the actual
functionality described below.<br>
<h2><a name="WSTDeployerLog.txt"></a>Deployment Log File</h2>
In the WSTDeployer directory (<small>"@WILLERT_1@\@WST_RELEASE_NAME@\Tools\WSTDeployer"</small>)
a log file WSTDeployerLog.txt will be created and each run of the
deployer appends information, warnings and errors about the deployment.
If the WSTDeployer is started with the debug command as first argument,
also debugging information is written to the log file. <br>
<br>
The log file&nbsp;WSTDeployerLog.txt is limited to a size of 512kB. If
the size is exceeded, the file will be renamed to a backup log file
named WSTDeployerLog.txt.1 and a new WSTDeployerLog.txt will be
started. If an older WSTDeployerLog.txt.1 already existed, it will be
truncated. This makes sure the log files never consume more than 1MB of
hard disk space. <br>
<h2><a name="WSTDeployerExcludedFiles.txt"></a><a name="Excluding_Files_from_Deployment"></a><a name="Target_Adaptations_using_WSTDeployer"></a>Setting
up a Project Specific WSTDeployerExcludedFiles.txt</h2>
The WSTDeployer can also use individual settings, which files to
deploy, for a specific IDE project. This is helpful, if an environment
specific file, e.g. WSTTarget.c should not be copied from the product's
Sources directory, but will be generated from the model or is included
manually in the IDE project.<br>
<br>
To override the general&nbsp;exception lists WSTDeployerExcludedFiles<span style="font-weight: bold;">Lib</span>.txt
and&nbsp;WSTDeployerExcludedFiles<span style="font-weight: bold;">NoLib</span>.txt
(in the directory <small>"@WILLERT_1@\@WST_RELEASE_NAME@\Tools\WSTDeployer"</small>),
you need to place a file WSTDeployerExcludedFiles.txt in a project
specific directory. There are two possibilities:<br>
<ul>
  <li>Place&nbsp;<span style="font-weight: bold;">WSTDeployerExcludedFiles.txt</span>
in your IDE project directory. This is the directory also containing
the IDE project you specify in the WSTDeployer configuration dialog. </li>
  <li>Place&nbsp;<span style="font-weight: bold;">WSTDeployerExcludedFiles.txt</span>
in your generated sources directory.<br>
This is typically under the component's
directory: <span style="font-style: italic;">&lt;path of your Rhapsody
model&gt;</span>\<span style="font-style: italic;">&lt;component
name&gt;</span>\<span style="font-style: italic;">&lt;configuration
name&gt;</span><span style="font-style: italic;"></span> </li>
</ul>
<span style="font-weight: bold;">Please Note</span>:<br>
<ul>
  <li>The individual deployment exception list must not contain the
postfix <span style="font-weight: bold;">Lib</span> or <span style="font-weight: bold;">NoLib</span> in the filename, it is just
named WSTDeployerExcludedFiles.txt.</li>
  <li>The
IDE project or configuration specific exception lists
WSTDeployerExcludedFiles.txt are not merged by the WSTDeployer with the
general product one and no default lists get added dependent on the <span style="font-style: italic;">RXF Library is used </span>Checkbox. They
just override all other lists.</li>
</ul>
<h2><a name="Including_External_Files_via_WSTDeployer"></a><a name="WSTDeployerAdditionalFiles.txt"></a>Using the WSTDeployer to
Copy Additional Files<span id="BugEvents"></span></h2>
Similar to the WSTDeployerExcludedFiles.txt mechanism, the WSTDeployer
can also use individual settings to specify additional files which are
not generate by IBM Rational Rhapsody but should be copied and
included in the Keil uVision 5 project. This mechanism is
meant to include e.g. legacy code in the deployment process. It is not
meant to include external libraries in the IDE project, this should be
done directly in Keil uVision 5.<br>
<br>
A general (and usually empty) additional deployment file list is
located in <small>"@WILLERT_1@\@WST_RELEASE_NAME@\Tools\WSTDeployer"</small>
and called WSTDeployerAdditionalFiles.txt. This file can be edited to
specify RXF product wide additional files
or you need to place a WSTDeployerAdditionalFiles.txt file in a project
specific directory. Again, there are two possibilities:<br>
<ul>
  <li>Place&nbsp;<span style="font-weight: bold;">WSTDeployerAdditionalFiles.txt</span>
in your IDE project directory. This is the directory also containing
the IDE project you specify in the WSTDeployer configuration dialog. </li>
  <li>Place&nbsp;<span style="font-weight: bold;">WSTDeployer</span><span style="font-weight: bold;">Additional</span><span style="font-weight: bold;">Files.txt</span>
in your generated sources directory.<br>
This is typically under the component's
directory: <span style="font-style: italic;">&lt;path of your Rhapsody
model&gt;</span>\<span style="font-style: italic;">&lt;component
name&gt;</span>\<span style="font-style: italic;">&lt;configuration
name&gt;</span><span style="font-style: italic;"></span> </li>
</ul>
<span style="font-weight: bold;">Please Note</span>:<br>
<ul>
  <li>The IDE project or configuration specific additional file list
WSTDeployerAdditionalFiles.txt is not merged by the WSTDeployer with
the general product one.</li>
</ul>
<h2><a name="Clean_Redundant_Source_Files"></a><a name="Removing_Files_from_IDE_Project"></a><a name="CurrentFileList.txt"></a><a name="PreviousFileList.txt"></a><a name="Roundtripping"></a><a name="Model_Code_Associativity"></a>Removing
Files from the IDE Project after Renaming or Deleting Model Elements<br>
</h2>
The Deployer may support removing files from the IDE project
(Keil uVision 5: supported).&nbsp;
IBM Rational Rhapsody will remove redundant source files which
have been deleted or renamed in the model or which are not inside the
active component's scope anymore. When these files are deleted from
file system in the generated sources folder and have already been
deployed to the IDE earlier, those files will automatically be removed
from your deploy destination folder. Depending on the features of your
WSTDeployer IDE adaptation, it can also remove those files
automatically inside the Keil uVision 5 project. You can also
deactivate this feature in the <a href="#WSTDeployer.properties">WSTDeployer.properties</a>
file by changing
PrjRemoveRedundantSourceFiles to false.<br>
<br>
<span style="font-weight: bold;">Please Note</span>:
In Rhapsody the user has to manually
trigger the deletion of generated files by the Rhapsody code generator.
This is done in the "Code" menu via "Clean Redundant Source
Files"<br>
<br>
You can set the Deployer to deploy files to the same directory as
IBM Rational Rhapsody generates them. That way the deployer
will not perform the copy operations but keep the files in
Keil uVision 5 up to date. You need to use this way of working
with the Deployer to be able to use Rhapsody's roundtripping mechanisms.<br>
<br>
WSTDeployer may use files called CurrentFileList.txt and
PreviousFileList.txt inside the generated sources directory. Those
files are reserved to be used by the WSTDeployer to support removal of
redundant source file links from IDE projects.<br>
<h2><a name="Relative_Paths_for_the_Deployer"></a>Working with a
Relative Root Path</h2>
It is possible to specify the root path of your destination IDE project
not just as an absolute path (which is usually done via the "..."
browse button), but manually enter a relative path. It is not possible
to enter any relative path just like "..\IDE_Project" or "IDE_Project".
Instead if a relative path should be used it must begin with a single
point-backslash: "<span style="font-weight: bold;">.\</span>", so the
two examples would need to be entered as ".\..\IDE_Project" and
".\IDE_Project". The path will be relative to the generated sources
directory.<br>
<h2><a name="Backups_of_IDE_project_files"></a>Backups of
Keil uVision 5 Project Files</h2>
The WSTDeployer by default creates up to three Backups of the
Keil uVision 5<br>
project file. The backups will only be created if the last backup is
more than one hour old. Backups will be named including the date and
time e.g. GettingStarted.uvproj.Backup_2012-08-01_17-45-33.&nbsp;You
can also deactivate this feature in the <a href="#WSTDeployer.properties">WSTDeployer.properties</a> file by
changing PrjAutoBackup to false.<br>
<h2><a name="Command_Line_Arguments_of_the_WSTDeployer"></a><a name="WSTDeployer_Command_Line_Arguments"></a>Using WSTDeployer from
the Command Line</h2>
To enable <a href="#Automated_Builds">automated build</a> scripts etc., it may be useful to be able to
control the WSTDeployer via the command line.<br>
<br>
<table style="width: 100%;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr style="font-weight: bold;">
      <td style="text-align: center;" colspan="2" rowspan="1">Supported
WSTDeployer Command Line Arguments</td>
    </tr>
    <tr>
      <td>configure </td>
      <td>show a configuration dialog for your user specific paths</td>
    </tr>
    <tr>
      <td>debug </td>
      <td>generate more detailed log file, must be the first argument</td>
    </tr>
    <tr>
      <td>deploy </td>
      <td>deploy files to the configured destination directories</td>
    </tr>
    <tr>
      <td>getproject </td>
      <td>print the currently configured IDE project to stdout</td>
    </tr>
    <tr>
      <td>inputFiles() </td>
      <td>specify file containing file-list which should be deployed</td>
    </tr>
    <tr>
      <td>openproject </td>
      <td>open currently configured IDE project with associated program</td>
    </tr>
    <tr>
      <td>setComponent()</td>
      <td>set active component name to the specified argument within
the brackets</td>
    </tr>
    <tr>
      <td>setDestProj() </td>
      <td>set destination IDE project file to the specified argument</td>
    </tr>
    <tr>
      <td>setModelDir() </td>
      <td>set the model directory to the specified argument</td>
    </tr>
    <tr>
      <td>setSourceDir()</td>
      <td>set the source directory to the specified argument</td>
    </tr>
    <tr>
      <td>version </td>
      <td>display the tool's version string</td>
    </tr>
    <tr>
      <td style="text-align: center;" colspan="2" rowspan="1"><i>If a
"set...()" path contains spaces it has to be quoted, e.g.:
setModelDir("C:\Some Folder")</i></td>
    </tr>
  </tbody>
</table>
<br>
<span style="font-weight: bold;">Please Note</span>: The order of
command line arguments specified the order
they are processed. This means it is only useful to specify e.g. <span style="font-style: italic;">setModelDir()</span> before the command
line argument <span style="font-style: italic;">configure</span> or <span style="font-style: italic;">deploy</span>.<br>
<h2><a name="Nightly_Builds"></a><a name="Automated_Builds"></a><a name="Continuous_Integration"></a>Automated Builds <br>
</h2>
The WSTDeployer can be integrated in an automated / nightly build
environment for continuous software integration. The following sample
batch file structure shows how code can be generated from a user
application UML model and deployed into the IDE. This sample is based
on IBM Rational Rhapsody as modeling tool and Keil uVision as IDE.
(Lines starting with "..." should be appended to the previous lines.)<br>
<table style="text-align: left; width: 100px;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;">1) <br>
Generate/build model using RhapsodyCL<br>
      </td>
      <td style="vertical-align: top;">
      <pre>@echo on<br>cd "&lt;Rhapsody path&gt;"<br>RhapsodyCL.exe -verbose -dev_ed -lang=C<br>...-cmd=open "&lt;model dir&gt;\&lt;model name&gt;.rpy"<br>...-cmd=generate -cmd=syncmake<br>@if ERRORLEVEL 1 (<br>	echo Errorlevel of RhapsodyCL: %errorlevel%<br>	echo   List of error codes from Rhapsody help:<br>	echo   100: failed to open the project file  <br>	echo   101: license not found                <br>	echo   102: code generation failed           <br>	echo   103: failed to load the project       <br>	echo   104: failed to create/write CG folder<br>	echo   105: errors were found in check model<br>	echo   106: unresolved elements in scope<br>	echo   107: comp. or configuration name error<br> 	echo   108: build failed<br>	exit /b %errorlevel%<br>)<br>@echo off<br></pre>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">2)<br>
Use the WSTDeployer without need for the RhapsodyAPI to deploy files to the compiler toolchain<br>
      </td>
      <td style="vertical-align: top;">
      <pre>cd /d "&lt;Willert RXF path&gt;\Tools\WSTDeployer"<br>java -classpath bin;WSTDeployer.jar;log4j-1.2.14.jar;<br>...jdom.jar;"&lt;Rhapsody path&gt;\Share\JavaAPI\rhapsody.jar"<br>... -Djava.library.path=<br>..."&lt;Rhapsody path&gt;\Share\JavaAPI" wst.WSTDeployer debug<br>... version "setSourceDir(&lt;path to generated sources&gt;)"<br>... "setDestProj(&lt;path to IDE project file&gt;)" version<br>... deploy<br>@if ERRORLEVEL 1 (<br>	echo Errorlevel of Deployer Java call:<br>...%errorlevel%<br>	exit /b %errorlevel%<br>)<br></pre>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">3)<br>
Build IDE project from command line<br>
      </td>
      <td style="vertical-align: top;">
      <pre>"&lt;Keil path&gt;\UV4\Uv4.exe" -r "&lt;path to IDE project file&gt;"<br>... -o "&lt;build result path&gt;\BuildLog.txt"<br>@if ERRORLEVEL 1 (<br>  echo Errorlevel of compiler toolchain build: %errorlevel%<br>  exit /b %errorlevel%<br>)<br>@type "&lt;build result path&gt;\BuildLog.txt"<br>@if ERRORLEVEL 1 (<br>  echo Could not find compiler toolchain build log file.<br>  exit /b %errorlevel%<br>)<br>@if not exist "&lt;build result path&gt;\&lt;hex or elf file&gt;" (<br>  echo Could not find expected build output file<br>  exit /b 1<br>)<br></pre>
      </td>
    </tr>
  </tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">
<tbody><tr><td style="width: 120px; vertical-align: top; background-color: rgb(255, 255, 204);">Please
Note:</td>
      <td>Please note this is just a sample configuration and the automated build
process may vary massively for different combinations of tools.</td></tr></tbody>
</table>
<br>
<h2><a name="WSTDeployer.properties"></a>Advanced Configuration using
WSTDeployer.properties</h2>
Many advanced configuration options are available in the file <small>"@WILLERT_1@\@WST_RELEASE_NAME@\Tools\WSTDeployer\WSTDeployer.properties"</small>.
You can open that file with any text editor.<br>
<br>
The WSTDeployer.properties file can not be overridden for a specific
model, it is always valid RXF product wide.<br>
<br>
<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="width: 120px; vertical-align: top; background-color: rgb(255, 255, 204);">Please
Note:</td>
      <td>
Paths which are entered in that file need to be entered
with double-backslashes and without quotes, e.g.:<br>
SomePropertyKey = C:\\My Directory\\My
File.txt </td>
    </tr>
  </tbody>
</table>
<br>
Each entry in the properties file comes with a short description. This
help file only lists a subset of the most relevant properties you might
want to change to specific needs.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top; font-weight: bold;">Property Name<br>
      </td>
      <td style="vertical-align: top; font-weight: bold;">Description<br>
      </td>
      <td style="vertical-align: top; font-weight: bold;">Default Value<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">CfgDialogBrowseStartPath</td>
      <td style="vertical-align: top;">In the deployment configuration
dialog, this is the path which the browse window starts with. You may
want to set is to your delelopment project's root directory.<br>
      </td>
      <td style="vertical-align: top;"><small>@WILLERT_3@<br>
Rpy_CPP_KeilRTX_Keil5_ARM_MCB1700_TD_V6.00\\<br>
Samples\\Code</small></td>
    </tr>
    <tr>
      <td style="vertical-align: top;">RxfExcludeByFilenameOnly</td>
      <td style="vertical-align: top;">Specify if only file names are
contained in the RXF exclude specification text file. If set to true, a
match of e.g. WSTRTOS.c will exclude RXF\WSTRTOS.c and would also
exclude any\other\path\WSTRTOS.c. If set to false, the files need to be
named with the relative subdirectoy.</td>
      <td style="vertical-align: top;">true<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">RxfUseLibAsDefault</td>
      <td style="vertical-align: top;">String to specify if the
deployment should expect an RXF library in the destination as default.
This will be the default state of the "RXF Library is Used" checkbox if
the Deployer for a new project has not been configured yet.<br>
      </td>
      <td style="vertical-align: top;">false</td>
    </tr>
    <tr>
      <td style="vertical-align: top;">FullPathKeys<br>
      </td>
      <td style="vertical-align: top;">Option to save full generated
code paths in the registry as IDE project key. This can be helpful if
in different projects the last three subdirectories use the same naming.<br>
Possible value: true, false<br>
      </td>
      <td style="vertical-align: top;">false<br>
      </td>
    </tr>
<tr>
      <td style="vertical-align: top;">PrjRemoveRedundantSourceFiles</td>
      <td style="vertical-align: top;">Option to delete files in
destination directory, which were removed in the generated source
directory.</td>
      <td style="vertical-align: top;">true<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">PrjSortFiles</td>
      <td style="vertical-align: top;">Option to sort files inside
project groups in alphabetical order.<br>
      <span style="font-style: italic;">Currently only supported by
WSTDeployer for Keil uVision</span>4 IDE.<br>
      </td>
      <td style="vertical-align: top;">true<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">PrjSortGroups</td>
      <td style="vertical-align: top;">Option to sort groups inside the
project in alphabetical order.<br>
      <span style="font-style: italic;">Currently only supported by
WSTDeployer for Keil uVision</span>4 IDE.<br>
      </td>
      <td style="vertical-align: top;">true<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">PrjPkgSubfoldersAsGroups</td>
      <td style="vertical-align: top;">Option to deploy package
subfolders into groups.<br>
      <span style="font-style: italic;">Only supported by some
WSTDeployer implementations</span>.<br>
      </td>
      <td style="vertical-align: top;">true<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">PrjRxfSubfoldersAsGroups</td>
      <td style="vertical-align: top;">Option to deploy subfolders
under the RXF folder into groups. If set to false, the files from RXF
subfolders will be copied to a flat RXF folder without subfolders and
will all files from the subfolders also in the flat RXF directory.<br>
      <span style="font-style: italic;">Currently only supported by
WSTDeployer for Keil uVision</span>4 IDE.<br>
      </td>
      <td style="vertical-align: top;">false</td>
    </tr>
    <tr>
      <td style="vertical-align: top;">PrjAutoBackup</td>
      <td style="vertical-align: top;">Option to automatically create
backups of the toolchain project file. </td>
      <td style="vertical-align: top;">true</td>
    </tr>
    <tr>
      <td colspan="3" rowspan="1" style="vertical-align: top;"><span style="font-weight: bold;">Special WSTDeployer Properties to Specify
Destination Subdirectories<br>
      </span>The WSTDeployer internally knows files of type "0", which
are the generated files and type "1" which are the source files of the
RXF.<br>
The specified subfolders can also be just a dot (.) if files should not
be deployed in a subdirectory for that kind of destination.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">Dest0Name</td>
      <td style="vertical-align: top;">Name for files generated by the modeling tool. <span style="font-style: italic; font-weight: bold;">This should not be edited!</span><br>
      </td>
      <td style="vertical-align: top;">Generated Files</td>
    </tr>
<tr>
<td style="vertical-align: top;">Dest0Subfolder</td>
<td style="vertical-align: top;">Subfolder for files generated by the modeling tool.
</td>
<td style="vertical-align: top;">GeneratedModel</td>
</tr>
<tr>
<td style="vertical-align: top;">Dest0Label</td>
<td style="vertical-align: top;">Displayed text in the configuration dialog for the path to files generated by the modeling tool.
</td>
<td style="vertical-align: top;">for Model Sources</td>
</tr>
<tr>
<td style="vertical-align: top;">Dest1Name</td>
      <td style="vertical-align: top;">Name for files generated by the modeling tool. <span style="font-style: italic; font-weight: bold;">This should not be edited!</span><br>
      </td>
      <td style="vertical-align: top;">
RXF Files</td>


</tr>
<tr>
<td style="vertical-align: top;">Dest1Subfolder</td>

<td style="vertical-align: top;">Subfolder for files generated by the modeling tool.</td><td style="vertical-align: top;">RXF<br>
      </td>

</tr>
<tr>
<td style="vertical-align: top;">Dest1Label</td>

<td style="vertical-align: top;">Displayed text in the configuration dialog for the path to files generated by the modeling tool.</td><td style="vertical-align: top;">for RXF Files</td>

</tr>
  </tbody>
</table>
<br>
&nbsp;
<br>
</div>
<p id="Footer">This documentation belongs to the Product
Rpy_CPP_KeilRTX_Keil5_ARM_MCB1700_TD_V6.00, released on 2016-04-22.
&copy;&nbsp;2016 Willert Software Tools GmbH.</p>
</div>

</body></html>
