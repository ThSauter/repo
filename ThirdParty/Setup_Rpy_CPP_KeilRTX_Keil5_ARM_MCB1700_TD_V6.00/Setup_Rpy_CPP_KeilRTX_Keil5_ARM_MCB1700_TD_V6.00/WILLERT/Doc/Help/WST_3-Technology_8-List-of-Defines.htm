<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
  
  <meta content="text/html; charset=ISO-8859-1" http-equiv="content-type">
  <title>List of RXF Defines - RXF Documentation</title>

  
  
  <link rel="stylesheet" href="wst.css" type="text/css" media="screen">

  
  <link rel="stylesheet" href="wst_print.css" type="text/css" media="print">

  
  <meta http-equiv="content-type" content="text/html; charset=utf-8">

</head><body>
<div id="View">
<script src="TOC.js" type="text/javascript"> </script>
<div id="Content">
<h1><a name="Defines used inside the RXF"></a>List of RXF Defines</h1>
<br>
The RXF can be configured and tailored to the specific needs of an
application by setting specific #defines.<br>
<br>
There are three typical places used to set defines:<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top; width: 200px;"><span style="font-weight: bold;">File</span><br>
      </td>
      <td style="vertical-align: top;"><span style="font-weight: bold;">Description</span><br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WSTProduct.h"></a>WSTProduct.h<br>
      </td>
      <td style="vertical-align: top;">This file comes with a set of
useful defines for a specific product. E.g. if it is a product that
includes the target debugger, this is the place to configure which
communication interface is being used. Also this file defines macros
that allow testing for the components (e.g. a specific compiler and
target) the product was release for. <a href="#WSTProduct.h_List_of_Macros">See below</a>.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="RxfConstants.h"></a>RxfConstants.h<br>
      </td>
      <td style="vertical-align: top;">Defines which configure the
product to the needs of a specific model and project, like buildset,
general memory management options and debug support are set in the
RxfConstants header file. This file is generated by
IBM Rational Rhapsody. It is
automatically created from the environment's CPPCompileSwitches and the following configration properties CPP_CG::Configuration<br>
<table width="90%" border="1">
	<tr>
		<td><b>Property name</b></td>
		<td><b>Defines</b></td>
	<tr>
	<tr>
		<td>WSTAdditionalDefinesTD</td>
		<td>Using Stereotype LiveAnimation on Component or Configuration will generate the defines: "WST_ANIMATION" "WST_LIVE_ANIMATION" "WST_TARGET_DEBUGGING_ENABLED"<br><br>
			Using Stereotype WSTMonitorForTC on Component or Configuration will generate the defines: "WST_TARGET_DEBUGGING_ENABLED" "WST_TESTCONDUCTOR"</td>
	<tr>
</table>

<table width="90%" border="1">
	<tr>
		<td>WST_MEM_DebugMode</td>
		<td>The define "WST_MEM_NO_DEBUG" or "WST_MEM_DEBUG"</td>
	<tr>
	<tr>
		<td>WST_MEM_UseTail</td>
		<td>The define "WST_MEM_NO_TAIL" or "WST_MEM_USE_TAIL"</td>
	<tr>
</table>

<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="RxfDimensions.h"></a>RxfDimensions.h<br>
      </td>
      <td style="vertical-align: top;">This file is used to set the
dimensions RXF functionalities like preallocated memory pools and
queues. 

This file is generated by IBM Rational Rhapsody.

It usually sets these defines based on Configuration properties inside CPP_CG::Configuration.<br>
It is automatically created from the environment's properties.
<table width="90%" border="1">
	<tr>
		<td><b>Property name</b></td>
		<td><b>Defines</b></td>
	</tr>
	
	
	<tr>
		<td>WSTTinyBufferSize</td>
		<td>WST_TINY_BUFFER_SIZE</td>
	</tr>
	<tr>
		<td>WSTHugeBufferSize</td>
		<td>WST_HUGE_BUFFER_SIZE</td>
	</tr>
	<tr>
		<td>WSTInitialTinyBuffers</td>
		<td>WST_INITIAL_TINY_BUFFERS</td>
	</tr>
	<tr>
		<td>WSTInitialHugeBuffers</td>
		<td>WST_INITIAL_HUGE_BUFFERS</td>
	</tr>
	
	
	<tr>
		<td>WSTSmallBufferSize</td>
		<td>WST_SMALL_BUFFER_SIZE</td>
	</tr>
		
	<tr>
		<td>WSTMediumBufferSize</td>
		<td>WST_MEDIUM_BUFFER_SIZE</td>
	</tr>
		
	<tr>
		<td>WSTLargeBufferSize</td>
		<td>WST_LARGE_BUFFER_SIZE</td>
	</tr>
		
	<tr>
		<td>WSTInitialSmallBuffers</td>
		<td>WST_INITIAL_SMALL_BUFFERS</td>
	</tr>
		
	<tr>
		<td>WSTInitialMediumBuffers</td>
		<td>WST_INITIAL_MEDIUM_BUFFERS</td>
	</tr>
		
	<tr>
		<td>WSTInitialLargeBuffers</td>
		<td>WST_INITIAL_LARGE_BUFFERS</td>
	</tr>
		
	<tr>
		<td>WST_TMM_msPerTick</td>
		<td>WST_MS_PER_TICK</td>
	</tr>	
		
	
	<tr>
		<td>WST_DefaultMsqSize</td>
		<td>WST_TSK_DEFAULT_MESSAGE_QUEUE_SIZE</td>
	</tr>
	<tr>
		<td>WST_DefaultTaskStackSize</td>
		<td>WST_TSK_DEFAULT_STACK_SIZE</td>
	</tr>
	
	<tr>
		<td>WST_MainTaskStackSize</td>
		<td>WST_RTOS_MAIN_STACK_SIZE</td>
	</tr>
	<tr>
		<td>WSTMainTaskMsqSize</td>
		<td>WST_RTOS_MAIN_MESSAGE_QUEUE_SIZE</td>
	</tr>
		
	
	<tr>
		<td>WST_MonitorTaskPriority</td>
		<td>WST_MONITOR_TASK_PRIORITY</td>
	</tr>
	
	<tr>
		<td>WST_MainTaskPrioity</td>
		<td>WST_MAIN_TASK_PRIORITY</td>
	</tr>
	
	<tr>
		<td>WST_TaskDefaultPriority</td>
		<td>WST_TSK_DEFAULT_PRIORITY</td>
	</tr>
	<tr>
		<td>WST_TimerTaskPriority</td>
		<td>WST_TMM_TASK_PRIORITY</td>
	</tr>
	<tr>
		<td>WST_TimerTaskStackSize</td>
		<td>WST_TMM_TASK_STACK_SIZE</td>
	</tr>
	
</table>


      </td>
    </tr>
  </tbody>
</table>
<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top; width: 200px; font-weight: bold;">Define</td>
      <td style="vertical-align: top; font-weight: bold;">Description<br>
      </td>
    </tr>
    <tr style="font-style: italic;">
      <td colspan="2" rowspan="1" style="vertical-align: top; background-color: rgb(255, 255, 204); text-align: center;"><small>General<br>
      </small></td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="TRUE_Define"></a>TRUE<br>
      </td>
      <td style="vertical-align: top;">Boolean value 'true'. For some
products this may be defined by the RXF, for others it is already
defined by standard headers. Usually defined to "(WSTBoolean)1".<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="FALSE_Define"></a>FALSE<br>
      </td>
      <td style="vertical-align: top;">Boolean value 'false'. For some
products this may be defined by the RXF, for others it is already
defined by standard headers. Usually defined to "(WSTBoolean)0".</td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="NULL_Define"></a>NULL<br>
      </td>
      <td style="vertical-align: top;">Define used as invalid pointer
destination. For some
products this may be defined by the RXF, for others it is already
defined by standard headers. Usually defined to "(0)".<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="NO_PRINT_Define"></a>NO_PRINT<br>
      </td>
      <td style="vertical-align: top;">Makes sure no printf is used.
The RXF itself does not use printf (except WST_CON_LST when explicitly
defining WST_CON_LST_PRINTF). However
this define controls if the macro DEBUG_NOTIFY( MESSAGE ) which can be
used by the customer is mapped to printf or expands to nothing.<br>
      </td>
    </tr>
    <tr style="font-style: italic;">
      <td colspan="2" rowspan="1" style="vertical-align: top; background-color: rgb(255, 255, 204); text-align: center;"><small><a name="Debug_Macros"></a>Source
Level Debug Information<br>
      </small></td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="DEBUG_Define"></a>_DEBUG<br>
      </td>
      <td style="vertical-align: top;">Set when in Debug buildset. For
some
products this may be defined by the RXF, for others it is already
defined by standard headers.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="NDEBUG_Define"></a>NDEBUG<br>
      </td>
      <td style="vertical-align: top;">Set when in Release buildset.
For some
products this may be defined by the RXF, for others it is already
defined by standard headers.</td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="DEBUG_NOTIFY_Define"></a>DEBUG_NOTIFY(
MESSAGE )<br>
      </td>
      <td style="vertical-align: top;">If in _DEBUG buildset and
NO_PRINT is NOT set, this is mapped to printf to allow the customer to
use string based debug messages.<br>
      </td>
    </tr>
    <tr style="font-style: italic;">
      <td colspan="2" rowspan="1" style="vertical-align: top; background-color: rgb(255, 255, 204); text-align: center;"><small><a name="Memory_Management_Macros"></a>Memory
Management<br>
      </small></td>
    </tr>
    <tr>
      <td colspan="2" rowspan="1" style="vertical-align: top;">See also
      <a href="#RxfDimensions.h">RxfDimensions.h</a> and <a href="WST_3-Technology_1-Memory-Management_Deterministic-Realtime-Memory-Usage.htm">Deterministic
Realtime Memory Usage</a>.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="NO_MALLOC_Define"></a>NO_MALLOC<br>
      </td>
      <td style="vertical-align: top;">This define makes sure malloc()
is redirected to WST_MEM_getMemory() which uses pre-allocated buffers
of three fixed sizes. This mapping can be overridden by
WST_DO_NOT_MAP_MALLOC.
In that case the RXF will still not use malloc, but malloc may be used
in user code and would not be mapped. This also applies for the mapping
from free() to WST_MEM_returnMemory().<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_DO_NOT_MAP_MALLOC_Define"></a>WST_DO_NOT_MAP_MALLOC<br>
      </td>
      <td style="vertical-align: top;">See NO_MALLOC.</td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_MEM_USE_MUTEX_Define"></a>WST_MEM_USE_MUTEX<br>
      </td>
      <td style="vertical-align: top;">If this define is set, the
memory operations get/return memory are protected by mutexes of the
RTOS. If it is unset interupt protection is used to garante safe memory
allocation.</td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_MAP_MALLOC_Define"></a>WST_MAP_MALLOC<br>
      </td>
      <td style="vertical-align: top;">If NO_MALLOC and
WST_DO_NOT_MAP_MALLOC are not defined, this can be used to also map
user code's use of malloc to WST_MEM_getMemory(), but allow that RXF
function to allocate additional memory using malloc, if static buffers
are all used. This also applies for the mapping from free() to
WST_MEM_returnMemory().</td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WSTGETMEMORY_DEFINED"></a>WSTGETMEMORY_DEFINED<br>
      </td>
      <td style="vertical-align: top;">This is set in WSTTypes.h to
show that these mappings are done:<br>
      <ul>
        <li><small>WSTGetMemory()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
=&gt;&nbsp; WST_MEM_getMemory()</small></li>
        <li><small>WSTReturnMemory()&nbsp; =&gt;&nbsp;
WST_MEM_returnMemory()</small></li>
        <li><small>WSTRealloc()&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; =&gt;&nbsp; WST_MEM_reallocMemory()</small></li>
      </ul>
The user can define WSTGETMEMORY_DEFINED to override this mapping with
a custom one.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_ALLOCATE_WSTDIMENSION_Define"></a>WST_ALLOCATE_WSTDIMENSION<br>
      </td>
      <td colspan="1" rowspan="3" style="vertical-align: top;">WST RXF
internal mechanism to take care e.g. WST_TMM_itsTimeout is declared as
external with or without knowing it's size or even allocate it when
including WST_TMM_itsTimeout. This is necessary to support building an
RXF library without knowing the exact sizes for some products.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_ALLOCATE_WSTDIMMEMORYALLOCATIONPKG_Define"></a>WST_ALLOCATE_WSTDIMMEMORYALLOCATIONPKG<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_SHOW_DIMENSION_Define"></a>WST_SHOW_DIMENSION<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_CFG_HIGHWATERMARKS_Define"></a>WST_CFG_HIGHWATERMARKS<br>
      </td>
      <td style="vertical-align: top;">Allows analysis of queue and
buffer usage, see <a href="WST_3-Technology_1-Memory-Management_High-Water-Marks.htm">High
Water Marks help page</a>.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_MEM_POOL_CRITICAL_REGIONS"></a>WST_MEM_POOL_CRITICAL_REGIONS</td>
      <td style="vertical-align: top;">Only
for the OO-RTX. RTOS based frameworks have the memory pools protected
via mutexes.<br>
      </td>
    </tr>
    <tr style="font-style: italic;">
      <td colspan="2" rowspan="1" style="vertical-align: top; background-color: rgb(255, 255, 204); text-align: center;"><small>RXF
General Functionality<br>
      </small></td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_COMPILER_INIT_AS_EMPTY_MACRO_Define"></a>WST_COMPILER_INIT_AS_EMPTY_MACRO<br>
      </td>
      <td style="vertical-align: top;">Many compiler adapters do not
need a
function to initialize the compiler environment. In that case
our adapter defines this and maps WSTCompiler_Init() to nothing. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_CON_LST_PRINTF_Define"></a>WST_CON_LST_PRINTF<br>
      </td>
      <td style="vertical-align: top;">Explicitly allows the
WST_CON_LST functions using printf: WST_CON_LST_selftest() and
WST_CON_LST_print().<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_H_Define"></a>WST_H<br>
      </td>
      <td style="vertical-align: top;">Our include files test if WST_H
is defined and when it's not defined, whey behave like empty header
files. It is not set when compiling the user project, in order to have
WST.h include everything in the right order, and 'ignore' generated
include statements by the modelling tool. Our RXF files define WST_H
themselves to control the order and need of included RXF files.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_NO_CLASS_DESTRUCTION_Define"></a>WST_NO_CLASS_DESTRUCTION<br>
      </td>
      <td style="vertical-align: top;">If defined, the body of the
function WST_FSM_cleanup() is empty. This causes the call to
WST_RXF_cancelEventsAndTimeouts() is not performed. An optimizing
linker will then remove a lot of code needed for class and statechart
destruction including cancelling of events. So it allows disabling
class destruction mechanisms, if ROM size is very limited and the
application is very static and never needs to destroy classes or
terminate statecharts.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_DEFAULT_MAX_NULL_STEPS_Define"></a>WST_DEFAULT_MAX_NULL_STEPS</td>
      <td style="vertical-align: top;">Configures the maximum number of
directly following <a href="WST_3-Technology_2-Realtime.htm#NULL_Transitions">NULL-transitions</a>.
Defined in WST_FSM.h.</td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_MS_PER_TICK_Define"></a>WST_MS_PER_TICK<br>
      </td>
      <td style="vertical-align: top;">Configures the <a name="Timer_granularity"></a><a name="System_Tick"></a>timer
granularity on the RXF, which is the base for RXF timeout management.
Defined in WSTTarget.h.<br>
      </td>
    </tr>
    <tr style="font-style: italic;">
      <td colspan="2" rowspan="1" style="vertical-align: top; background-color: rgb(255, 255, 204); text-align: center;"><small><a name="RTOS_Functionality_Macros"></a>RXF
RTOS Functionality<br>
      </small></td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_TARGET_SAVEISRMASK_Define"></a>WST_TMM_MAX_IRQ_TIMEOUTS<br>
      </td>
      <td style="vertical-align: top;">This define is only available
for th OORTX version of the RXF<br>
. It defines the size of a buffer for timeouts. This buffer is used to
store timouts generated by interrupts to avoid race conditions between
the interrupt context and the main prozess context. This #define is
autogenerated by the modelling tool into the file RxfConstants.h. If
the value of this constant is equal 0 the saftymechanism is not active.</td>
    </tr>
    <tr style="font-style: italic;">
      <td colspan="2" rowspan="1" style="vertical-align: top; background-color: rgb(255, 255, 204); text-align: center;"><small><a name="Target_Specific_Macros"></a>RXF Target specific Functionality<br>
      </small></td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_TARGET_SAVEISRMASK_Define"></a>WST_TARGET_SAVEISRMASK<br>
      </td>
      <td style="vertical-align: top;">This can be defined in
WSTTarget.h, if the target needs to save an interrupt mask status when
WSTTarget_enterCriticalRegion() is called and need to restore that mask
with WSTTarget_exitCriticalRegion().<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_NEARD_Define"></a>WST_NEARD</td>
      <td colspan="1" rowspan="9" style="vertical-align: top;">These
macros are used in declarations, for those toolchains which support
'near' and 'far' keywords. We distinguish between data and code, hence
the 'D' or 'C' in the macros. Because one may not use the sizeof()
operator in preprocessor macro expressions, we must define some size
macros to be used to trigger the proper the memory type macros used in
the framework:<br>
      <ul>
        <li>&nbsp;the size of pointers which are using this 'near' or
'far'. </li>
        <li>&nbsp;the size of a timeUnit.</li>
      </ul>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_FARD_Define"></a>WST_FARD
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_NEARC_Define"></a>WST_NEARC
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_FARC_Define"></a>WST_FARC
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_NEARD_ADDRESS_SIZE_Define"></a>WST_NEARD_ADDRESS_SIZE </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_FARD_ADDRESS_SIZE_Define"></a>WST_FARD_ADDRESS_SIZE </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_NEARC_ADDRESS_SIZE_Define"></a>WST_NEARC_ADDRESS_SIZE </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_FARC_ADDRESS_SIZE_Define"></a>WST_FARC_ADDRESS_SIZE </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_TIMEUNIT_ADDRESS_SIZE_Define"></a>WST_TIMEUNIT_ADDRESS_SIZE</td>
    </tr>
    <tr style="font-style: italic;">
      <td colspan="2" rowspan="1" style="vertical-align: top; background-color: rgb(255, 255, 204); text-align: center;"><small><a name="Modelling_Tool_Specific_Macros"></a>Modelling Tool specific
Functionality<br>
      </small></td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_FSM_DIRECT_DELETION_Define"></a>WST_FSM_DIRECT_DELETION </td>
      <td style="vertical-align: top;">Rhapsody specific. Can be used
to minimize virtual table WST_FSM_Vtbl by removing the entries
freeMethod and
cleanupMethod, if direct deletion should be used. When set, Rhapsody
Code generation must support this, too.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_PORTS_DISABLED_Define"></a>WST_PORTS_DISABLED<br>
      </td>
      <td style="vertical-align: top;">The UML Element Ports is
currently only supported by Rhapsody. It can be disabled by setting
WST_PORTS_DISABLED if no UML ports are used in the model to save
footprint. Usually in our RXF products this is defined in
CPPCompileSwitches, so it gets generated into <a href="#RxfConstants.h">RxfConstants.h</a>.
      </td>
    </tr>
    <tr style="font-style: italic;">
      <td colspan="2" rowspan="1" style="vertical-align: top; background-color: rgb(255, 255, 204); text-align: center;"><small>Identifiers
for the Parts of the Product (Components), all found in <a name="WSTProduct.h_List_of_Macros"></a><a href="#WSTProduct.h">WSTProduct.h</a><br>
      </small></td>
    </tr>
    <tr>
      <td style="vertical-align: top;">WST_COMPILERANDTARGET_&lt;compiler&gt;_&lt;target&gt;<br>
      </td>
      <td style="vertical-align: top;">Identifying which compiler and
target the product should be used with.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">WST_MODELLING_&lt;modelling tool
name&gt;<br>
      </td>
      <td style="vertical-align: top;">Identifying which Modelling Tool
the product should be used with. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">WST_RTOS_&lt;rtos&gt;<br>
      </td>
      <td style="vertical-align: top;">Identifying which RTOS the
product should be used with.</td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_RXF_MINIRXF_Define"></a>WST_RXF_MINIRXF<br>
      </td>
      <td style="vertical-align: top;">This indicates the product
contains a very limited RXF which does not support events, timeouts
etc., but just running software on a target and depending on the Target
Debugger, communication with the host.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_RXF_RXF_Define"></a>WST_RXF_RXF<br>
      </td>
      <td style="vertical-align: top;">Products with this RXF include
the full RXF designed for use with a third party RTOS.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_RXF_OORTX_Define"></a>WST_RXF_OORTX<br>
      </td>
      <td style="vertical-align: top;">This is defined when the RXF is
optimized for the OORTX runtime system.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_EXTENSION_Define"></a>WST_EXTENSION_&lt;extension&gt;<br>
      </td>
      <td style="vertical-align: top;">Allows testing, if an RXF
extension is part of the product, e.g. WST_EXTENSION_TD for the
Embedded UML Target Debugger with monitor or WST_EXTENSION_Eval for an
evaluation version of the RXF.<br>
      </td>
    </tr>
    <tr style="font-style: italic;">
      <td colspan="2" rowspan="1" style="vertical-align: top; background-color: rgb(255, 255, 204); text-align: center;"><small><a name="Error_Handling_Defines"></a>Error Handling<br>
      </small></td>
    </tr>
    <tr>
      <td colspan="2" rowspan="1" style="vertical-align: top;">Please
also see the Detailed List of Enumerated Error Codes on the <a href="WST_3-Technology_4-Error-Handling.htm">Error Handling Help Page</a>.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_FORCE_ALLOC_FAILED_Define"></a>WST_FORCE_ALLOC_FAILED</td>
      <td style="vertical-align: top;">If malloc() returns NULL when
allocating dynamic memory via the RXF (e.g. WST_MEM_getMemory()), the
RXF error handler is called, if the _DEBUG define is set OR if
WST_FORCE_ALLOC_FAILED is set. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_FORCE_ALLOC_TOO_LARGE_Define"></a>WST_FORCE_ALLOC_TOO_LARGE </td>
      <td style="vertical-align: top;">If WST_MEM_getMemory() is called
with a size larger than the size of the large buffers, the RXF usually
dynamically allocates that memory via malloc(). Instead of this
behavior the RXF error handler is called with code
WST_ERR_ALLOC_TOO_LARGE when NO_MALLOC or WST_FORCE_ALLOC_TOO_LARGE is
defined. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_FORCE_ERRORHANDLER_IN_RELEASE_Define"></a>WST_FORCE_ERRORHANDLER_IN_RELEASE</td>
      <td style="vertical-align: top;">If defined, currently just
defines WST_FORCE_ALLOC_FAILED. <br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_FORCE_ERR_CON_LST_EMPTY_Define"></a>WST_FORCE_ERR_CON_LST_EMPTY</td>
      <td style="vertical-align: top;">Can be defined to make
WST_CON_LST_removeHead() and WST_CON_LST_removeEntry call the error
handler instead of just returning NULL or WSTFALSE if the WST_CON_LST
was empty. <br>
      </td>
    </tr>
    <tr style="font-style: italic;">
      <td colspan="2" rowspan="1" style="vertical-align: top; background-color: rgb(255, 255, 204); text-align: center;"><small><a name="WSTMonitor_related_defines"></a><a name="Communication_Interface_Defines"></a>WSTMonitor / Embedded UML
Target Debugger related defines<br>
      </small></td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_TARGET_DEBUGGING_ENABLED_Define"></a>WST_TARGET_DEBUGGING_ENABLED<br>
      </td>
      <td style="vertical-align: top;">Must be defined to use the
WSTMonitor.
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_LIVE_ANIMATION"></a>WST_LIVE_ANIMATION<br>
      </td>
      <td style="vertical-align: top;">This activates the live
animation for the RXF (notifications of sending events or object
initialisation / destruction). Without this define it is still possible
to use the Target Debugger as interface for the BTC Test Conductor.<br>
<b>When the stereotyp LiveAnimation is
selceted in the Component of your Rhapsody project, this define will be
created automaticly.</b><br>

WST_TARGET_DEBUGGING_ENABLED must also be defined.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_IAR_MSP430G2xx3_SERIAL_IO_Define"></a>WST_IAR_MSP430G2xx3_SERIAL_IO</td>
      <td style="vertical-align: top;">Defined when serial
communication for the target MSP430G2xx3 with IAR compiler should be
used in WSTMonitorIO.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_IAR_RX_SERIAL_IO_Define"></a>WST_IAR_RX_SERIAL_IO</td>
      <td style="vertical-align: top;">Defined when serial
communication for the target Renesas RX with IAR compiler should be
used in WSTMonitorIO. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_CORTEX_ITM_Define"></a>WST_CORTEX_ITM</td>
      <td style="vertical-align: top;">Defined when ITM via JTAG
communication for the target ARM Cortex M3 (LPC17xx) with Keil compiler
should be used in WSTMonitorIO. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_LPC17xx_SERIAL_IO_Define"></a>WST_LPC17xx_SERIAL_IO</td>
      <td style="vertical-align: top;">Defined when serial
communication for the target ARM Cortex M3 (LPC17xx) should be used in
WSTMonitorIO. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_LPC21xx_SERIAL_IO_Define"></a>WST_LPC21xx_SERIAL_IO</td>
      <td style="vertical-align: top;">Defined when serial
communication for the target ARM7 (LPC21xx) should be used in
WSTMonitorIO. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_MONITORIO_ADSP_BF53X_SERIAL_Define"></a>WST_MONITORIO_ADSP_BF53X_SERIAL</td>
      <td style="vertical-align: top;">Defined when serial
communication for the target Blackfin BF53X should be used in
WSTMonitorIO. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_MONITORIO_BYTEBASED_Define"></a>WST_MONITORIO_BYTEBASED</td>
      <td style="vertical-align: top;">MonitorIO communication is done
byte-by-byte, e.g. via a serial port.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_MONITORIO_KEIL_ARM7_RTA_Define"></a>WST_MONITORIO_KEIL_ARM7_RTA</td>
      <td style="vertical-align: top;">Defined when communication via
the Keil Real Time Agent (RTA) for the target ARM7 should be used in
WSTMonitorIO. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_MONITORIO_KEIL_ARM7_TRACE32_Define"></a>WST_MONITORIO_KEIL_ARM7_TRACE32</td>
      <td style="vertical-align: top;">Defined when communication via
the Lauterbach Debugger for the target ARM7 should be used in
WSTMonitorIO. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_MONITORIO_KEIL_CORTEXM3_TRACE32_Define"></a>WST_MONITORIO_KEIL_CORTEXM3_TRACE32</td>
      <td style="vertical-align: top;">Defined when communication via
the Lauterbach Debugger for the target ARM Cortex M3 should be used in
WSTMonitorIO. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_MONITORIO_PACKETBASED_Define"></a>WST_MONITORIO_PACKETBASED </td>
      <td style="vertical-align: top;">MonitorIO communication is done
package based, e.g. via TCP/IP connection. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_MONITORIO_REQUIRES_POLLING_Define"></a>WST_MONITORIO_REQUIRES_POLLING</td>
      <td style="vertical-align: top;">Must be defined if the RXF needs
to poll for incoming monitor commands after finishing run-to-completion.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_MONITORIO_WAIT_Define"></a>WST_MONITORIO_WAIT</td>
      <td style="vertical-align: top;">If defined and the WSTMonitorIO
send buffer is full, the RXF will block and wait until data is send and
there's space in the send buffer again.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_WIN32_TCPIP_IO_Define"></a>WST_WIN32_TCPIP_IO</td>
      <td style="vertical-align: top;"><br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_MONITOR_MINIMIZED_Define"></a>WST_MONITOR_MINIMIZED</td>
      <td style="vertical-align: top;">Further reduces the WSTMonitor
footprint by limiting it's functionality a bit:<br>
      <ul>
        <li>
          <span id="BugEvents"> No States can be requested</span></li>
        <li><span id="BugEvents">No Filters can be used</span></li>
        <li><span id="BugEvents">No WSTMonitor_Destructor</span></li>
      </ul>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_OFFLINE_ANIMATION_Define"></a>WST_OFFLINE_ANIMATION</td>
      <td style="vertical-align: top;">Reserved for a mechanism to just
write monitor data into a cyclic buffer for manual processing and
analysis instead of sending it via some interface to a host.<br>
      </td>
    </tr>
    <tr style="font-style: italic;">
      <td colspan="2" rowspan="1" style="vertical-align: top; background-color: rgb(255, 255, 204); text-align: center;"><small><a name="RXF_Hook_Defines"></a>RXF Hooks<br>
      </small></td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_PRE_EVENT_CONSUMPTION_HOOK_Define"></a>WST_PRE_EVENT_CONSUMPTION_HOOK</td>
      <td style="vertical-align: top;">This define can be found inside the File WSTTarget.h. 
      	It can be useded as a function like macro to call a user defined operation before event consumption inside the framework.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><a name="WST_PRE_EVENT_CONSUMPTION_HOOK_Define"></a>WST_POST_EVENT_CONSUMPTION_HOOK</td>
      <td style="vertical-align: top;">This define can be found inside the File WSTTarget.h. 
      	It can be useded as a function like macro to call a user defined operation after event consumption inside the framework.<br>
      </td>
    </tr>
  </tbody>
</table>
<br>
</div>
<p id="Footer">This documentation belongs to the Product
Rpy_CPP_KeilRTX_Keil5_ARM_MCB1700_TD_V6.00, released on 2016-04-22.
&copy;&nbsp;2016 Willert Software Tools GmbH.</p>
</div>

</body></html>
