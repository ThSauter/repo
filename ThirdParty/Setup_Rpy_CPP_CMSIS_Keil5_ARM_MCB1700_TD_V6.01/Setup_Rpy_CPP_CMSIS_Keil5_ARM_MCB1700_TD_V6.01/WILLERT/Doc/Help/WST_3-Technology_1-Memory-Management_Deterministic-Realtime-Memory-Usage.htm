<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
  
  <meta content="text/html; charset=ISO-8859-1" http-equiv="content-type">
  <title>Deterministic Real-Time Memory Usage - RXF Documentation</title>

  
  
  <link rel="stylesheet" href="wst.css" type="text/css" media="screen">

  
  <link rel="stylesheet" href="wst_print.css" type="text/css" media="print">

</head><body>
<div id="View">
<script src="TOC.js" type="text/javascript"> </script>
<div id="Content">
<h1><a name="Realtime_compliant_Dynamic_Memory_Management" id="Realtime_compliant_Dynamic_Memory_Management"></a>Real-Time
Compliant Dynamic Memory Management</h1>
<br>
In many real-time embedded systems, the use of dynamic
memory management via the standard C library functions malloc() and
free() is not wanted. Moreover, in certain secure environments you are not allowed to
use those functions. The main reason for not using heap functions is
fragmentation: after allocating and freeing chunks of memory, the heap
gets cluttered with areas, which are in use, and areas, which are free,
and it becomes more and more difficult to find a suitable area for some
object or structure, which must be allocated at runtime. Another
reason is that the standard functions are not real-time compliant,
calling them at the same time from different threads will cause errors.<br>
<br>
Instead of using the heap, the RXF offers static pools for various
purposes the size of the blocks and the number of blocks can be configured using properties:<br>
<ul>
  <li>a static pool for events. The size of this pool can be specified
in your UML model and its usage can be monitored via <a href="WST_3-Technology_1-Memory-Management_High-Water-Marks.htm">high
water marks</a>.&nbsp;</li>
  <li>a static pool for timeouts. Each tm() you are specifying in your
UML model results in a timeout structure, which is kept in a static
pool. The size of this pool can be specified and its usage can be
monitored via a high water mark.</li>
  <li>three static buffer pools; one for small-, for medium- and large
chunks. The number of elements in each pool as well as the size of a
small, medium and large block can be configured. The usage of the pools
can be monitored via high water marks.</li>
</ul>
<br>
Configuration of the values is done via properties inside Rhapsody.
These properties can be found under subject
and metaclass C_CG::Rpy_CPP_CMSIS_Keil5_ARM_MCB1700_TD_V6_01 and should be set
preferably on component level:<br>
<ul>
<li><a href="WST_3-Technology_7-Properties.htm#Property_WSTTinyBufferSize">WSTTinyBufferSize</a></li>
<li><a href="WST_3-Technology_7-Properties.htm#Property_WSTSmallBufferSize">WSTSmallBufferSize</a></li>
<li><a href="WST_3-Technology_7-Properties.htm#Property_WSTMediumBufferSize">WSTMediumBufferSize</a></li>
<li><a href="WST_3-Technology_7-Properties.htm#Property_WSTLargeBufferSize">WSTLargeBufferSize<br>
<li><a href="WST_3-Technology_7-Properties.htm#Property_WSTHugeBufferSize">WSTHugeBufferSize<br>
    <br>
</a></li>
<li><a href="WST_3-Technology_7-Properties.htm#Property_WSTInitialTinyBuffers">WSTInitialTinyBuffers</a></li>
<li><a href="WST_3-Technology_7-Properties.htm#Property_WSTInitialSmallBuffers">WSTInitialSmallBuffers</a></li>
<li><a href="WST_3-Technology_7-Properties.htm#Property_WSTInitialMediumBuffers">WSTInitialMediumBuffers</a></li>
<li><a href="WST_3-Technology_7-Properties.htm#Property_WSTInitialLargeBuffers">WSTInitialLargeBuffers<br>
<li><a href="WST_3-Technology_7-Properties.htm#Property_WSTInitialHugeBuffers">WSTInitialHugeBuffers<br>
    <br>
</a></li>
<li><a href="WST_3-Technology_7-Properties.htm#Property_WSTMaxTimeouts">WSTMaxTimeouts</a></li>
</ul>
<br>
<a name="BaseNumberOfInstances" id="BaseNumberOfInstances"></a> If you
want to prevent the use of these pools, you should override the
property&nbsp;CG::Event::BaseNumberOfInstances so it has no value.<br>
However, there is a more elegant way to achieve this:
You can set any of the Initial{Size}Buffers Properties to 0, the framework will then
automatically remove all use of this specific block.</size>
<br>
In the profile, which comes with your product, we have provided a
stereotype called StaticComponent, which sets certain properties in
Rhapsody to use the dynamic memory functions of the RXF that work
on the three buffer pools. Next to that, any call to malloc() and
free() is mapped onto the appropriate equivalent via macros, which are
included in the generated sources and RXF.<br>
<br>
When allocating a chunk, the function that operates on the buffer
pools tries to allocate the chunk in the pool, which matches the size
needed. This way we try to prevent fragmentation.<br>
<h2>Events</h2>
The pool for the events is actually a pool for pointers to events: the size
of an event will vary depending if you are using arguments in events.
So the pointer array is allocated statically. The events itself are
allocated in the buffer pools: depending on any object you allocate
dynamically you might want to fine-tune the size of the elements in the
small buffer to the size of your largest event.<br>
<br>
<br>
<h2>Timeouts</h2>

The timeouts are stored in their static pool. Because the size of a timeout
structure is always the same, the pool itself holds the timeouts. A
timeout is actually translated into an event: the timeout structure
itself remains in the timeout pool, but its address is inserted in the
event (pointer) pool.<br>
Setting the TimeoutBuffers to 0 will cause the framework to remove all timer
code and thus be much smaller.
<br>
<br>
<h2>Objects</h2>
<a name="Mixed_Mode_Static_and_Dynamic_Memory" id="Mixed_Mode_Static_and_Dynamic_Memory"></a>You may use singletons
in your UML model or use the three static pools
(small, medium and large buffers) for allocation of your objects. It is
also possible to use a mixture of static and dynamic memory:&nbsp; you
can disable the definition of NO_MALLOC, which prevents the memory management
of the RXF from calling malloc(), when a static buffer pool is
exhausted. If you inspect the memory map file created by the linker
(verify the settings in your IDE to create one), you can calculate the
size of your objects &nbsp;- provided you start with static allocated
objects - and see if you can fine-tune the dimensions of your three
static buffer pools. You can use the high water marks to verify how
much these are used at runtime.<br>
<br>
<br>
<h2><a name="NO_MALLOC" id="NO_MALLOC"></a><a name="Mapping_malloc_and_free" id="Mapping_malloc_and_free"></a><a name="realloc_undefine" id="realloc_undefine"></a><a name="calloc_undefine" id="calloc_undefine"></a><a name="malloc_mapping" id="malloc_mapping"></a><a name="free_mapping" id="free_mapping"></a><a name="WST_DO_NOT_MAP_MALLOC" id="WST_DO_NOT_MAP_MALLOC"></a>Mapping malloc() and free()</h2>
If
you have defined NO_MALLOC&nbsp;(e.g. by selecting the StaticComponent
stereotype), malloc() and free() will be mapped to WST_MEM_getMemory()
and WST_MEM_returnMemory(). This means also if you use malloc() and
free() in your user code, these will be mapped to the static pools. You
should check you map file in your project to be sure, malloc and free
are not used anymore.<br>
Please note: Mapping of realloc is currently not supported, because the
stdlib.h function just needs pointer and new size as arguments, but
WST_MEM_reallocMemory expects three arguments: the pointer, current
size and new size. Also calloc is not being mapped.<br>
<br>
If you want to work with NO_MALLOC defined but need to deactivate the
mapping of malloc() and free(), make sure to define the
macro&nbsp;WST_DO_NOT_MAP_MALLOC.<br>
<br>
<a name="realloc undefine"></a><a name="calloc undefine"></a>If WST_DO_NOT_MAP_MALLOC is not defined, but NO_MALLOC or WST_MAP_MALLOC is set, we
undefine realloc and calloc in file WST_MEM.h. For some
compilers this helps to make sure these functions cannot be used and
will lead to an error message or warning at compile time. But please
note that other compilers will handle the function declaration
differently and #undef realloc / #undef calloc will not generate a
warning or an error.<br>

<br>
<br>
</div>
<p id="Footer">This documentation belongs to the Product
Rpy_CPP_CMSIS_Keil5_ARM_MCB1700_TD_V6.01, released on 2017-02-27.
&copy;&nbsp;2016 Willert Software Tools GmbH.</p>
</div>

</body></html>
