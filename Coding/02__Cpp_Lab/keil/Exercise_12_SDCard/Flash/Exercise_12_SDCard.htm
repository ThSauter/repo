<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\Exercise_12_SDCard.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\Exercise_12_SDCard.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Jun 01 15:38:02 2017
<BR><P>
<H3>Maximum Stack Usage =        624 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SDCard::rootState_processEvent() &rArr; SDCard::append(char) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2a5]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3f]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">rt_alloc_box</a><BR>
 <LI><a href="#[1d9]">WST_OSW_MEM_malloc(unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14f]">WST_MEM::getMemory(unsigned)</a><BR>
 <LI><a href="#[13]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">NMI_Handler</a><BR>
 <LI><a href="#[14]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">HardFault_Handler</a><BR>
 <LI><a href="#[15]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MemManage_Handler</a><BR>
 <LI><a href="#[16]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BusFault_Handler</a><BR>
 <LI><a href="#[17]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UsageFault_Handler</a><BR>
 <LI><a href="#[19]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">DebugMon_Handler</a><BR>
 <LI><a href="#[32]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[41]">&lang;Func1&rang;</a> from ledbar.o(.text) referenced from ledbar.o(.text)
 <LI><a href="#[45]">&lang;Func3&rang;</a> from wst_tmr.o(.text) referenced from wst_tmr.o(.text)
 <LI><a href="#[32]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[33]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3e]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[35]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[36]">DMA_IRQHandler</a> from gpdma_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[38]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[37]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4b]">MC0_SPI_SignalEvent</a> from fs_config.o(.text) referenced from fs_config.o(.text)
 <LI><a href="#[3a]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3c]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3b]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[39]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7b]">SSP0_Control</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[6f]">SSP0_GPDMA_Rx_SignalEvent</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[6e]">SSP0_GPDMA_Tx_SignalEvent</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[7a]">SSP0_GetDataCount</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[7c]">SSP0_GetStatus</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[2a]">SSP0_IRQHandler</a> from ssp_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[74]">SSP0_Initialize</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[76]">SSP0_PowerControl</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[78]">SSP0_Receive</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[77]">SSP0_Send</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[79]">SSP0_Transfer</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[75]">SSP0_Uninitialize</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[84]">SSP1_Control</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[71]">SSP1_GPDMA_Rx_SignalEvent</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[70]">SSP1_GPDMA_Tx_SignalEvent</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[83]">SSP1_GetDataCount</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[85]">SSP1_GetStatus</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[2b]">SSP1_IRQHandler</a> from ssp_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7d]">SSP1_Initialize</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[7f]">SSP1_PowerControl</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[81]">SSP1_Receive</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[80]">SSP1_Send</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[82]">SSP1_Transfer</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[7e]">SSP1_Uninitialize</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[73]">SSP_GetCapabilities</a> from ssp_lpc17xx.o(.text) referenced 2 times from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[72]">SSP_GetVersion</a> from ssp_lpc17xx.o(.text) referenced 2 times from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[18]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[1d]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">UART0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3d]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[57]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[2b5]">WST_Monitor_receiveTask(void*)</a> from wstmonitor.o(CODE_ANIM_RUNNING_FAST) referenced from wstmonitor.o(CODE_ANIM_RUNNING_FAST)
 <LI><a href="#[2bf]">WST_OSW_TMM_timerCallBack(const void*)</a> from wst_osw.o(CODE_RXF_RUNNING_FAST) referenced from wst_osw.o(CODE_RXF_RUNNING_FAST)
 <LI><a href="#[93]">TestBuilder::startBehavior()</a> from testbuilder.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[94]">TestBuilder::destroy()</a> from testbuilder.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[8d]">TestBuilder::~TestBuilder__deallocating()</a> from testbuilder.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[8c]">TestBuilder::~TestBuilder()</a> from testbuilder.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[96]">evJoystickPos::~evJoystickPos__deallocating()</a> from defaultpkg.o(i._ZN13evJoystickPosD0Ev) referenced from defaultpkg.o(.constdata__ZTV13evJoystickPos)
 <LI><a href="#[95]">evJoystickPos::~evJoystickPos()</a> from defaultpkg.o(i._ZN13evJoystickPosD1Ev) referenced from defaultpkg.o(.constdata__ZTV13evJoystickPos)
 <LI><a href="#[9c]">RunningIndicatorLed::cancelTimeout(const WST_TMR*)</a> from runningindicatorled.o(.text) referenced from runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
 <LI><a href="#[9b]">RunningIndicatorLed::startBehavior()</a> from runningindicatorled.o(.text) referenced from runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
 <LI><a href="#[9d]">RunningIndicatorLed::rootState_entDef()</a> from runningindicatorled.o(.text) referenced from runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
 <LI><a href="#[9e]">RunningIndicatorLed::rootState_processEvent()</a> from runningindicatorled.o(.text) referenced from runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
 <LI><a href="#[9a]">RunningIndicatorLed::~RunningIndicatorLed__deallocating()</a> from runningindicatorled.o(.text) referenced from runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
 <LI><a href="#[99]">RunningIndicatorLed::~RunningIndicatorLed()</a> from runningindicatorled.o(.text) referenced from runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
 <LI><a href="#[53]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[a6]">Led::cancelTimeout(const WST_TMR*)</a> from led.o(.text) referenced from led.o(.constdata__ZTV3Led)
 <LI><a href="#[a8]">Led::startBehavior()</a> from led.o(.text) referenced from led.o(.constdata__ZTV3Led)
 <LI><a href="#[a5]">Led::rootState_entDef()</a> from led.o(.text) referenced from led.o(.constdata__ZTV3Led)
 <LI><a href="#[a7]">Led::rootState_processEvent()</a> from led.o(.text) referenced from led.o(.constdata__ZTV3Led)
 <LI><a href="#[a4]">Led::~Led__deallocating()</a> from led.o(.text) referenced from led.o(.constdata__ZTV3Led)
 <LI><a href="#[42]">Led::~Led()</a> from led.o(.text) referenced from led.o(.constdata__ZTV3Led)
 <LI><a href="#[42]">Led::~Led()</a> from led.o(.text) referenced from ledbar.o(.text)
 <LI><a href="#[aa]">evOn::~evOn__deallocating()</a> from defaultpkg.o(i._ZN4evOnD0Ev) referenced from defaultpkg.o(.constdata__ZTV4evOn)
 <LI><a href="#[a9]">evOn::~evOn()</a> from defaultpkg.o(i._ZN4evOnD1Ev) referenced from defaultpkg.o(.constdata__ZTV4evOn)
 <LI><a href="#[ad]">Clock::~Clock__deallocating()</a> from clock.o(.text) referenced from clock.o(.constdata__ZTV5Clock)
 <LI><a href="#[ac]">Clock::~Clock()</a> from clock.o(.text) referenced from clock.o(.constdata__ZTV5Clock)
 <LI><a href="#[af]">evOff::~evOff__deallocating()</a> from defaultpkg.o(i._ZN5evOffD0Ev) referenced from defaultpkg.o(.constdata__ZTV5evOff)
 <LI><a href="#[ae]">evOff::~evOff()</a> from defaultpkg.o(i._ZN5evOffD1Ev) referenced from defaultpkg.o(.constdata__ZTV5evOff)
 <LI><a href="#[b5]">LedBar::startBehavior()</a> from ledbar.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[b3]">LedBar::rootState_entDef()</a> from ledbar.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[b4]">LedBar::rootState_processEvent()</a> from ledbar.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[b6]">LedBar::destroy()</a> from ledbar.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[b2]">LedBar::~LedBar__deallocating()</a> from ledbar.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[b1]">LedBar::~LedBar()</a> from ledbar.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[b7]">OMList&lang;OMString&rang;::~OMList()</a> from display.o(t._ZN6OMListI8OMStringED1Ev) referenced from display.o(.constdata__ZTV6OMListI8OMStringE)
 <LI><a href="#[bf]">SDCard::startBehavior()</a> from sdcard.o(.text) referenced from sdcard.o(.constdata__ZTV6SDCard)
 <LI><a href="#[bd]">SDCard::rootState_entDef()</a> from sdcard.o(.text) referenced from sdcard.o(.constdata__ZTV6SDCard)
 <LI><a href="#[be]">SDCard::rootState_processEvent()</a> from sdcard.o(.text) referenced from sdcard.o(.constdata__ZTV6SDCard)
 <LI><a href="#[bc]">SDCard::~SDCard__deallocating()</a> from sdcard.o(.text) referenced from sdcard.o(.constdata__ZTV6SDCard)
 <LI><a href="#[bb]">SDCard::~SDCard()</a> from sdcard.o(.text) referenced from sdcard.o(.constdata__ZTV6SDCard)
 <LI><a href="#[c4]">Display::startBehavior()</a> from display.o(.text) referenced from display.o(.constdata__ZTV7Display)
 <LI><a href="#[c2]">Display::rootState_entDef()</a> from display.o(.text) referenced from display.o(.constdata__ZTV7Display)
 <LI><a href="#[c3]">Display::rootState_processEvent()</a> from display.o(.text) referenced from display.o(.constdata__ZTV7Display)
 <LI><a href="#[c1]">Display::~Display__deallocating()</a> from display.o(.text) referenced from display.o(.constdata__ZTV7Display)
 <LI><a href="#[c0]">Display::~Display()</a> from display.o(.text) referenced from display.o(.constdata__ZTV7Display)
 <LI><a href="#[c5]">WST_EVT::~WST_EVT__deallocating()</a> from defaultpkg.o(CODE_RXF_RUNNING_FAST) referenced from defaultpkg.o(.constdata__ZTV7WST_EVT)
 <LI><a href="#[8f]">WST_FSM::cancelTimeout(const WST_TMR*)</a> from wst_fsm.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[8f]">WST_FSM::cancelTimeout(const WST_TMR*)</a> from wst_fsm.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[8f]">WST_FSM::cancelTimeout(const WST_TMR*)</a> from wst_fsm.o(.text) referenced from sdcard.o(.constdata__ZTV6SDCard)
 <LI><a href="#[8f]">WST_FSM::cancelTimeout(const WST_TMR*)</a> from wst_fsm.o(.text) referenced from display.o(.constdata__ZTV7Display)
 <LI><a href="#[8f]">WST_FSM::cancelTimeout(const WST_TMR*)</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[8e]">WST_FSM::rootState_entDef()</a> from wst_fsm.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[8e]">WST_FSM::rootState_entDef()</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[90]">WST_FSM::rootState_processEvent()</a> from wst_fsm.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[90]">WST_FSM::rootState_processEvent()</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[91]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[91]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
 <LI><a href="#[91]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from led.o(.constdata__ZTV3Led)
 <LI><a href="#[91]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[91]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from sdcard.o(.constdata__ZTV6SDCard)
 <LI><a href="#[91]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from display.o(.constdata__ZTV7Display)
 <LI><a href="#[91]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[91]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from joystick.o(.constdata__ZTV8Joystick)
 <LI><a href="#[92]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[92]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
 <LI><a href="#[92]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from led.o(.constdata__ZTV3Led)
 <LI><a href="#[92]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[92]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from sdcard.o(.constdata__ZTV6SDCard)
 <LI><a href="#[92]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from display.o(.constdata__ZTV7Display)
 <LI><a href="#[92]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[92]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from joystick.o(.constdata__ZTV8Joystick)
 <LI><a href="#[c7]">WST_FSM::~WST_FSM__deallocating()</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[c6]">WST_FSM::~WST_FSM()</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[56]">WST_MSQ::~WST_MSQ()</a> from wst_msq.o(.text) referenced from wst_osw.o(CODE_RXF_RUNNING_FAST)
 <LI><a href="#[44]">WST_TMR::WST_TMR()</a> from wst_tmr.o(i._ZN7WST_TMRC1Ev) referenced from wst_tmr.o(.text)
 <LI><a href="#[c8]">WST_TMR::~WST_TMR__deallocating()</a> from wst_tmm.o(i._ZN7WST_TMRD0Ev) referenced from wst_tmm.o(.constdata__ZTV7WST_TMR)
 <LI><a href="#[43]">WST_TMR::~WST_TMR()</a> from wst_tmm.o(i._ZN7WST_TMRD1Ev) referenced from wst_tmm.o(.constdata__ZTV7WST_TMR)
 <LI><a href="#[43]">WST_TMR::~WST_TMR()</a> from wst_tmm.o(i._ZN7WST_TMRD1Ev) referenced from wst_tmr.o(.text)
 <LI><a href="#[55]">WST_TSK::task_start(void*)</a> from wst_tsk.o(.text) referenced from wst_osw.o(CODE_RXF_RUNNING_FAST)
 <LI><a href="#[c9]">WST_TSK::~WST_TSK__deallocating()</a> from wst_tsk.o(.text) referenced from wst_tsk.o(.constdata__ZTV7WST_TSK)
 <LI><a href="#[46]">WST_TSK::~WST_TSK()</a> from wst_tsk.o(.text) referenced from wst_tsk.o(.constdata__ZTV7WST_TSK)
 <LI><a href="#[46]">WST_TSK::~WST_TSK()</a> from wst_tsk.o(.text) referenced from wstrtos.o(.text)
 <LI><a href="#[cb]">evBlink::~evBlink__deallocating()</a> from defaultpkg.o(i._ZN7evBlinkD0Ev) referenced from defaultpkg.o(.constdata__ZTV7evBlink)
 <LI><a href="#[ca]">evBlink::~evBlink()</a> from defaultpkg.o(i._ZN7evBlinkD1Ev) referenced from defaultpkg.o(.constdata__ZTV7evBlink)
 <LI><a href="#[ce]">evError::~evError__deallocating()</a> from defaultpkg.o(i._ZN7evErrorD0Ev) referenced from defaultpkg.o(.constdata__ZTV7evError)
 <LI><a href="#[cd]">evError::~evError()</a> from defaultpkg.o(i._ZN7evErrorD1Ev) referenced from defaultpkg.o(.constdata__ZTV7evError)
 <LI><a href="#[d1]">evSDLog::~evSDLog__deallocating()</a> from defaultpkg.o(i._ZN7evSDLogD0Ev) referenced from defaultpkg.o(.constdata__ZTV7evSDLog)
 <LI><a href="#[d0]">evSDLog::~evSDLog()</a> from defaultpkg.o(i._ZN7evSDLogD1Ev) referenced from defaultpkg.o(.constdata__ZTV7evSDLog)
 <LI><a href="#[d6]">Joystick::cancelTimeout(const WST_TMR*)</a> from joystick.o(.text) referenced from joystick.o(.constdata__ZTV8Joystick)
 <LI><a href="#[d5]">Joystick::startBehavior()</a> from joystick.o(.text) referenced from joystick.o(.constdata__ZTV8Joystick)
 <LI><a href="#[d7]">Joystick::rootState_entDef()</a> from joystick.o(.text) referenced from joystick.o(.constdata__ZTV8Joystick)
 <LI><a href="#[d8]">Joystick::rootState_processEvent()</a> from joystick.o(.text) referenced from joystick.o(.constdata__ZTV8Joystick)
 <LI><a href="#[d4]">Joystick::~Joystick__deallocating()</a> from joystick.o(.text) referenced from joystick.o(.constdata__ZTV8Joystick)
 <LI><a href="#[d3]">Joystick::~Joystick()</a> from joystick.o(.text) referenced from joystick.o(.constdata__ZTV8Joystick)
 <LI><a href="#[df]">evSDLog2::~evSDLog2__deallocating()</a> from defaultpkg.o(i._ZN8evSDLog2D0Ev) referenced from defaultpkg.o(.constdata__ZTV8evSDLog2)
 <LI><a href="#[de]">evSDLog2::~evSDLog2()</a> from defaultpkg.o(i._ZN8evSDLog2D1Ev) referenced from defaultpkg.o(.constdata__ZTV8evSDLog2)
 <LI><a href="#[e2]">evToggle::~evToggle__deallocating()</a> from defaultpkg.o(i._ZN8evToggleD0Ev) referenced from defaultpkg.o(.constdata__ZTV8evToggle)
 <LI><a href="#[e1]">evToggle::~evToggle()</a> from defaultpkg.o(i._ZN8evToggleD1Ev) referenced from defaultpkg.o(.constdata__ZTV8evToggle)
 <LI><a href="#[97]">evJoystickPos::isTypeOf(short) const</a> from defaultpkg.o(.text) referenced from defaultpkg.o(.constdata__ZTV13evJoystickPos)
 <LI><a href="#[ab]">evOn::isTypeOf(short) const</a> from defaultpkg.o(.text) referenced from defaultpkg.o(.constdata__ZTV4evOn)
 <LI><a href="#[b0]">evOff::isTypeOf(short) const</a> from defaultpkg.o(.text) referenced from defaultpkg.o(.constdata__ZTV5evOff)
 <LI><a href="#[b8]">OMList&lang;OMString&rang;::getCurrent(void*) const</a> from display.o(t._ZNK6OMListI8OMStringE10getCurrentEPv) referenced from display.o(.constdata__ZTV6OMListI8OMStringE)
 <LI><a href="#[ba]">OMList&lang;OMString&rang;::getNext(void*&) const</a> from display.o(t._ZNK6OMListI8OMStringE7getNextERPv) referenced from display.o(.constdata__ZTV6OMListI8OMStringE)
 <LI><a href="#[b9]">OMList&lang;OMString&rang;::getFirst(void*&) const</a> from display.o(t._ZNK6OMListI8OMStringE8getFirstERPv) referenced from display.o(.constdata__ZTV6OMListI8OMStringE)
 <LI><a href="#[cc]">evBlink::isTypeOf(short) const</a> from defaultpkg.o(.text) referenced from defaultpkg.o(.constdata__ZTV7evBlink)
 <LI><a href="#[cf]">evError::isTypeOf(short) const</a> from defaultpkg.o(.text) referenced from defaultpkg.o(.constdata__ZTV7evError)
 <LI><a href="#[d2]">evSDLog::isTypeOf(short) const</a> from defaultpkg.o(.text) referenced from defaultpkg.o(.constdata__ZTV7evSDLog)
 <LI><a href="#[e0]">evSDLog2::isTypeOf(short) const</a> from defaultpkg.o(.text) referenced from defaultpkg.o(.constdata__ZTV8evSDLog2)
 <LI><a href="#[e3]">evToggle::isTypeOf(short) const</a> from defaultpkg.o(.text) referenced from defaultpkg.o(.constdata__ZTV8evToggle)
 <LI><a href="#[a2]">thunk{-64} to RunningIndicatorLed::cancelTimeout(const WST_TMR*)</a> from runningindicatorled.o(.text) referenced from runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
 <LI><a href="#[a1]">thunk{-64} to RunningIndicatorLed::rootState_entDef()</a> from runningindicatorled.o(.text) referenced from runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
 <LI><a href="#[a3]">thunk{-64} to RunningIndicatorLed::rootState_processEvent()</a> from runningindicatorled.o(.text) referenced from runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
 <LI><a href="#[a0]">thunk{-64} to RunningIndicatorLed::~RunningIndicatorLed__deallocating()</a> from runningindicatorled.o(.text) referenced from runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
 <LI><a href="#[9f]">thunk{-64} to RunningIndicatorLed::~RunningIndicatorLed()</a> from runningindicatorled.o(.text) referenced from runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
 <LI><a href="#[dc]">thunk{-64} to Joystick::cancelTimeout(const WST_TMR*)</a> from joystick.o(.text) referenced from joystick.o(.constdata__ZTV8Joystick)
 <LI><a href="#[db]">thunk{-64} to Joystick::rootState_entDef()</a> from joystick.o(.text) referenced from joystick.o(.constdata__ZTV8Joystick)
 <LI><a href="#[dd]">thunk{-64} to Joystick::rootState_processEvent()</a> from joystick.o(.text) referenced from joystick.o(.constdata__ZTV8Joystick)
 <LI><a href="#[da]">thunk{-64} to Joystick::~Joystick__deallocating()</a> from joystick.o(.text) referenced from joystick.o(.constdata__ZTV8Joystick)
 <LI><a href="#[d9]">thunk{-64} to Joystick::~Joystick()</a> from joystick.o(.text) referenced from joystick.o(.constdata__ZTV8Joystick)
 <LI><a href="#[98]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from display.o(.constdata__ZTV19OMAbstractContainerI8OMStringE)
 <LI><a href="#[e7]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[e6]">__sti___11_WSTRTOS_cpp_b410bc26</a> from wstrtos.o(.text) referenced from wstrtos.o(.init_array)
 <LI><a href="#[e4]">__sti___11_WST_TMM_cpp_5cffd7cf</a> from wst_tmm.o(.text) referenced from wst_tmm.o(.init_array)
 <LI><a href="#[e5]">__sti___11_WST_TMR_cpp_d87a1f05</a> from wst_tmr.o(.text) referenced from wst_tmr.o(.init_array)
 <LI><a href="#[54]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[4f]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[50]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4e]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[51]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4d]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4c]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[52]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[6d]">main</a> from rxf_behaviorpkg.o(.text) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[8b]">mc0_DevCtrl</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[86]">mc0_Init</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[8a]">mc0_RdInfo</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[88]">mc0_RdSect</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[87]">mc0_UnInit</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[89]">mc0_WrSect</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[6b]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[6c]">osTimerThread</a> from rt_cmsis.o(i.osTimerThread) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[6a]">os_idle_demon</a> from rtx_conf_cm.o(.text) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[3f]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[40]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[48]">rt_mut_release</a> from rt_mutex.o(i.rt_mut_release) referenced from rtx_conf_cm.o(.text)
 <LI><a href="#[47]">rt_mut_wait</a> from rt_mutex.o(i.rt_mut_wait) referenced from rtx_conf_cm.o(.text)
 <LI><a href="#[58]">svcDelay</a> from rt_cmsis.o(i.svcDelay) referenced from rt_cmsis.o(i.osDelay)
 <LI><a href="#[59]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[5a]">svcKernelRunning</a> from rt_cmsis.o(i.svcKernelRunning) referenced from rt_cmsis.o(i.osKernelRunning)
 <LI><a href="#[5b]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[5c]">svcKernelSysTick</a> from rt_cmsis.o(i.svcKernelSysTick) referenced from rt_cmsis.o(i.osKernelSysTick)
 <LI><a href="#[5d]">svcMessageCreate</a> from rt_cmsis.o(i.svcMessageCreate) referenced from rt_cmsis.o(i.osMessageCreate)
 <LI><a href="#[5e]">svcMessageGet</a> from rt_cmsis.o(i.svcMessageGet) referenced from rt_cmsis.o(i.osMessageGet)
 <LI><a href="#[5f]">svcMessagePut</a> from rt_cmsis.o(i.svcMessagePut) referenced from rt_cmsis.o(i.osMessagePut)
 <LI><a href="#[60]">svcMutexCreate</a> from rt_cmsis.o(i.svcMutexCreate) referenced from rt_cmsis.o(i.osMutexCreate)
 <LI><a href="#[61]">svcMutexDelete</a> from rt_cmsis.o(i.svcMutexDelete) referenced from rt_cmsis.o(i.osMutexDelete)
 <LI><a href="#[62]">svcMutexRelease</a> from rt_cmsis.o(i.svcMutexRelease) referenced from rt_cmsis.o(i.osMutexRelease)
 <LI><a href="#[63]">svcMutexWait</a> from rt_cmsis.o(i.svcMutexWait) referenced from rt_cmsis.o(i.osMutexWait)
 <LI><a href="#[64]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[65]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[65]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadGetId)
 <LI><a href="#[66]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[66]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadTerminate)
 <LI><a href="#[67]">svcTimerCall</a> from rt_cmsis.o(i.svcTimerCall) referenced from rt_cmsis.o(i.osTimerCall)
 <LI><a href="#[68]">svcTimerCreate</a> from rt_cmsis.o(i.svcTimerCreate) referenced from rt_cmsis.o(i.osTimerCreate)
 <LI><a href="#[69]">svcTimerStart</a> from rt_cmsis.o(i.svcTimerStart) referenced from rt_cmsis.o(i.osTimerStart)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[e7]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f0]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f2]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[37c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[37d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f3]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[37e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[f4]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[26f]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[f6]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[37f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[107]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[380]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[381]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[382]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[383]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[384]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[385]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[386]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[387]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[388]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[389]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[38a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[38b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[38c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[38d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[38e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[38f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[390]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[391]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[392]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[393]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[394]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[10d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[395]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[102]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[396]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[397]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[398]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[399]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[39a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[39b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[f1]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[39c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[104]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[106]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[39d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[108]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postli_1 &rArr; _platform_post_lib_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[10a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; WSTRTOS_Init() &rArr; WST_RXF_Main(short, char**) &rArr; TestBuilder::TestBuilder(WST_TSK*) &rArr; Joystick::Joystick(WST_TSK*) &rArr; WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[27b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[10c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[39e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[10e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[109]"></a>_platform_post_lib_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_conf_cm.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _platform_post_lib_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postli_1
</UL>

<P><STRONG><a name="[39f]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[36e]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[3a0]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[3a1]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[3a2]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[3a3]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[3a5]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>Clock::Clock()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Clock::Clock() &rArr; WSTMonitor_sendInit(void*, unsigned short, void*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[3a6]"></a>Clock::Clock__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>Clock::~Clock()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Clock::~Clock() &rArr; WSTMonitor_sendDestroy(void*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::~Clock__deallocating()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(.constdata__ZTV5Clock)
</UL>
<P><STRONG><a name="[3a7]"></a>Clock::~Clock__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>Clock::~Clock__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Clock::~Clock__deallocating() &rArr; Clock::~Clock() &rArr; WSTMonitor_sendDestroy(void*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::~Clock()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(.constdata__ZTV5Clock)
</UL>
<P><STRONG><a name="[177]"></a>Clock::getHour()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>

<P><STRONG><a name="[176]"></a>Clock::getMin()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>

<P><STRONG><a name="[175]"></a>Clock::getSec()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>

<P><STRONG><a name="[19b]"></a>WSTMonitor_getTypeSize0()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, defaultpkg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[19c]"></a>WSTMonitor_getTypeSize1()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, defaultpkg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[11c]"></a>evToggle::evToggle()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, defaultpkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evToggle::evToggle()
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::toggleSingleLed(int)
</UL>

<P><STRONG><a name="[3a8]"></a>evToggle::evToggle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, defaultpkg.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>evToggle::isTypeOf(short) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, defaultpkg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV8evToggle)
</UL>
<P><STRONG><a name="[11e]"></a>evOn::evOn()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, defaultpkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evOn::evOn()
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::rootState_processEvent()
</UL>

<P><STRONG><a name="[3a9]"></a>evOn::evOn__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, defaultpkg.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>evOn::isTypeOf(short) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, defaultpkg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV4evOn)
</UL>
<P><STRONG><a name="[11f]"></a>evOff::evOff()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, defaultpkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evOff::evOff()
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::rootState_processEvent()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::rootState_entDef()
</UL>

<P><STRONG><a name="[3aa]"></a>evOff::evOff__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, defaultpkg.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>evOff::isTypeOf(short) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, defaultpkg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV5evOff)
</UL>
<P><STRONG><a name="[120]"></a>evJoystickPos::evJoystickPos(char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, defaultpkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evJoystickPos::evJoystickPos(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::sample()
</UL>

<P><STRONG><a name="[3ab]"></a>evJoystickPos::evJoystickPos__sub_object(char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, defaultpkg.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>evJoystickPos::isTypeOf(short) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, defaultpkg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV13evJoystickPos)
</UL>
<P><STRONG><a name="[121]"></a>evBlink::evBlink()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, defaultpkg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>

<P><STRONG><a name="[3ac]"></a>evBlink::evBlink__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, defaultpkg.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>evBlink::isTypeOf(short) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, defaultpkg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV7evBlink)
</UL>
<P><STRONG><a name="[122]"></a>evSDLog::evSDLog(char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, defaultpkg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>

<P><STRONG><a name="[3ad]"></a>evSDLog::evSDLog__sub_object(char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, defaultpkg.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>evSDLog::isTypeOf(short) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, defaultpkg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV7evSDLog)
</UL>
<P><STRONG><a name="[123]"></a>evError::evError()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, defaultpkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evError::evError()
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::deleteFile()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>

<P><STRONG><a name="[3ae]"></a>evError::evError__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, defaultpkg.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>evError::isTypeOf(short) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, defaultpkg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV7evError)
</UL>
<P><STRONG><a name="[124]"></a>evSDLog2::evSDLog2(OMString)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defaultpkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = evSDLog2::evSDLog2(OMString) &rArr; OMString::OMString(const OMString&) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const OMString&)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::rootState_processEvent()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::read()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::initAndMount()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::deleteFile()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>

<P><STRONG><a name="[3af]"></a>evSDLog2::evSDLog2__sub_object(OMString)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, defaultpkg.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>evSDLog2::isTypeOf(short) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, defaultpkg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV8evSDLog2)
</UL>
<P><STRONG><a name="[127]"></a>Display::ClassWSTMonitor_getTypeSize10()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, display.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize10()
</UL>

<P><STRONG><a name="[126]"></a>WSTMonitor_getTypeSize10()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize10()
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::ClassWSTMonitor_getTypeSize10()
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[12b]"></a>Display::initStatechart()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, display.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display(WST_TSK*)
</UL>

<P><STRONG><a name="[128]"></a>Display::Display(WST_TSK*)</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Display::Display(WST_TSK*) &rArr; WSTMonitor_sendInit(void*, unsigned short, void*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetForegroundColor
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetFont
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetBackgroundColor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::initStatechart()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[3b0]"></a>Display::Display__sub_object(WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, display.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>Display::~Display()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Display::~Display() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMList&lang;OMString&rang;::~OMList()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::~Display__deallocating()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata__ZTV7Display)
</UL>
<P><STRONG><a name="[3b1]"></a>Display::~Display__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, display.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>Display::~Display__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Display::~Display__deallocating() &rArr; Display::~Display() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::~Display()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata__ZTV7Display)
</UL>
<P><STRONG><a name="[134]"></a>Display::drawSDCardLogging2()</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Display::drawSDCardLogging2() &rArr; operator +(const OMString&, const char*) &rArr; OMString::operator +=(const char*) &rArr; OMString::resetSize(int) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const OMString&, const char*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const char*, const OMString&)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::GetLength() const
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator const char*()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::SetAt(int, char)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::GetAt(int)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMIterator&lang;OMString&rang;::operator *() const
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMIterator&lang;OMString&rang;::~OMIterator()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMIterator&lang;OMString&rang;::OMIterator(const OMAbstractContainer&lang;OMString&rang;&)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::~OMString()
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::rootState_processEvent()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::rootState_entDef()
</UL>

<P><STRONG><a name="[13f]"></a>Display::drawSDCardStatus(const char*)</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[141]"></a>Display::getLoggedLines() const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMIterator&lang;OMString&rang;::OMIterator(const OMAbstractContainer&lang;OMString&rang;&)
</UL>

<P><STRONG><a name="[142]"></a>Display::setLoggedLines(OMString)</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMList&lang;OMString&rang;::add(OMString)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::~OMString()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const OMString&)
</UL>

<P><STRONG><a name="[c4]"></a>Display::startBehavior()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Display::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::startBehavior()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata__ZTV7Display)
</UL>
<P><STRONG><a name="[c2]"></a>Display::rootState_entDef()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Display::rootState_entDef() &rArr; Display::drawSDCardLogging2() &rArr; operator +(const OMString&, const char*) &rArr; OMString::operator +=(const char*) &rArr; OMString::resetSize(int) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardLogging2()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata__ZTV7Display)
</UL>
<P><STRONG><a name="[c3]"></a>Display::rootState_processEvent()</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Display::rootState_processEvent() &rArr; Display::drawSDCardLogging2() &rArr; operator +(const OMString&, const char*) &rArr; OMString::operator +=(const char*) &rArr; OMString::resetSize(int) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::pushNullTransition()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::popNullTransition()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMList&lang;OMString&rang;::add(OMString)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMList&lang;OMString&rang;::_removeFirst()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardLogging2()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::~OMString()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const OMString&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata__ZTV7Display)
</UL>
<P><STRONG><a name="[14a]"></a>Joystick::initStatechart()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, joystick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::Joystick(WST_TSK*)
</UL>

<P><STRONG><a name="[148]"></a>Joystick::Joystick(WST_TSK*)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Joystick::Joystick(WST_TSK*) &rArr; WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::initStatechart()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[3b2]"></a>Joystick::Joystick__sub_object(WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, joystick.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>Joystick::cancelTimeouts()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Joystick::cancelTimeouts() &rArr; WST_FSM::cancel(WST_TMR*) &rArr; WST_TMM::stop(WST_TMR*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::~Joystick()
</UL>

<P><STRONG><a name="[14d]"></a>Joystick::cleanUpRelations()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, joystick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::~Joystick()
</UL>

<P><STRONG><a name="[d3]"></a>Joystick::~Joystick()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Joystick::~Joystick() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::cleanUpRelations()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::cancelTimeouts()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to Joystick::~Joystick()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::~Joystick__deallocating()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joystick.o(.constdata__ZTV8Joystick)
</UL>
<P><STRONG><a name="[3b3]"></a>Joystick::~Joystick__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, joystick.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>Joystick::~Joystick__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Joystick::~Joystick__deallocating() &rArr; Joystick::~Joystick() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::~Joystick()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to Joystick::~Joystick__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joystick.o(.constdata__ZTV8Joystick)
</UL>
<P><STRONG><a name="[da]"></a>thunk{-64} to Joystick::~Joystick__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = thunk{-64} to Joystick::~Joystick__deallocating() &rArr; Joystick::~Joystick__deallocating() &rArr; Joystick::~Joystick() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::~Joystick__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joystick.o(.constdata__ZTV8Joystick)
</UL>
<P><STRONG><a name="[d9]"></a>thunk{-64} to Joystick::~Joystick()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = thunk{-64} to Joystick::~Joystick() &rArr; Joystick::~Joystick() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::~Joystick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joystick.o(.constdata__ZTV8Joystick)
</UL>
<P><STRONG><a name="[14e]"></a>Joystick::sample()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Joystick::sample() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evJoystickPos::evJoystickPos(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::rootState_processEvent()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::rootState_entDef()
</UL>

<P><STRONG><a name="[3b4]"></a>Joystick::getLastPosition() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, joystick.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>Joystick::setLastPosition(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, joystick.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>Joystick::getSampleTime() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, joystick.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>Joystick::setSampleTime(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, joystick.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>Joystick::getItsLedBar() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, joystick.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>Joystick::setItsLedBar(LedBar*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, joystick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::initRelations()
</UL>

<P><STRONG><a name="[3b9]"></a>Joystick::getItsSDCard() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, joystick.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>Joystick::setItsSDCard(SDCard*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, joystick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::initRelations()
</UL>

<P><STRONG><a name="[d5]"></a>Joystick::startBehavior()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Joystick::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startDispatching()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::startBehavior()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joystick.o(.constdata__ZTV8Joystick)
</UL>
<P><STRONG><a name="[d6]"></a>Joystick::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, joystick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to Joystick::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joystick.o(.constdata__ZTV8Joystick)
</UL>
<P><STRONG><a name="[dc]"></a>thunk{-64} to Joystick::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = thunk{-64} to Joystick::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joystick.o(.constdata__ZTV8Joystick)
</UL>
<P><STRONG><a name="[d7]"></a>Joystick::rootState_entDef()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Joystick::rootState_entDef() &rArr; Joystick::sample() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::sample()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::pushNullTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to Joystick::rootState_entDef()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joystick.o(.constdata__ZTV8Joystick)
</UL>
<P><STRONG><a name="[db]"></a>thunk{-64} to Joystick::rootState_entDef()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = thunk{-64} to Joystick::rootState_entDef() &rArr; Joystick::rootState_entDef() &rArr; Joystick::sample() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::rootState_entDef()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joystick.o(.constdata__ZTV8Joystick)
</UL>
<P><STRONG><a name="[d8]"></a>Joystick::rootState_processEvent()</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Joystick::rootState_processEvent() &rArr; Joystick::sample() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::sample()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::pushNullTransition()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::popNullTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to Joystick::rootState_processEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joystick.o(.constdata__ZTV8Joystick)
</UL>
<P><STRONG><a name="[dd]"></a>thunk{-64} to Joystick::rootState_processEvent()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = thunk{-64} to Joystick::rootState_processEvent() &rArr; Joystick::rootState_processEvent() &rArr; Joystick::sample() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::rootState_processEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joystick.o(.constdata__ZTV8Joystick)
</UL>
<P><STRONG><a name="[154]"></a>Led::initStatechart()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::Led(WST_TSK*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::Led(int, WST_TSK*)
</UL>

<P><STRONG><a name="[153]"></a>Led::Led(int, WST_TSK*)</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Led::Led(int, WST_TSK*) &rArr; WSTMonitor_sendInit(void*, unsigned short, void*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::initStatechart()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[3ba]"></a>Led::Led__sub_object(int, WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>Led::Led(WST_TSK*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Led::Led(WST_TSK*) &rArr; WSTMonitor_sendInit(void*, unsigned short, void*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::initStatechart()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func1&rang;
</UL>

<P><STRONG><a name="[3bb]"></a>Led::Led__sub_object(WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>Led::cancelTimeouts()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Led::cancelTimeouts() &rArr; WST_FSM::cancel(WST_TMR*) &rArr; WST_TMM::stop(WST_TMR*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::~Led()
</UL>

<P><STRONG><a name="[42]"></a>Led::~Led()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Led::~Led() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::cancelTimeouts()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::~Led__deallocating()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> led.o(.constdata__ZTV3Led)
<LI> ledbar.o(.text)
</UL>
<P><STRONG><a name="[3bc]"></a>Led::~Led__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>Led::~Led__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Led::~Led__deallocating() &rArr; Led::~Led() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::~Led()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata__ZTV3Led)
</UL>
<P><STRONG><a name="[157]"></a>Led::off()</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::rootState_processEvent()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::rootState_entDef()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::offSingleLed(int)
</UL>

<P><STRONG><a name="[158]"></a>Led::on()</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::rootState_processEvent()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::onSingleLed(int)
</UL>

<P><STRONG><a name="[3bd]"></a>Led::getBitIndicator() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>Led::setBitIndicator(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(WST_TSK*)
</UL>

<P><STRONG><a name="[3be]"></a>Led::getBlinkTimeoutMs() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>Led::setBlinkTimeoutMs(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>Led::startBehavior()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Led::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::startBehavior()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::startBehavior()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata__ZTV3Led)
</UL>
<P><STRONG><a name="[a6]"></a>Led::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata__ZTV3Led)
</UL>
<P><STRONG><a name="[a5]"></a>Led::rootState_entDef()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Led::rootState_entDef()
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::off()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata__ZTV3Led)
</UL>
<P><STRONG><a name="[a7]"></a>Led::rootState_processEvent()</STRONG> (Thumb, 512 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Led::rootState_processEvent() &rArr; WST_FSM::scheduleTimeout(unsigned, char*) &rArr; WST_TMM::start(unsigned, WST_FSM*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::on()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::off()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata__ZTV3Led)
</UL>
<P><STRONG><a name="[15d]"></a>LedBar::initStatechart()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ledbar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(WST_TSK*)
</UL>

<P><STRONG><a name="[159]"></a>LedBar::setTask(WST_TSK*, bool)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LedBar::setTask(WST_TSK*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::setTask(WST_TSK*, bool)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(WST_TSK*)
</UL>

<P><STRONG><a name="[15a]"></a>LedBar::LedBar(WST_TSK*)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LedBar::LedBar(WST_TSK*) &rArr; WSTMonitor_sendInit(void*, unsigned short, void*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::setBitIndicator(int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setShouldDelete(bool)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::setTask(WST_TSK*, bool)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::initStatechart()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[3c0]"></a>LedBar::LedBar__sub_object(WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, ledbar.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>LedBar::~LedBar()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = LedBar::~LedBar() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::~LedBar__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledbar.o(.constdata__ZTV6LedBar)
</UL>
<P><STRONG><a name="[3c1]"></a>LedBar::~LedBar__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ledbar.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>LedBar::~LedBar__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LedBar::~LedBar__deallocating() &rArr; LedBar::~LedBar() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::~LedBar()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledbar.o(.constdata__ZTV6LedBar)
</UL>
<P><STRONG><a name="[160]"></a>LedBar::offSingleLed(int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ledbar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::off()
</UL>

<P><STRONG><a name="[161]"></a>LedBar::onSingleLed(int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ledbar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::on()
</UL>

<P><STRONG><a name="[162]"></a>LedBar::toggleSingleLed(int)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LedBar::toggleSingleLed(int) &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evToggle::evToggle()
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::processJoystickPosition()
</UL>

<P><STRONG><a name="[163]"></a>LedBar::processJoystickPosition()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LedBar::processJoystickPosition() &rArr; LedBar::toggleSingleLed(int) &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::toggleSingleLed(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::rootState_processEvent()
</UL>

<P><STRONG><a name="[3c2]"></a>LedBar::getItsLeds() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ledbar.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>LedBar::startBehavior()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LedBar::startBehavior() &rArr; Led::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::startBehavior()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::startBehavior()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledbar.o(.constdata__ZTV6LedBar)
</UL>
<P><STRONG><a name="[3c3]"></a>LedBar::getJoystickPosition() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ledbar.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>LedBar::setJoystickPosition(char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ledbar.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>LedBar::destroy()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LedBar::destroy()
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::destroy()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::destroy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledbar.o(.constdata__ZTV6LedBar)
</UL>
<P><STRONG><a name="[b3]"></a>LedBar::rootState_entDef()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ledbar.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ledbar.o(.constdata__ZTV6LedBar)
</UL>
<P><STRONG><a name="[b4]"></a>LedBar::rootState_processEvent()</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LedBar::rootState_processEvent() &rArr; LedBar::processJoystickPosition() &rArr; LedBar::toggleSingleLed(int) &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::pushNullTransition()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::popNullTransition()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::processJoystickPosition()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledbar.o(.constdata__ZTV6LedBar)
</UL>
<P><STRONG><a name="[165]"></a>WST_RXF_Main(short, char**)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mainmcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = WST_RXF_Main(short, char**) &rArr; TestBuilder::TestBuilder(WST_TSK*) &rArr; Joystick::Joystick(WST_TSK*) &rArr; WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF::start()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF::initialize()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
</UL>

<P><STRONG><a name="[16a]"></a>RunningIndicatorLed::ClassWSTMonitor_getTypeSize2()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, runningindicatorled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize2()
</UL>

<P><STRONG><a name="[169]"></a>WSTMonitor_getTypeSize2()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, runningindicatorled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize2()
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::ClassWSTMonitor_getTypeSize2()
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[16c]"></a>RunningIndicatorLed::initStatechart()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, runningindicatorled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::RunningIndicatorLed(WST_TSK*)
</UL>

<P><STRONG><a name="[16b]"></a>RunningIndicatorLed::RunningIndicatorLed(WST_TSK*)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, runningindicatorled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RunningIndicatorLed::RunningIndicatorLed(WST_TSK*) &rArr; WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::initStatechart()
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[3c5]"></a>RunningIndicatorLed::RunningIndicatorLed__sub_object(WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, runningindicatorled.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>RunningIndicatorLed::cancelTimeouts()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, runningindicatorled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RunningIndicatorLed::cancelTimeouts() &rArr; WST_FSM::cancel(WST_TMR*) &rArr; WST_TMM::stop(WST_TMR*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::~RunningIndicatorLed()
</UL>

<P><STRONG><a name="[16e]"></a>RunningIndicatorLed::cleanUpRelations()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, runningindicatorled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::~RunningIndicatorLed()
</UL>

<P><STRONG><a name="[99]"></a>RunningIndicatorLed::~RunningIndicatorLed()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, runningindicatorled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RunningIndicatorLed::~RunningIndicatorLed() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::cleanUpRelations()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::cancelTimeouts()
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to RunningIndicatorLed::~RunningIndicatorLed()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::~RunningIndicatorLed__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
</UL>
<P><STRONG><a name="[3c6]"></a>RunningIndicatorLed::~RunningIndicatorLed__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, runningindicatorled.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>RunningIndicatorLed::~RunningIndicatorLed__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, runningindicatorled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = RunningIndicatorLed::~RunningIndicatorLed__deallocating() &rArr; RunningIndicatorLed::~RunningIndicatorLed() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::~RunningIndicatorLed()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to RunningIndicatorLed::~RunningIndicatorLed__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
</UL>
<P><STRONG><a name="[a0]"></a>thunk{-64} to RunningIndicatorLed::~RunningIndicatorLed__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, runningindicatorled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = thunk{-64} to RunningIndicatorLed::~RunningIndicatorLed__deallocating() &rArr; RunningIndicatorLed::~RunningIndicatorLed__deallocating() &rArr; RunningIndicatorLed::~RunningIndicatorLed() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::~RunningIndicatorLed__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
</UL>
<P><STRONG><a name="[9f]"></a>thunk{-64} to RunningIndicatorLed::~RunningIndicatorLed()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, runningindicatorled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = thunk{-64} to RunningIndicatorLed::~RunningIndicatorLed() &rArr; RunningIndicatorLed::~RunningIndicatorLed() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::~RunningIndicatorLed()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
</UL>
<P><STRONG><a name="[3c7]"></a>RunningIndicatorLed::getItsLed() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, runningindicatorled.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>RunningIndicatorLed::setItsLed(Led*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, runningindicatorled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::initRelations()
</UL>

<P><STRONG><a name="[9b]"></a>RunningIndicatorLed::startBehavior()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, runningindicatorled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RunningIndicatorLed::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startDispatching()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::startBehavior()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
</UL>
<P><STRONG><a name="[9c]"></a>RunningIndicatorLed::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, runningindicatorled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to RunningIndicatorLed::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
</UL>
<P><STRONG><a name="[a2]"></a>thunk{-64} to RunningIndicatorLed::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, runningindicatorled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = thunk{-64} to RunningIndicatorLed::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
</UL>
<P><STRONG><a name="[9d]"></a>RunningIndicatorLed::rootState_entDef()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, runningindicatorled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RunningIndicatorLed::rootState_entDef() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOff::evOff()
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to RunningIndicatorLed::rootState_entDef()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
</UL>
<P><STRONG><a name="[a1]"></a>thunk{-64} to RunningIndicatorLed::rootState_entDef()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, runningindicatorled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = thunk{-64} to RunningIndicatorLed::rootState_entDef() &rArr; RunningIndicatorLed::rootState_entDef() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::rootState_entDef()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
</UL>
<P><STRONG><a name="[9e]"></a>RunningIndicatorLed::rootState_processEvent()</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, runningindicatorled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RunningIndicatorLed::rootState_processEvent() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOff::evOff()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOn::evOn()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to RunningIndicatorLed::rootState_processEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
</UL>
<P><STRONG><a name="[a3]"></a>thunk{-64} to RunningIndicatorLed::rootState_processEvent()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, runningindicatorled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = thunk{-64} to RunningIndicatorLed::rootState_processEvent() &rArr; RunningIndicatorLed::rootState_processEvent() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::rootState_processEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
</UL>
<P><STRONG><a name="[170]"></a>SDCard::initStatechart()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::SDCard(WST_TSK*)
</UL>

<P><STRONG><a name="[16f]"></a>SDCard::SDCard(WST_TSK*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SDCard::SDCard(WST_TSK*) &rArr; WSTMonitor_sendInit(void*, unsigned short, void*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::initStatechart()
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[3c8]"></a>SDCard::SDCard__sub_object(WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>SDCard::cleanUpRelations()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::~SDCard()
</UL>

<P><STRONG><a name="[bb]"></a>SDCard::~SDCard()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SDCard::~SDCard() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::cleanUpRelations()
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::~SDCard__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdcard.o(.constdata__ZTV6SDCard)
</UL>
<P><STRONG><a name="[3c9]"></a>SDCard::~SDCard__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>SDCard::~SDCard__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SDCard::~SDCard__deallocating() &rArr; SDCard::~SDCard() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::~SDCard()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdcard.o(.constdata__ZTV6SDCard)
</UL>
<P><STRONG><a name="[172]"></a>SDCard::append(char)</STRONG> (Thumb, 516 bytes, Stack size 112 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = SDCard::append(char) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const OMString&, const char*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::~OMString()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog2::evSDLog2(OMString)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evError::evError()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::getSec()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::getMin()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::getHour()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const char*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::rootState_processEvent()
</UL>

<P><STRONG><a name="[17b]"></a>SDCard::deleteFile()</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SDCard::deleteFile() &rArr; fdelete &rArr; _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::~OMString()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog2::evSDLog2(OMString)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evError::evError()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::rootState_processEvent()
</UL>

<P><STRONG><a name="[17d]"></a>SDCard::initAndMount()</STRONG> (Thumb, 616 bytes, Stack size 48 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SDCard::initAndMount() &rArr; evSDLog2::evSDLog2(OMString) &rArr; OMString::OMString(const OMString&) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::~OMString()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog2::evSDLog2(OMString)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::rootState_processEvent()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::rootState_entDef()
</UL>

<P><STRONG><a name="[180]"></a>SDCard::read()</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = SDCard::read() &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const OMString&, const char*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::~OMString()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog2::evSDLog2(OMString)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const char*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::rootState_processEvent()
</UL>

<P><STRONG><a name="[3ca]"></a>SDCard::getCounter()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[3cb]"></a>SDCard::setCounter(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>SDCard::getJoystickPos() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[3cd]"></a>SDCard::setJoystickPos(char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>SDCard::getItsClock() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>SDCard::setItsClock(Clock*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::initRelations()
</UL>

<P><STRONG><a name="[3cf]"></a>SDCard::getItsDisplay() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>SDCard::setItsDisplay(Display*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::initRelations()
</UL>

<P><STRONG><a name="[bf]"></a>SDCard::startBehavior()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDCard::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::startBehavior()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdcard.o(.constdata__ZTV6SDCard)
</UL>
<P><STRONG><a name="[3d0]"></a>SDCard::getFileName()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>SDCard::rootState_entDef()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SDCard::rootState_entDef() &rArr; SDCard::initAndMount() &rArr; evSDLog2::evSDLog2(OMString) &rArr; OMString::OMString(const OMString&) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::pushNullTransition()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::initAndMount()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdcard.o(.constdata__ZTV6SDCard)
</UL>
<P><STRONG><a name="[be]"></a>SDCard::rootState_processEvent()</STRONG> (Thumb, 822 bytes, Stack size 48 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = SDCard::rootState_processEvent() &rArr; SDCard::append(char) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::pushNullTransition()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::popNullTransition()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::~OMString()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog2::evSDLog2(OMString)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const char*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::read()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::initAndMount()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::deleteFile()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdcard.o(.constdata__ZTV6SDCard)
</UL>
<P><STRONG><a name="[186]"></a>TestBuilder::ClassWSTMonitor_getTypeSize3()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testbuilder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize3()
</UL>

<P><STRONG><a name="[185]"></a>WSTMonitor_getTypeSize3()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize3()
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::ClassWSTMonitor_getTypeSize3()
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[188]"></a>TestBuilder::ClassWSTMonitor_getTypeSize4()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testbuilder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize4()
</UL>

<P><STRONG><a name="[187]"></a>WSTMonitor_getTypeSize4()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize4()
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::ClassWSTMonitor_getTypeSize4()
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[18a]"></a>TestBuilder::ClassWSTMonitor_getTypeSize5()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testbuilder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize5()
</UL>

<P><STRONG><a name="[189]"></a>WSTMonitor_getTypeSize5()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize5()
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::ClassWSTMonitor_getTypeSize5()
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[18c]"></a>TestBuilder::ClassWSTMonitor_getTypeSize6()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testbuilder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize6()
</UL>

<P><STRONG><a name="[18b]"></a>WSTMonitor_getTypeSize6()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize6()
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::ClassWSTMonitor_getTypeSize6()
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[18e]"></a>TestBuilder::ClassWSTMonitor_getTypeSize7()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testbuilder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize7()
</UL>

<P><STRONG><a name="[18d]"></a>WSTMonitor_getTypeSize7()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize7()
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::ClassWSTMonitor_getTypeSize7()
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[190]"></a>TestBuilder::ClassWSTMonitor_getTypeSize8()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testbuilder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize8()
</UL>

<P><STRONG><a name="[18f]"></a>WSTMonitor_getTypeSize8()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize8()
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::ClassWSTMonitor_getTypeSize8()
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[192]"></a>TestBuilder::ClassWSTMonitor_getTypeSize9()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testbuilder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize9()
</UL>

<P><STRONG><a name="[191]"></a>WSTMonitor_getTypeSize9()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize9()
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::ClassWSTMonitor_getTypeSize9()
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[193]"></a>TestBuilder::initRelations()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestBuilder::initRelations()
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::setItsSDCard(SDCard*)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::setItsLedBar(LedBar*)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::setItsDisplay(Display*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::setItsClock(Clock*)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::setItsLed(Led*)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[199]"></a>TestBuilder::setTask(WST_TSK*, bool)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TestBuilder::setTask(WST_TSK*, bool) &rArr; LedBar::setTask(WST_TSK*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::setTask(WST_TSK*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[167]"></a>TestBuilder::TestBuilder(WST_TSK*)</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = TestBuilder::TestBuilder(WST_TSK*) &rArr; Joystick::Joystick(WST_TSK*) &rArr; WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::Led(int, WST_TSK*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::Joystick(WST_TSK*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display(WST_TSK*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::Clock()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::setTask(WST_TSK*, bool)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::initRelations()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::SDCard(WST_TSK*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::RunningIndicatorLed(WST_TSK*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setShouldDelete(bool)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(WST_TSK*)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
</UL>

<P><STRONG><a name="[3d1]"></a>TestBuilder::TestBuilder__sub_object(WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>TestBuilder::~TestBuilder()</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = TestBuilder::~TestBuilder() &rArr; Led::~Led() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::~Led()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::~Joystick()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::~Display()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::~Clock()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::~SDCard()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::~RunningIndicatorLed()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::~LedBar()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbuilder.o(.constdata__ZTV11TestBuilder)
</UL>
<P><STRONG><a name="[3d2]"></a>TestBuilder::~TestBuilder__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>TestBuilder::~TestBuilder__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TestBuilder::~TestBuilder__deallocating() &rArr; TestBuilder::~TestBuilder() &rArr; Led::~Led() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbuilder.o(.constdata__ZTV11TestBuilder)
</UL>
<P><STRONG><a name="[3d3]"></a>TestBuilder::getItsClock() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>TestBuilder::getItsDisplay() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[3d5]"></a>TestBuilder::getItsJoystick() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[3d6]"></a>TestBuilder::getItsLed28() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[3d7]"></a>TestBuilder::getItsLed29() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>TestBuilder::getItsLed31() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[3d9]"></a>TestBuilder::getItsLedBar() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>TestBuilder::getItsRunningIndicatorLed() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>TestBuilder::getItsSDCard() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>TestBuilder::startBehavior()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TestBuilder::startBehavior() &rArr; LedBar::startBehavior() &rArr; Led::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::startBehavior()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::startBehavior()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::startBehavior()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::startBehavior()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::startBehavior()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::startBehavior()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbuilder.o(.constdata__ZTV11TestBuilder)
</UL>
<P><STRONG><a name="[94]"></a>TestBuilder::destroy()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestBuilder::destroy() &rArr; LedBar::destroy()
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::destroy()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::destroy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbuilder.o(.constdata__ZTV11TestBuilder)
</UL>
<P><STRONG><a name="[19a]"></a>WSTMonitor_sendTypeSize()</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, wstmonitor_sendtypes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WSTMonitor_sendTypeSize() &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize10()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize1()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize0()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize9()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize8()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize7()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize6()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize5()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize4()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize3()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize2()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[19f]"></a>OMString::GetBuffer(int) const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &rang;=(const char*, const OMString&)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &rang;(const char*, const OMString&)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const char*, const OMString&)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;=(const char*, const OMString&)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;(const char*, const OMString&)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !=(const char*, const OMString&)
</UL>

<P><STRONG><a name="[19e]"></a>operator !=(const char*, const OMString&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::GetBuffer(int) const
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1a1]"></a>OMString::setSize(int)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, omstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const OMString&)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(char)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::resetSize(int)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const char*)
</UL>

<P><STRONG><a name="[1a2]"></a>OMString::resetSize(int)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, omstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OMString::resetSize(int) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::setSize(int)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator =(const OMString&)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator =(const char*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::GetBuffer(int)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator +=(char)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator +=(const char*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator +=(const OMString&)
</UL>

<P><STRONG><a name="[1a4]"></a>OMString::operator +=(const OMString&)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, omstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OMString::operator +=(const OMString&) &rArr; OMString::resetSize(int) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::resetSize(int)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const char*, const OMString&)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const OMString&, const OMString&)
</UL>

<P><STRONG><a name="[125]"></a>OMString::OMString(const OMString&)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, omstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OMString::OMString(const OMString&) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::setSize(int)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const OMString&, const char*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMList&lang;OMString&rang;::add(OMString)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::rootState_processEvent()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setLoggedLines(OMString)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog2::evSDLog2(OMString)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const OMString&, char)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const OMString&, const OMString&)
</UL>

<P><STRONG><a name="[3dc]"></a>OMString::OMString__sub_object(const OMString&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>operator +(const OMString&, const OMString&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const OMString&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator +=(const OMString&)
</UL>

<P><STRONG><a name="[1a6]"></a>OMString::operator +=(const char*)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, omstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OMString::operator +=(const char*) &rArr; OMString::resetSize(int) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::resetSize(int)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const OMString&, const char*)
</UL>

<P><STRONG><a name="[13b]"></a>operator +(const OMString&, const char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, omstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = operator +(const OMString&, const char*) &rArr; OMString::operator +=(const char*) &rArr; OMString::resetSize(int) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const OMString&)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator +=(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardLogging2()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::read()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>

<P><STRONG><a name="[174]"></a>OMString::OMString(const char*)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, omstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OMString::OMString(const char*) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::setSize(int)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const char*, const OMString&)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::rootState_processEvent()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::read()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::initAndMount()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::deleteFile()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>

<P><STRONG><a name="[3dd]"></a>OMString::OMString__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>operator +(const char*, const OMString&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, omstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = operator +(const char*, const OMString&) &rArr; OMString::operator +=(const OMString&) &rArr; OMString::resetSize(int) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator +=(const OMString&)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardLogging2()
</UL>

<P><STRONG><a name="[1a8]"></a>OMString::operator +=(char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::resetSize(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const OMString&, char)
</UL>

<P><STRONG><a name="[1a9]"></a>operator +(const OMString&, char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const OMString&)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator +=(char)
</UL>

<P><STRONG><a name="[1aa]"></a>operator &lang;(const char*, const OMString&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::GetBuffer(int) const
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1ab]"></a>operator &lang;=(const char*, const OMString&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::GetBuffer(int) const
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1ac]"></a>operator ==(const char*, const OMString&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::GetBuffer(int) const
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1ad]"></a>operator &rang;(const char*, const OMString&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::GetBuffer(int) const
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1ae]"></a>operator &rang;=(const char*, const OMString&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::GetBuffer(int) const
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1af]"></a>OMString::OMString(char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::setSize(int)
</UL>

<P><STRONG><a name="[3de]"></a>OMString::OMString__sub_object(char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>OMString::OMString()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, omstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OMString::OMString() &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::setSize(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::read()
</UL>

<P><STRONG><a name="[3df]"></a>OMString::OMString__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, omstring.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>OMString::~OMString()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, omstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OMString::~OMString() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMList&lang;OMString&rang;::_removeFirst()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::rootState_processEvent()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setLoggedLines(OMString)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardLogging2()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog2::~evSDLog2()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::rootState_processEvent()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::read()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::initAndMount()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::deleteFile()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>

<P><STRONG><a name="[3e0]"></a>OMString::~OMString__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, omstring.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>OMString::CompareNoCase_(const char*, const char*)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::CompareNoCase(const OMString&) const
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::CompareNoCase(const char*) const
</UL>

<P><STRONG><a name="[1b2]"></a>OMString::CompareNoCase(const char*) const</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::CompareNoCase_(const char*, const char*)
</UL>

<P><STRONG><a name="[1b3]"></a>OMString::CompareNoCase(const OMString&) const</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::CompareNoCase_(const char*, const char*)
</UL>

<P><STRONG><a name="[3e1]"></a>OMString::Empty()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, omstring.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>OMString::GetAt(int)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, omstring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardLogging2()
</UL>

<P><STRONG><a name="[1b4]"></a>OMString::GetBuffer(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::resetSize(int)
</UL>

<P><STRONG><a name="[3e2]"></a>OMString::IsEmpty() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, omstring.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>OMString::ReleaseBuffer(int)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[139]"></a>OMString::SetAt(int, char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, omstring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardLogging2()
</UL>

<P><STRONG><a name="[13c]"></a>OMString::operator const char*()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, omstring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardLogging2()
</UL>

<P><STRONG><a name="[1b6]"></a>OMString::operator !=(const char*) const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1b7]"></a>OMString::operator !=(const OMString&) const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1b8]"></a>OMString::operator &lang;(const char*) const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1b9]"></a>OMString::operator &lang;(const OMString&) const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1ba]"></a>OMString::operator &lang;=(const char*) const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1bb]"></a>OMString::operator &lang;=(const OMString&) const</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1bc]"></a>OMString::operator =(const char*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::resetSize(int)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[3e3]"></a>OMString::operator =(char)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, omstring.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>OMString::operator =(const OMString&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::resetSize(int)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1be]"></a>OMString::operator ==(const char*) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1bf]"></a>OMString::operator ==(const OMString&) const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1c0]"></a>OMString::operator &rang;(const char*) const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1c1]"></a>OMString::operator &rang;(const OMString&) const</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1c2]"></a>OMString::operator &rang;=(const char*) const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1c3]"></a>OMString::operator &rang;=(const OMString&) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, omstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[3e4]"></a>OMString::operator [](int) const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, omstring.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>OMString::GetLength() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, omstring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardLogging2()
</UL>

<P><STRONG><a name="[3e5]"></a>OMString::getDefaultBlock()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, omstring.o(.text), UNUSED)

<P><STRONG><a name="[3e6]"></a>OMString::setDefaultBlock(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, omstring.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>OMString::getSize() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, omstring.o(.text), UNUSED)

<P><STRONG><a name="[3e8]"></a>OMString::getStr() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, omstring.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rxf_behaviorpkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = main &rArr; WSTRTOS_Init() &rArr; WST_RXF_Main(short, char**) &rArr; TestBuilder::TestBuilder(WST_TSK*) &rArr; Joystick::Joystick(WST_TSK*) &rArr; WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[3e9]"></a>WST_ERR::~WST_ERR()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_err.o(.text), UNUSED)

<P><STRONG><a name="[3ea]"></a>WST_ERR::~WST_ERR__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_err.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wst_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::popNullTransition()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::executeOnce()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator new(unsigned)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_initTimerTask()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_resume(WST_TSK*)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_suspend(WST_TSK*)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_start(WST_TSK*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_userInit(void(*)(void*), osPriority, void*, unsigned short, void*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_cleanup(WST_MTX*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_init(WST_MTX*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_getCount(WST_MSQ*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_init(WST_MSQ*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_get(WST_MSQ*, WST_EVT**)
</UL>

<P><STRONG><a name="[2c4]"></a>WST_EVT::toBeCancelled(const WST_FSM*, short)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wst_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_EVT::toBeCancelled(const WST_FSM*, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
</UL>

<P><STRONG><a name="[129]"></a>WST_FSM::WST_FSM()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::Led(WST_TSK*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::Led(int, WST_TSK*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::Joystick(WST_TSK*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display(WST_TSK*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::SDCard(WST_TSK*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::RunningIndicatorLed(WST_TSK*)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(WST_TSK*)
</UL>

<P><STRONG><a name="[3eb]"></a>WST_FSM::WST_FSM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>WST_FSM::cleanUpRelations()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
</UL>

<P><STRONG><a name="[1c6]"></a>WST_FSM::cancelEventsAndTimeouts()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::cancelEvents(WST_FSM*, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
</UL>

<P><STRONG><a name="[c6]"></a>WST_FSM::~WST_FSM()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancelEventsAndTimeouts()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cleanUpRelations()
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::~Led()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::~Joystick()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::~Display()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM__deallocating()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::~SDCard()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::~RunningIndicatorLed()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::~LedBar()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[3ec]"></a>WST_FSM::~WST_FSM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>WST_FSM::~WST_FSM__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = WST_FSM::~WST_FSM__deallocating() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[14c]"></a>WST_FSM::cancel(WST_TMR*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WST_FSM::cancel(WST_TMR*) &rArr; WST_TMM::stop(WST_TMR*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::rootState_processEvent()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::cancelTimeouts()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::rootState_processEvent()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::cancelTimeouts()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::rootState_processEvent()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::cancelTimeouts()
</UL>

<P><STRONG><a name="[164]"></a>WST_FSM::destroy()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::destroy()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::destroy()
</UL>

<P><STRONG><a name="[3ed]"></a>WST_FSM::endBehavior()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>WST_FSM::gen(WST_EVT*, bool)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::sample()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::send(WST_EVT*, const void*&)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::send(WST_EVT*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::rootState_processEvent()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::read()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::initAndMount()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::deleteFile()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::rootState_processEvent()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::rootState_entDef()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::toggleSingleLed(int)
</UL>

<P><STRONG><a name="[1cc]"></a>WST_FSM::takeEvent(WST_EVT*)</STRONG> (Thumb, 584 bytes, Stack size 96 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEventStart(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventStart(unsigned char*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventEnd(unsigned char*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::handleTrigger(WST_EVT*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::handleSyncEvent(WST_EVT*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::executeOnce()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>

<P><STRONG><a name="[1d1]"></a>WST_FSM::handleSyncEvent(WST_EVT*)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, wst_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[147]"></a>WST_FSM::popNullTransition()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WST_FSM::popNullTransition()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::rootState_processEvent()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::rootState_processEvent()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::rootState_processEvent()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::rootState_processEvent()
</UL>

<P><STRONG><a name="[145]"></a>WST_FSM::pushNullTransition()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::rootState_processEvent()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::rootState_entDef()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::rootState_processEvent()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::rootState_processEvent()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::rootState_entDef()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::rootState_processEvent()
</UL>

<P><STRONG><a name="[8e]"></a>WST_FSM::rootState_entDef()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> testbuilder.o(.constdata__ZTV11TestBuilder)
<LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[8f]"></a>WST_FSM::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR>[Address Reference Count : 5]<UL><LI> display.o(.constdata__ZTV7Display)
<LI> ledbar.o(.constdata__ZTV6LedBar)
<LI> sdcard.o(.constdata__ZTV6SDCard)
<LI> testbuilder.o(.constdata__ZTV11TestBuilder)
<LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[90]"></a>WST_FSM::rootState_processEvent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> testbuilder.o(.constdata__ZTV11TestBuilder)
<LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[152]"></a>WST_FSM::scheduleTimeout(unsigned, char*)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WST_FSM::scheduleTimeout(unsigned, char*) &rArr; WST_TMM::start(unsigned, WST_FSM*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::rootState_processEvent()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::rootState_processEvent()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::rootState_processEvent()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::rootState_entDef()
</UL>

<P><STRONG><a name="[15c]"></a>WST_FSM::setShouldDelete(bool)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(WST_TSK*)
</UL>

<P><STRONG><a name="[12a]"></a>WST_FSM::setTask(WST_TSK*, bool)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::Led(WST_TSK*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::Led(int, WST_TSK*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::Joystick(WST_TSK*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display(WST_TSK*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::setTask(WST_TSK*, bool)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::SDCard(WST_TSK*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::RunningIndicatorLed(WST_TSK*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::setTask(WST_TSK*, bool)
</UL>

<P><STRONG><a name="[144]"></a>WST_FSM::startBehavior()</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::startBehavior()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::startBehavior()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::startBehavior()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::startBehavior()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::startBehavior()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::startBehavior()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::startBehavior()
</UL>

<P><STRONG><a name="[3ee]"></a>WST_FSM::terminate()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>WST_FSM::send(WST_EVT*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WST_FSM::send(WST_EVT*) &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
</UL>
<BR>[Address Reference Count : 8]<UL><LI> display.o(.constdata__ZTV7Display)
<LI> joystick.o(.constdata__ZTV8Joystick)
<LI> led.o(.constdata__ZTV3Led)
<LI> ledbar.o(.constdata__ZTV6LedBar)
<LI> runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
<LI> sdcard.o(.constdata__ZTV6SDCard)
<LI> testbuilder.o(.constdata__ZTV11TestBuilder)
<LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[92]"></a>WST_FSM::send(WST_EVT*, const void*&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WST_FSM::send(WST_EVT*, const void*&) &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
</UL>
<BR>[Address Reference Count : 8]<UL><LI> display.o(.constdata__ZTV7Display)
<LI> joystick.o(.constdata__ZTV8Joystick)
<LI> led.o(.constdata__ZTV3Led)
<LI> ledbar.o(.constdata__ZTV6LedBar)
<LI> runningindicatorled.o(.constdata__ZTV19RunningIndicatorLed)
<LI> sdcard.o(.constdata__ZTV6SDCard)
<LI> testbuilder.o(.constdata__ZTV11TestBuilder)
<LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[1d4]"></a>WST_FSM::handleTrigger(WST_EVT*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wst_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[1d6]"></a>WST_MEM::WST_MEM()</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, wst_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_MEM::WST_MEM()
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
</UL>

<P><STRONG><a name="[3ef]"></a>WST_MEM::WST_MEM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_mem.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>WST_MEM::getMemory(unsigned)</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, wst_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_malloc(unsigned)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::WST_MEM()
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::sample()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMList&lang;OMString&rang;::add(OMString)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_malloc(unsigned)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::reallocMemory(unsigned, unsigned, void*)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::setSize(int)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::rootState_processEvent()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::read()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::initAndMount()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::deleteFile()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::rootState_processEvent()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::rootState_entDef()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::toggleSingleLed(int)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startTaskAfterOSStart()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::initMutex()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_init(WST_MSQ*)
</UL>

<P><STRONG><a name="[133]"></a>WST_MEM::returnMemory(void*)</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, wst_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_free(void*)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::~Led__deallocating()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::~Joystick__deallocating()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMList&lang;OMString&rang;::_removeFirst()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::~Display__deallocating()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::~OMString()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evToggle::~evToggle__deallocating()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog2::~evSDLog2__deallocating()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog::~evSDLog__deallocating()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evError::~evError__deallocating()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evBlink::~evBlink__deallocating()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOff::~evOff__deallocating()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOn::~evOn__deallocating()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evJoystickPos::~evJoystickPos__deallocating()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::~WST_EVT__deallocating()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::reallocMemory(unsigned, unsigned, void*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM__deallocating()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::resetSize(int)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder__deallocating()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::~SDCard__deallocating()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::~RunningIndicatorLed__deallocating()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::~LedBar__deallocating()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cleanup(WST_MSQ*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::~WST_MSQ()
</UL>

<P><STRONG><a name="[1db]"></a>WST_MEM::reallocMemory(unsigned, unsigned, void*)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wst_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1dc]"></a>WST_MSQ::WST_MSQ(unsigned short, bool)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wst_msq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_init(WST_MSQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::cleanUpRelations()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
</UL>

<P><STRONG><a name="[3f0]"></a>WST_MSQ::WST_MSQ__sub_object(unsigned short, bool)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, wst_msq.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>WST_MSQ::WST_MSQ(unsigned short, void*, bool)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, wst_msq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_init(WST_MSQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(unsigned char*, void*, unsigned char, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[3f1]"></a>WST_MSQ::WST_MSQ__sub_object(unsigned short, void*, bool)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, wst_msq.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>WST_MSQ::~WST_MSQ()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wst_msq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WST_MSQ::~WST_MSQ() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::cleanUpRelations()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_osw.o(CODE_RXF_RUNNING_FAST)
</UL>
<P><STRONG><a name="[3f2]"></a>WST_MSQ::~WST_MSQ__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_msq.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>WST_MSQ::cancelEvents(WST_FSM*, short)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wst_msq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancelEventsAndTimeouts()
</UL>

<P><STRONG><a name="[1e0]"></a>WST_MSQ::get()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wst_msq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WST_MSQ::get() &rArr; WST_OSW_MSQ_get(WST_MSQ*, WST_EVT**) &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_get(WST_MSQ*, WST_EVT**)
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::executeOnce()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>

<P><STRONG><a name="[1e2]"></a>WST_MSQ::isEmpty()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wst_msq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_getCount(WST_MSQ*)
</UL>

<P><STRONG><a name="[1cb]"></a>WST_MSQ::put(WST_EVT*, bool)</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, wst_msq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTimeOut(unsigned char*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
</UL>

<P><STRONG><a name="[1e6]"></a>WST_MTX::WST_MTX()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wst_mtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WST_MTX::WST_MTX() &rArr; WST_OSW_MTX_init(WST_MTX*) &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_init(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_malloc(unsigned)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::initMutex()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
</UL>

<P><STRONG><a name="[3f3]"></a>WST_MTX::WST_MTX__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>WST_MTX::WST_MTX(const WST_MTX*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_mtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
</UL>

<P><STRONG><a name="[3f4]"></a>WST_MTX::WST_MTX__sub_object(const WST_MTX*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>WST_MTX::~WST_MTX()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_cleanup(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::~WST_MTX_inUse()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
</UL>

<P><STRONG><a name="[3f5]"></a>WST_MTX::~WST_MTX__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>WST_MTX::WST_MTX_enterCriticalRegion()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_mtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WST_MTX::WST_MTX_enterCriticalRegion() &rArr; WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getExpiredTimeout()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
</UL>

<P><STRONG><a name="[1ee]"></a>WST_MTX::WST_MTX_exitCriticalRegion()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_mtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getExpiredTimeout()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::~WST_MTX_inUse()
</UL>

<P><STRONG><a name="[2c5]"></a>WST_MTX::WST_MTX_getRtosMutex()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_mtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_cleanup(WST_MTX*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_init(WST_MTX*)
</UL>

<P><STRONG><a name="[1ef]"></a>WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, wst_mtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::~WST_MTX()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX(const WST_MTX*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3f6]"></a>WST_MTX_inUse::WST_MTX_inUse__sub_object(const WST_MTX*)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>WST_MTX_inUse::~WST_MTX_inUse()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::~WST_MTX()
</UL>

<P><STRONG><a name="[3f7]"></a>WST_MTX_inUse::~WST_MTX_inUse__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[3f8]"></a>WST_RXF::WST_RXF()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_rxf.o(.text), UNUSED)

<P><STRONG><a name="[3f9]"></a>WST_RXF::WST_RXF__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_rxf.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>WST_RXF::~WST_RXF()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_rxf.o(.text), UNUSED)

<P><STRONG><a name="[3fb]"></a>WST_RXF::~WST_RXF__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_rxf.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>WST_RXF::initialize()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wst_rxf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WST_RXF::initialize() &rArr; WSTMonitor_init() &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
</UL>

<P><STRONG><a name="[168]"></a>WST_RXF::start()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wst_rxf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WST_RXF::start() &rArr; WST_TSK::execute() &rArr; WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEventStart(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
</UL>

<P><STRONG><a name="[1f4]"></a>WST_TMM::WST_TMM()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_TMM::WST_TMM()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::initTimeoutLists()
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WST_TMM_cpp_5cffd7cf
</UL>

<P><STRONG><a name="[3fc]"></a>WST_TMM::WST_TMM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_tmm.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>WST_TMM::WSTTimeToTicks(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wst_tmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
</UL>

<P><STRONG><a name="[1ca]"></a>WST_TMM::stop(WST_TMR*)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WST_TMM::stop(WST_TMR*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::cancel()
</UL>

<P><STRONG><a name="[1c7]"></a>WST_TMM::cancelEvents(WST_FSM*)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::cancelEvents(WST_FSM*, short)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancelEventsAndTimeouts()
</UL>

<P><STRONG><a name="[1f6]"></a>WST_TMM::getExpiredTimeout()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WST_TMM::getExpiredTimeout() &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
</UL>

<P><STRONG><a name="[1f8]"></a>WST_TMM::tick(short)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_TMM::tick(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
</UL>

<P><STRONG><a name="[1f7]"></a>WST_TMM::processTimeouts()</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WST_TMM::processTimeouts() &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::tick(short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getExpiredTimeout()
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_timerCallBack(const void*)
</UL>

<P><STRONG><a name="[1d3]"></a>WST_TMM::start(unsigned, WST_FSM*)</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WST_TMM::start(unsigned, WST_FSM*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator new(unsigned)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::WSTTimeToTicks(unsigned)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
</UL>

<P><STRONG><a name="[1fc]"></a>WST_TMM::initMutex()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WST_TMM::initMutex() &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
</UL>

<P><STRONG><a name="[1fd]"></a>WST_TMR::operator delete (void*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wst_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WST_TMR::operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::~WST_TMR__deallocating()
</UL>

<P><STRONG><a name="[1f9]"></a>WST_TMR::operator new(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wst_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WST_TMR::operator new(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
</UL>

<P><STRONG><a name="[1fe]"></a>WST_TMR::cancel()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
</UL>

<P><STRONG><a name="[1f5]"></a>WST_TMR::initTimeoutLists()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wst_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::WST_TMM()
</UL>

<P><STRONG><a name="[149]"></a>WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_init(WST_TSK*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::WST_MSQ(unsigned short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::Joystick(WST_TSK*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::RunningIndicatorLed(WST_TSK*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WSTRTOS_cpp_b410bc26
</UL>

<P><STRONG><a name="[3fd]"></a>WST_TSK::WST_TSK__sub_object(char*, unsigned char, unsigned short, unsigned short, bool)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, wst_tsk.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>WST_TSK::WST_TSK(unsigned char*, void*, unsigned char, unsigned short, unsigned short, bool)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, wst_tsk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_init(WST_TSK*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::WST_MSQ(unsigned short, void*, bool)
</UL>

<P><STRONG><a name="[3fe]"></a>WST_TSK::WST_TSK__sub_object(unsigned char*, void*, unsigned char, unsigned short, unsigned short, bool)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, wst_tsk.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>WST_TSK::cleanUpRelations()</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WST_TSK::cleanUpRelations() &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::~WST_MSQ()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::WST_MSQ(unsigned short, bool)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
</UL>

<P><STRONG><a name="[46]"></a>WST_TSK::~WST_TSK()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WST_TSK::~WST_TSK() &rArr; WST_TSK::cleanUpRelations() &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::cleanUpRelations()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_cleanup(WST_TSK*)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::~WST_MSQ()
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::~Joystick()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::~RunningIndicatorLed()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wstrtos.o(.text)
<LI> wst_tsk.o(.constdata__ZTV7WST_TSK)
</UL>
<P><STRONG><a name="[3ff]"></a>WST_TSK::~WST_TSK__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_tsk.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>WST_TSK::~WST_TSK__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WST_TSK::~WST_TSK__deallocating() &rArr; WST_TSK::~WST_TSK() &rArr; WST_TSK::cleanUpRelations() &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tsk.o(.constdata__ZTV7WST_TSK)
</UL>
<P><STRONG><a name="[1f3]"></a>WST_TSK::execute()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WST_TSK::execute() &rArr; WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEventStart(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_delay(unsigned)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF::start()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::task_start(void*)
</UL>

<P><STRONG><a name="[205]"></a>WST_TSK::executeOnce()</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, wst_tsk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::get()
</UL>

<P><STRONG><a name="[206]"></a>WST_TSK::endDispatching()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_tsk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_cleanup(WST_TSK*)
</UL>

<P><STRONG><a name="[55]"></a>WST_TSK::task_start(void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WST_TSK::task_start(void*) &rArr; WST_TSK::execute() &rArr; WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEventStart(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_osw.o(CODE_RXF_RUNNING_FAST)
</UL>
<P><STRONG><a name="[151]"></a>WST_TSK::startDispatching()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WST_TSK::startDispatching() &rArr; WST_OSW_TSK_start(WST_TSK*) &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_start(WST_TSK*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::startBehavior()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::startBehavior()
</UL>

<P><STRONG><a name="[208]"></a>WST_TSK::suspend()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_tsk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_suspend(WST_TSK*)
</UL>

<P><STRONG><a name="[20a]"></a>WST_TSK::resume()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_tsk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_resume(WST_TSK*)
</UL>

<P><STRONG><a name="[20c]"></a>WST_TSK::startTaskAfterOSStart()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WST_TSK::startTaskAfterOSStart() &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_init(WST_TSK*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_init(WST_MSQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
</UL>

<P><STRONG><a name="[2b9]"></a>WSTMonitor_IO_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wstmonitorio_keil_cortexm3_itm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[2ad]"></a>WSTMonitor_IO_PutByte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wstmonitorio_keil_cortexm3_itm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>

<P><STRONG><a name="[2b2]"></a>WSTMonitor_IO_GetByte</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wstmonitorio_keil_cortexm3_itm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>

<P><STRONG><a name="[2b6]"></a>WSTMonitorIO_receiveIncomingData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wstmonitorio_keil_cortexm3_itm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_pollIncomingData()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_Monitor_receiveTask(void*)
</UL>

<P><STRONG><a name="[219]"></a>GLCD_SetWindow</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GLCD_SetWindow &rArr; wr_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBargraph
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_WindowMax
</UL>

<P><STRONG><a name="[21b]"></a>GLCD_WindowMax</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GLCD_WindowMax &rArr; GLCD_SetWindow &rArr; wr_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[12c]"></a>GLCD_Initialize</STRONG> (Thumb, 1462 bytes, Stack size 16 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GLCD_Initialize &rArr; rd_id_man &rArr; spi_tran_man &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_Configure
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_id_man
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_reg
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display(WST_TSK*)
</UL>

<P><STRONG><a name="[21d]"></a>GLCD_Uninitialize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, glcd_mcb1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>

<P><STRONG><a name="[12e]"></a>GLCD_SetForegroundColor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display(WST_TSK*)
</UL>

<P><STRONG><a name="[12d]"></a>GLCD_SetBackgroundColor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display(WST_TSK*)
</UL>

<P><STRONG><a name="[130]"></a>GLCD_ClearScreen</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GLCD_ClearScreen &rArr; GLCD_WindowMax &rArr; GLCD_SetWindow &rArr; wr_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_WindowMax
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display(WST_TSK*)
</UL>

<P><STRONG><a name="[12f]"></a>GLCD_SetFont</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display(WST_TSK*)
</UL>

<P><STRONG><a name="[220]"></a>GLCD_DrawPixel</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, glcd_mcb1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[132]"></a>GLCD_DrawHLine</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GLCD_DrawHLine &rArr; GLCD_SetWindow &rArr; wr_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display(WST_TSK*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawRectangle
</UL>

<P><STRONG><a name="[222]"></a>GLCD_DrawVLine</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, glcd_mcb1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawRectangle
</UL>

<P><STRONG><a name="[223]"></a>GLCD_DrawRectangle</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, glcd_mcb1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
</UL>

<P><STRONG><a name="[224]"></a>GLCD_DrawChar</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
</UL>

<P><STRONG><a name="[131]"></a>GLCD_DrawString</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardStatus(const char*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardLogging2()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display(WST_TSK*)
</UL>

<P><STRONG><a name="[225]"></a>GLCD_DrawBargraph</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, glcd_mcb1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[226]"></a>GLCD_DrawBitmap</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, glcd_mcb1700.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[400]"></a>GLCD_VScroll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_mcb1700.o(.text), UNUSED)

<P><STRONG><a name="[401]"></a>GLCD_FrameBufferAccess</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_mcb1700.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>GLCD_FrameBufferAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glcd_mcb1700.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[e8]"></a>os_error</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[e9]"></a>rt_init_robin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[ea]"></a>rt_chk_robin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[eb]"></a>__user_perthread_libspace</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[ec]"></a>_mutex_initialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[ed]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[ee]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[23a]"></a>SSPx_GPDMA_Tx_SignalEvent</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_GPDMA_Tx_SignalEvent
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_GPDMA_Tx_SignalEvent
</UL>

<P><STRONG><a name="[23b]"></a>SSPx_GPDMA_Rx_SignalEvent</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSPx_GPDMA_Rx_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_GPDMA_Rx_SignalEvent
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_GPDMA_Rx_SignalEvent
</UL>

<P><STRONG><a name="[6e]"></a>SSP0_GPDMA_Tx_SignalEvent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP0_GPDMA_Tx_SignalEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GPDMA_Tx_SignalEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>SSP0_GPDMA_Rx_SignalEvent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSP0_GPDMA_Rx_SignalEvent &rArr; SSPx_GPDMA_Rx_SignalEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GPDMA_Rx_SignalEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>SSP0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSP0_IRQHandler &rArr; SSPx_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SSP1_GPDMA_Tx_SignalEvent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP1_GPDMA_Tx_SignalEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GPDMA_Tx_SignalEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>SSP1_GPDMA_Rx_SignalEvent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSP1_GPDMA_Rx_SignalEvent &rArr; SSPx_GPDMA_Rx_SignalEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GPDMA_Rx_SignalEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>SSP1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSP1_IRQHandler &rArr; SSPx_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23d]"></a>_sys_open</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[23f]"></a>_sys_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _sys_close &rArr; __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[241]"></a>_sys_write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[243]"></a>_sys_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, retarget_io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[28b]"></a>_sys_istty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[245]"></a>_sys_seek</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _sys_seek &rArr; __sys_seek &rArr; fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[247]"></a>_sys_flen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _sys_flen &rArr; __sys_flen &rArr; fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[22a]"></a>GPDMA_Initialize</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
</UL>

<P><STRONG><a name="[22d]"></a>GPDMA_Uninitialize</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Uninitialize
</UL>

<P><STRONG><a name="[22b]"></a>GPDMA_PeripheralSelect</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_PeripheralSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
</UL>

<P><STRONG><a name="[232]"></a>GPDMA_ChannelConfigure</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Channel_active_flag
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Channel_active_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Transfer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Receive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Send
</UL>

<P><STRONG><a name="[24c]"></a>GPDMA_ChannelEnable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpdma_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Channel_active_flag
</UL>

<P><STRONG><a name="[22f]"></a>GPDMA_ChannelDisable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_ChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Channel_active_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_PowerControl
</UL>

<P><STRONG><a name="[403]"></a>GPDMA_ChannelGetStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpdma_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>GPDMA_ChannelGetCount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GetDataCount
</UL>

<P><STRONG><a name="[36]"></a>DMA_IRQHandler</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Channel_active_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21c]"></a>GPIO_PortClock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpio_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[20e]"></a>GPIO_SetDir</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, gpio_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_id_man
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran_man
</UL>

<P><STRONG><a name="[20f]"></a>GPIO_PinWrite</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gpio_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Uninitialize
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_id_man
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran_man
</UL>

<P><STRONG><a name="[211]"></a>GPIO_PinRead</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran_man
</UL>

<P><STRONG><a name="[404]"></a>GPIO_PortWrite</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, gpio_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>GPIO_PortRead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>PIN_Configure</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, pin_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIN_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Uninitialize
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_id_man
</UL>

<P><STRONG><a name="[406]"></a>PIN_ConfigureTPIU</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pin_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>PIN_ConfigureI2C0Pins</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pin_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a5]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[24d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, system_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[24f]"></a>fs_mutex_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_mutex_new &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>

<P><STRONG><a name="[251]"></a>fs_mutex_acquire</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[253]"></a>fs_mutex_release</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[255]"></a>fs_mutex_delete</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[325]"></a>fs_get_rtos_tick_freq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[257]"></a>fs_set_rtos_delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_set_rtos_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[259]"></a>fs_get_sys_tick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>

<P><STRONG><a name="[33c]"></a>fs_get_sys_tick_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>

<P><STRONG><a name="[262]"></a>fs_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_config &rArr; fs_mutex_new &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[17c]"></a>fdelete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = fdelete &rArr; _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::deleteFile()
</UL>

<P><STRONG><a name="[179]"></a>fflush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>

<P><STRONG><a name="[2d7]"></a>efs_handle_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[314]"></a>efs_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[408]"></a>efs_uninit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>efs_mount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[409]"></a>efs_unmount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>efs_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[2cf]"></a>efs_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[2da]"></a>efs_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[2de]"></a>efs_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[2d1]"></a>efs_flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[2d3]"></a>efs_flen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[2dc]"></a>efs_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[40a]"></a>efs_ffind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>efs_rename</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>efs_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[40c]"></a>efs_analyse</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[40d]"></a>efs_check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[40e]"></a>efs_format</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[40f]"></a>efs_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>efs_defrag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>efs_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>fat_jour_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[412]"></a>fat_jour_prep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[413]"></a>fsj_set_space</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>fsj_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[414]"></a>fsj_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>elink_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[302]"></a>elink_dir</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[30b]"></a>elink_cmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[320]"></a>elink_insert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[31a]"></a>elink_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
</UL>

<P><STRONG><a name="[323]"></a>elink_scan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[415]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[24e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[416]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::CompareNoCase_(const char*, const char*)
</UL>

<P><STRONG><a name="[178]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>

<P><STRONG><a name="[140]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardStatus(const char*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>

<P><STRONG><a name="[26a]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[26b]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[269]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[f5]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[26d]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[184]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::read()
</UL>

<P><STRONG><a name="[271]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[417]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[17a]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fclose_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::read()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>

<P><STRONG><a name="[276]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[264]"></a>$Super$$fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[279]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[173]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::read()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::append(char)
</UL>

<P><STRONG><a name="[10b]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ff]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WSTRTOS_cpp_b410bc26
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WST_TMR_cpp_d87a1f05
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
</UL>

<P><STRONG><a name="[183]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::read()
</UL>

<P><STRONG><a name="[27d]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[1a7]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator =(const char*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::ReleaseBuffer(int)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator +=(const char*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const char*)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const OMString&)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::reallocMemory(unsigned, unsigned, void*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator =(const OMString&)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator =(const char*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator +=(const char*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator +=(const OMString&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::resetSize(int)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const char*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[27f]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[418]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::cleanUpRelations()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[419]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[41b]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[280]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[41c]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_PowerControl
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[41d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[41e]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1a0]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator &rang;=(const OMString&) const
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator &rang;=(const char*) const
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator &rang;(const OMString&) const
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator &rang;(const char*) const
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator ==(const OMString&) const
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator ==(const char*) const
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator &lang;=(const OMString&) const
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator &lang;=(const char*) const
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator &lang;(const OMString&) const
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator &lang;(const char*) const
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator !=(const OMString&) const
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::operator !=(const char*) const
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &rang;=(const char*, const OMString&)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &rang;(const char*, const OMString&)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const char*, const OMString&)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;=(const char*, const OMString&)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;(const char*, const OMString&)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !=(const char*, const OMString&)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[41f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::~LedBar()
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func3&rang;
</UL>

<P><STRONG><a name="[266]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[27c]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_ddtor_pointer_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ddtor_pointer_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[283]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[27a]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[287]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[275]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[27e]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[26c]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[268]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[4c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[288]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[289]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[f7]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[272]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[270]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[4d]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[277]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[420]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[28e]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[274]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[28f]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[101]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxa_finalize &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[290]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[286]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[fb]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[293]"></a>__rt_new_handler_addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_new_handler_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_new_handler_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[d]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[295]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[f9]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[297]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[c]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[28a]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[298]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[29b]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[299]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[312]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>

<P><STRONG><a name="[421]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[422]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[103]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[292]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[291]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[57]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[2a0]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[2a1]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[10f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[105]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2a3]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_eh_globals_addr_twolibspace.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[29c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[423]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[424]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[2a6]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[316]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[425]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>fgets</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fgets_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fgets &rArr; _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::read()
</UL>

<P><STRONG><a name="[29e]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[29a]"></a>_flushlinebuffered</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, flushlinebuffered_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[2a2]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[29f]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[29d]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[296]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[2a4]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[426]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[427]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[428]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[429]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[42a]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[2a8]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[2aa]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[2ab]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[2ac]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[19d]"></a>WSTMonitor_sendDataStruct(void*, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_IO_PutByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventStart(unsigned char*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventEnd(unsigned char*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendBufferReset()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendError()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendOpCall(void*, void*, unsigned short, void*, void*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendVersion()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendHighwater()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendStateSize()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTimeOut(unsigned char*)
</UL>

<P><STRONG><a name="[2ae]"></a>WSTMonitor_sendStateSize()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendStateSize() &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[2af]"></a>WSTMonitor_sendHighwater()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendHighwater() &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[2b0]"></a>WSTMonitor_sendVersion()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendVersion() &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[2b4]"></a>WSTMonitor_resumeRxf()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>

<P><STRONG><a name="[2b3]"></a>WSTMonitor_suspendRxf()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>

<P><STRONG><a name="[2b1]"></a>WSTMonitor_performCmd()</STRONG> (Thumb, 642 bytes, Stack size 40 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WSTMonitor_performCmd() &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_IO_GetByte
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_suspendRxf()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_resumeRxf()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_Monitor_receiveTask(void*)
</UL>

<P><STRONG><a name="[2b5]"></a>WST_Monitor_receiveTask(void*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WST_Monitor_receiveTask(void*) &rArr; WSTMonitor_performCmd() &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitorIO_receiveIncomingData
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wstmonitor.o(CODE_ANIM_RUNNING_FAST)
</UL>
<P><STRONG><a name="[2b7]"></a>WST_Monitor_createReceiveTask()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WST_Monitor_createReceiveTask() &rArr; WST_OSW_TSK_userInit(void(*)(void*), osPriority, void*, unsigned short, void*) &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_userInit(void(*)(void*), osPriority, void*, unsigned short, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[1f2]"></a>WSTMonitor_init()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WSTMonitor_init() &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_IO_Init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_Monitor_createReceiveTask()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendVersion()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendHighwater()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendStateSize()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX()
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF::initialize()
</UL>

<P><STRONG><a name="[2ba]"></a>WSTMonitor_pollIncomingData()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitorIO_receiveIncomingData
</UL>

<P><STRONG><a name="[119]"></a>WSTMonitor_sendInit(void*, unsigned short, void*)</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WSTMonitor_sendInit(void*, unsigned short, void*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::Led(WST_TSK*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::Led(int, WST_TSK*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::Joystick(WST_TSK*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display(WST_TSK*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::Clock()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::SDCard(WST_TSK*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::RunningIndicatorLed(WST_TSK*)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(WST_TSK*)
</UL>

<P><STRONG><a name="[11a]"></a>WSTMonitor_sendDestroy(void*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendDestroy(void*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::~Led()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick::~Joystick()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::~Display()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::~Clock()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::~SDCard()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningIndicatorLed::~RunningIndicatorLed()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::~LedBar()
</UL>

<P><STRONG><a name="[2bb]"></a>WSTMonitor_sendOpCall(void*, void*, unsigned short, void*, void*)</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>

<P><STRONG><a name="[1d2]"></a>WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::handleSyncEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[1ce]"></a>WSTMonitor_sendEventStart(unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendEventStart(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[1d0]"></a>WSTMonitor_sendEventEnd(unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendEventEnd(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[1e4]"></a>WSTMonitor_sendTimeOut(unsigned char*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendTimeOut(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
</UL>

<P><STRONG><a name="[2bc]"></a>WSTMonitor_sendError()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>

<P><STRONG><a name="[2bd]"></a>WSTMonitor_sendBufferReset()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>

<P><STRONG><a name="[11d]"></a>WST_EVT::WST_EVT()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defaultpkg.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog2::evSDLog2(OMString)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evError::evError()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog::evSDLog(char*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evBlink::evBlink()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evJoystickPos::evJoystickPos(char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOff::evOff()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOn::evOn()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evToggle::evToggle()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[42b]"></a>WST_EVT::WST_EVT__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, defaultpkg.o(CODE_RXF_RUNNING_FAST), UNUSED)

<P><STRONG><a name="[c5]"></a>WST_EVT::~WST_EVT__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, defaultpkg.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WST_EVT::~WST_EVT__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV7WST_EVT)
</UL>
<P><STRONG><a name="[200]"></a>WST_OSW_TSK_init(WST_TSK*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startTaskAfterOSStart()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(unsigned char*, void*, unsigned char, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[204]"></a>WST_OSW_TMM_delay(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_OSW_TMM_delay(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>

<P><STRONG><a name="[2b8]"></a>WST_OSW_TSK_userInit(void(*)(void*), osPriority, void*, unsigned short, void*)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WST_OSW_TSK_userInit(void(*)(void*), osPriority, void*, unsigned short, void*) &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_Monitor_createReceiveTask()
</UL>

<P><STRONG><a name="[203]"></a>WST_OSW_TSK_cleanup(WST_TSK*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WST_OSW_TSK_cleanup(WST_TSK*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::endDispatching()
</UL>

<P><STRONG><a name="[207]"></a>WST_OSW_TSK_start(WST_TSK*)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WST_OSW_TSK_start(WST_TSK*) &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startDispatching()
</UL>

<P><STRONG><a name="[209]"></a>WST_OSW_TSK_suspend(WST_TSK*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::suspend()
</UL>

<P><STRONG><a name="[20b]"></a>WST_OSW_TSK_resume(WST_TSK*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::resume()
</UL>

<P><STRONG><a name="[2bf]"></a>WST_OSW_TMM_timerCallBack(const void*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WST_OSW_TMM_timerCallBack(const void*) &rArr; WST_TMM::processTimeouts() &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_incrementRxfTicks()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_osw.o(CODE_RXF_RUNNING_FAST)
</UL>
<P><STRONG><a name="[1df]"></a>WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::toBeCancelled(const WST_FSM*, short)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::WST_MSQ(unsigned short, bool)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::cancelEvents(WST_FSM*, short)
</UL>

<P><STRONG><a name="[1e3]"></a>WST_OSW_MSQ_getCount(WST_MSQ*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::isEmpty()
</UL>

<P><STRONG><a name="[1e1]"></a>WST_OSW_MSQ_get(WST_MSQ*, WST_EVT**)</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WST_OSW_MSQ_get(WST_MSQ*, WST_EVT**) &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::get()
</UL>

<P><STRONG><a name="[1eb]"></a>WST_OSW_MTX_exitCriticalRegion(WST_MTX*)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_getRtosMutex()
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_malloc(unsigned)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_free(void*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventStart(unsigned char*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventEnd(unsigned char*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendBufferReset()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendError()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendOpCall(void*, void*, unsigned short, void*, void*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::~WST_MTX()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTimeOut(unsigned char*)
</UL>

<P><STRONG><a name="[1e9]"></a>WST_OSW_MTX_enterCriticalRegion(WST_MTX*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_getRtosMutex()
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_malloc(unsigned)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_free(void*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventStart(unsigned char*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventEnd(unsigned char*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendBufferReset()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendError()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendOpCall(void*, void*, unsigned short, void*, void*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX(const WST_MTX*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTimeOut(unsigned char*)
</UL>

<P><STRONG><a name="[1d9]"></a>WST_OSW_MEM_malloc(unsigned)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
</UL>

<P><STRONG><a name="[1da]"></a>WST_OSW_MEM_free(void*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>

<P><STRONG><a name="[2c7]"></a>WST_OSW_TMM_initTimerTask()</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WST_OSW_TMM_initTimerTask() &rArr; osTimerCreate &rArr; svcTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
</UL>

<P><STRONG><a name="[1dd]"></a>WST_OSW_MSQ_init(WST_MSQ*)</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startTaskAfterOSStart()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::WST_MSQ(unsigned short, void*, bool)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::WST_MSQ(unsigned short, bool)
</UL>

<P><STRONG><a name="[2ca]"></a>WST_OSW_MSQ_cleanup(WST_MSQ*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>

<P><STRONG><a name="[1e5]"></a>WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
</UL>

<P><STRONG><a name="[1e7]"></a>WST_OSW_MTX_init(WST_MTX*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WST_OSW_MTX_init(WST_MTX*) &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_getRtosMutex()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX()
</UL>

<P><STRONG><a name="[1ec]"></a>WST_OSW_MTX_cleanup(WST_MTX*)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wst_osw.o(CODE_RXF_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_getRtosMutex()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::~WST_MTX()
</UL>

<P><STRONG><a name="[1c5]"></a>WSTRTOS_Init()</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, wstrtos.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = WSTRTOS_Init() &rArr; WST_RXF_Main(short, char**) &rArr; TestBuilder::TestBuilder(WST_TSK*) &rArr; Joystick::Joystick(WST_TSK*) &rArr; WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startTaskAfterOSStart()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::initMutex()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_initTimerTask()
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42c]"></a>WSTRTOS_Cleanup()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wstrtos.o(CODE_RXF_RUNNING_FAST), UNUSED)

<P><STRONG><a name="[2c0]"></a>WSTRTOS_incrementRxfTicks()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wstrtos.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_timerCallBack(const void*)
</UL>

<P><STRONG><a name="[1cd]"></a>WSTRTOS_getRxfTicks()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wstrtos.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::handleSyncEvent(WST_EVT*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendOpCall(void*, void*, unsigned short, void*, void*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::WST_TMM()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
</UL>

<P><STRONG><a name="[1d7]"></a>WSTTarget_enterCriticalRegion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wsttarget.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator new(unsigned)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator delete (void*)
</UL>

<P><STRONG><a name="[1d8]"></a>WSTTarget_exitCriticalRegion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wsttarget.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator new(unsigned)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator delete (void*)
</UL>

<P><STRONG><a name="[1c4]"></a>WSTTarget_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wsttarget.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WSTTarget_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42d]"></a>WSTTarget_Cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wsttarget.o(CODE_RXF_RUNNING_FAST), UNUSED)

<P><STRONG><a name="[42e]"></a>os_def_interrupt()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wsttarget.o(CODE_RXF_RUNNING_FAST), UNUSED)

<P><STRONG><a name="[42f]"></a>WSTTarget_isInISR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wsttarget.o(CODE_RXF_RUNNING_FAST), UNUSED)

<P><STRONG><a name="[96]"></a>evJoystickPos::~evJoystickPos__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, defaultpkg.o(i._ZN13evJoystickPosD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evJoystickPos::~evJoystickPos__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evJoystickPos::~evJoystickPos()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV13evJoystickPos)
</UL>
<P><STRONG><a name="[95]"></a>evJoystickPos::~evJoystickPos()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN13evJoystickPosD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evJoystickPos::~evJoystickPos__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV13evJoystickPos)
</UL>
<P><STRONG><a name="[430]"></a>evJoystickPos::~evJoystickPos__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN13evJoystickPosD1Ev), UNUSED)

<P><STRONG><a name="[aa]"></a>evOn::~evOn__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, defaultpkg.o(i._ZN4evOnD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evOn::~evOn__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOn::~evOn()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV4evOn)
</UL>
<P><STRONG><a name="[a9]"></a>evOn::~evOn()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN4evOnD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOn::~evOn__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV4evOn)
</UL>
<P><STRONG><a name="[431]"></a>evOn::~evOn__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN4evOnD1Ev), UNUSED)

<P><STRONG><a name="[af]"></a>evOff::~evOff__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, defaultpkg.o(i._ZN5evOffD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evOff::~evOff__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOff::~evOff()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV5evOff)
</UL>
<P><STRONG><a name="[ae]"></a>evOff::~evOff()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN5evOffD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOff::~evOff__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV5evOff)
</UL>
<P><STRONG><a name="[432]"></a>evOff::~evOff__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN5evOffD1Ev), UNUSED)

<P><STRONG><a name="[44]"></a>WST_TMR::WST_TMR()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wst_tmr.o(i._ZN7WST_TMRC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> wst_tmr.o(.text)
</UL>
<P><STRONG><a name="[433]"></a>WST_TMR::WST_TMR__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_tmr.o(i._ZN7WST_TMRC1Ev), UNUSED)

<P><STRONG><a name="[c8]"></a>WST_TMR::~WST_TMR__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_tmm.o(i._ZN7WST_TMRD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WST_TMR::~WST_TMR__deallocating() &rArr; WST_TMR::operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator delete (void*)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::~WST_TMR()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tmm.o(.constdata__ZTV7WST_TMR)
</UL>
<P><STRONG><a name="[43]"></a>WST_TMR::~WST_TMR()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wst_tmm.o(i._ZN7WST_TMRD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::~WST_TMR__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wst_tmm.o(.constdata__ZTV7WST_TMR)
<LI> wst_tmr.o(.text)
</UL>
<P><STRONG><a name="[434]"></a>WST_TMR::~WST_TMR__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_tmm.o(i._ZN7WST_TMRD1Ev), UNUSED)

<P><STRONG><a name="[cb]"></a>evBlink::~evBlink__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, defaultpkg.o(i._ZN7evBlinkD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evBlink::~evBlink__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evBlink::~evBlink()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV7evBlink)
</UL>
<P><STRONG><a name="[ca]"></a>evBlink::~evBlink()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN7evBlinkD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evBlink::~evBlink__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV7evBlink)
</UL>
<P><STRONG><a name="[435]"></a>evBlink::~evBlink__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN7evBlinkD1Ev), UNUSED)

<P><STRONG><a name="[ce]"></a>evError::~evError__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, defaultpkg.o(i._ZN7evErrorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evError::~evError__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evError::~evError()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV7evError)
</UL>
<P><STRONG><a name="[cd]"></a>evError::~evError()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN7evErrorD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evError::~evError__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV7evError)
</UL>
<P><STRONG><a name="[436]"></a>evError::~evError__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN7evErrorD1Ev), UNUSED)

<P><STRONG><a name="[d1]"></a>evSDLog::~evSDLog__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, defaultpkg.o(i._ZN7evSDLogD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evSDLog::~evSDLog__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog::~evSDLog()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV7evSDLog)
</UL>
<P><STRONG><a name="[d0]"></a>evSDLog::~evSDLog()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN7evSDLogD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog::~evSDLog__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV7evSDLog)
</UL>
<P><STRONG><a name="[437]"></a>evSDLog::~evSDLog__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN7evSDLogD1Ev), UNUSED)

<P><STRONG><a name="[df]"></a>evSDLog2::~evSDLog2__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, defaultpkg.o(i._ZN8evSDLog2D0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = evSDLog2::~evSDLog2__deallocating() &rArr; evSDLog2::~evSDLog2() &rArr; OMString::~OMString() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog2::~evSDLog2()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV8evSDLog2)
</UL>
<P><STRONG><a name="[de]"></a>evSDLog2::~evSDLog2()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, defaultpkg.o(i._ZN8evSDLog2D1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evSDLog2::~evSDLog2() &rArr; OMString::~OMString() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::~OMString()
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evSDLog2::~evSDLog2__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV8evSDLog2)
</UL>
<P><STRONG><a name="[438]"></a>evSDLog2::~evSDLog2__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, defaultpkg.o(i._ZN8evSDLog2D1Ev), UNUSED)

<P><STRONG><a name="[e2]"></a>evToggle::~evToggle__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, defaultpkg.o(i._ZN8evToggleD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evToggle::~evToggle__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evToggle::~evToggle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV8evToggle)
</UL>
<P><STRONG><a name="[e1]"></a>evToggle::~evToggle()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN8evToggleD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evToggle::~evToggle__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defaultpkg.o(.constdata__ZTV8evToggle)
</UL>
<P><STRONG><a name="[439]"></a>evToggle::~evToggle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, defaultpkg.o(i._ZN8evToggleD1Ev), UNUSED)

<P><STRONG><a name="[11b]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock::~Clock__deallocating()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_free(void*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK__deallocating()
</UL>

<P><STRONG><a name="[2c6]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_malloc(unsigned)
</UL>

<P><STRONG><a name="[2cd]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(WST_TSK*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WST_TMR_cpp_d87a1f05
</UL>

<P><STRONG><a name="[1d5]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
</UL>

<P><STRONG><a name="[98]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata__ZTV19OMAbstractContainerI8OMStringE)
</UL>
<P><STRONG><a name="[240]"></a>__sys_close</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_close
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[265]"></a>__sys_ensure</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_ensure))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sys_ensure &rArr; fat_flush &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flush
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[248]"></a>__sys_flen</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sys_flen &rArr; fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flen
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[23e]"></a>__sys_open</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, fs_sys.o(i.__sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_handle_get
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[244]"></a>__sys_read</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[246]"></a>__sys_seek</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __sys_seek &rArr; fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[242]"></a>__sys_write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[263]"></a>_fdelete</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fs_mapi.o(i._fdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[367]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[26e]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[366]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[36c]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[364]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[2ce]"></a>fat_close</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, fs_fat.o(i.fat_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[2df]"></a>fat_delete</STRONG> (Thumb, 480 bytes, Stack size 80 bytes, fs_fat.o(i.fat_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_param
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[2d2]"></a>fat_flen</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.fat_flen))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[2d0]"></a>fat_flush</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fs_fat.o(i.fat_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fat_flush &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[2d5]"></a>fat_handle_get</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_fat.o(i.fat_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fat_handle_get &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[308]"></a>fat_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fs_fat.o(i.fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fat_init &rArr; fs_config &rArr; fs_mutex_new &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[30a]"></a>fat_mount</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, fs_fat.o(i.fat_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fat_mount &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[2d6]"></a>fat_open</STRONG> (Thumb, 448 bytes, Stack size 72 bytes, fs_fat.o(i.fat_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[2d9]"></a>fat_read</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, fs_fat.o(i.fat_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[2db]"></a>fat_seek</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, fs_fat.o(i.fat_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[2fc]"></a>fat_vol_chk</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fs_fat.o(i.fat_vol_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[2dd]"></a>fat_write</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, fs_fat.o(i.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[2a7]"></a>_fgetc$unlocked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>

<P><STRONG><a name="[17e]"></a>finit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_mapi.o(i.finit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finit &rArr; fat_init &rArr; fs_config &rArr; fs_mutex_new &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::initAndMount()
</UL>

<P><STRONG><a name="[17f]"></a>fmount</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fs_mapi.o(i.fmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fmount &rArr; fat_mount &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mount
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard::initAndMount()
</UL>

<P><STRONG><a name="[54]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[2d4]"></a>fs_drive_id</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fs_common.o(i.fs_drive_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[2f4]"></a>fs_get_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[343]"></a>fs_mc_lock_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_mc_mci.o(i.fs_mc_lock_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[33f]"></a>fs_mc_read_cd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_mc_spi.o(i.fs_mc_read_cd))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[340]"></a>fs_mc_read_wp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_mc_spi.o(i.fs_mc_read_wp))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[336]"></a>fs_mc_spi_control_ss</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_mc_spi.o(i.fs_mc_spi_control_ss))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>

<P><STRONG><a name="[326]"></a>fs_set_cdrive</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_set_cdrive))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[2e7]"></a>get_u16</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.get_u16))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[2e8]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_common.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[327]"></a>isrMessageGet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[329]"></a>isrMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[328]"></a>isr_mbx_receive</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>

<P><STRONG><a name="[32b]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[260]"></a>mc_spi_DevCtrl</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, fs_mc_spi.o(i.mc_spi_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mc_spi_DevCtrl &rArr; mc_spi_Init &rArr; mc_control_lock &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_read_wp
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_read_cd
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parse_cid
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_DevCtrl
</UL>

<P><STRONG><a name="[261]"></a>mc_spi_DrvEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_mc_spi.o(i.mc_spi_DrvEvent))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC0_SPI_SignalEvent
</UL>

<P><STRONG><a name="[25b]"></a>mc_spi_Init</STRONG> (Thumb, 882 bytes, Stack size 88 bytes, fs_mc_spi.o(i.mc_spi_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mc_spi_Init &rArr; mc_control_lock &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_spi_control_ss
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_lock_unlock
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_set_speed
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_ocr
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_data
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parse_csd
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parse_cid
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_Init
</UL>

<P><STRONG><a name="[25f]"></a>mc_spi_ReadInfo</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_mc_spi.o(i.mc_spi_ReadInfo))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdInfo
</UL>

<P><STRONG><a name="[25d]"></a>mc_spi_ReadSector</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_spi_ReadSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mc_spi_ReadSector &rArr; mc_read_block &rArr; mc_read_data &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdSect
</UL>

<P><STRONG><a name="[25c]"></a>mc_spi_UnInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fs_mc_spi.o(i.mc_spi_UnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mc_spi_UnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_UnInit
</UL>

<P><STRONG><a name="[25e]"></a>mc_spi_WriteSector</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_spi_WriteSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mc_spi_WriteSector &rArr; mc_write_block &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_WrSect
</UL>

<P><STRONG><a name="[258]"></a>osDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_delay(unsigned)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
</UL>

<P><STRONG><a name="[110]"></a>osKernelInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[2cb]"></a>osKernelRunning</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelRunning))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
</UL>

<P><STRONG><a name="[112]"></a>osKernelStart</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[25a]"></a>osKernelSysTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelSysTick))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>

<P><STRONG><a name="[2c1]"></a>osMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMessageCreate &rArr; svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_init(WST_MSQ*)
</UL>

<P><STRONG><a name="[2c2]"></a>osMessageGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_get(WST_MSQ*, WST_EVT**)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[2c3]"></a>osMessagePut</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool)
</UL>

<P><STRONG><a name="[250]"></a>osMutexCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_init(WST_MTX*)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>

<P><STRONG><a name="[256]"></a>osMutexDelete</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexDelete), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_cleanup(WST_MTX*)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_delete
</UL>

<P><STRONG><a name="[254]"></a>osMutexRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
</UL>

<P><STRONG><a name="[252]"></a>osMutexWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexWait))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
</UL>

<P><STRONG><a name="[111]"></a>osThreadCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_start(WST_TSK*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_userInit(void(*)(void*), osPriority, void*, unsigned short, void*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[6b]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[2cc]"></a>osThreadGetId</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
</UL>

<P><STRONG><a name="[2be]"></a>osThreadTerminate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadTerminate))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_cleanup(WST_TSK*)
</UL>

<P><STRONG><a name="[34b]"></a>osTimerCall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCall))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[2c8]"></a>osTimerCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osTimerCreate &rArr; svcTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_initTimerTask()
</UL>

<P><STRONG><a name="[2c9]"></a>osTimerStart</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_initTimerTask()
</UL>

<P><STRONG><a name="[6c]"></a>osTimerThread</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTimerThread &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[369]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[117]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[373]"></a>os_tick_ovf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_ovf))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelSysTick
</UL>

<P><STRONG><a name="[372]"></a>os_tick_val</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_val))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelSysTick
</UL>

<P><STRONG><a name="[3f]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[376]"></a>rt_alloc_mem</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[34e]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[352]"></a>rt_dec_dly</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[354]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
</UL>

<P><STRONG><a name="[356]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[357]"></a>rt_evt_psh</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[40]"></a>rt_free_box</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[377]"></a>rt_free_mem</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[350]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[371]"></a>rt_init_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[35b]"></a>rt_init_stack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[32a]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[374]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[35c]"></a>rt_mbx_psh</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[35e]"></a>rt_mbx_send</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessagePut
</UL>

<P><STRONG><a name="[35f]"></a>rt_mbx_wait</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[360]"></a>rt_mut_delete</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexDelete
</UL>

<P><STRONG><a name="[228]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>

<P><STRONG><a name="[48]"></a>rt_mut_release</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>rt_mut_wait</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[32d]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>

<P><STRONG><a name="[32c]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>

<P><STRONG><a name="[34f]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[353]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[355]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[361]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
</UL>

<P><STRONG><a name="[35d]"></a>rt_ret_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[359]"></a>rt_ret_val2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
</UL>

<P><STRONG><a name="[358]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
</UL>

<P><STRONG><a name="[363]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[362]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[113]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[351]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[365]"></a>rt_sys_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[368]"></a>rt_sys_start</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[115]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[36b]"></a>rt_tsk_create</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[36d]"></a>rt_tsk_delete</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[36f]"></a>rt_tsk_prio</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[227]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[2e9]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_common.o(i.set_u16))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[2ea]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[58]"></a>svcDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osDelay)
</UL>
<P><STRONG><a name="[59]"></a>svcKernelInitialize</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[5a]"></a>svcKernelRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_cmsis.o(i.svcKernelRunning))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelRunning)
</UL>
<P><STRONG><a name="[5b]"></a>svcKernelStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[5c]"></a>svcKernelSysTick</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcKernelSysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_val
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_ovf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelSysTick)
</UL>
<P><STRONG><a name="[5d]"></a>svcMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessageCreate)
</UL>
<P><STRONG><a name="[5e]"></a>svcMessageGet</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rt_cmsis.o(i.svcMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessageGet)
</UL>
<P><STRONG><a name="[5f]"></a>svcMessagePut</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMessagePut &rArr; rt_mbx_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessagePut)
</UL>
<P><STRONG><a name="[60]"></a>svcMutexCreate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexCreate)
</UL>
<P><STRONG><a name="[61]"></a>svcMutexDelete</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexDelete &rArr; rt_mut_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexDelete)
</UL>
<P><STRONG><a name="[62]"></a>svcMutexRelease</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexRelease &rArr; rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[63]"></a>svcMutexWait</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcMutexWait &rArr; rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexWait)
</UL>
<P><STRONG><a name="[64]"></a>svcThreadCreate</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[65]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rt_cmsis.o(i.osThreadExit)
<LI> rt_cmsis.o(i.osThreadGetId)
</UL>
<P><STRONG><a name="[66]"></a>svcThreadTerminate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rt_cmsis.o(i.osThreadExit)
<LI> rt_cmsis.o(i.osThreadTerminate)
</UL>
<P><STRONG><a name="[67]"></a>svcTimerCall</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCall)
</UL>
<P><STRONG><a name="[68]"></a>svcTimerCreate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCreate)
</UL>
<P><STRONG><a name="[69]"></a>svcTimerStart</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcTimerStart &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerStart)
</UL>
<P><STRONG><a name="[36a]"></a>sysTimerTick</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[4f]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>OMIterator&lang;OMString&rang;::OMIterator(const OMAbstractContainer&lang;OMString&rang;&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, display.o(t._ZN10OMIteratorI8OMStringEC1ERK19OMAbstractContainerIS0_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OMIterator&lang;OMString&rang;::OMIterator(const OMAbstractContainer&lang;OMString&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::getLoggedLines() const
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardLogging2()
</UL>

<P><STRONG><a name="[43a]"></a>OMIterator&lang;OMString&rang;::OMIterator__sub_object(const OMAbstractContainer&lang;OMString&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, display.o(t._ZN10OMIteratorI8OMStringEC1ERK19OMAbstractContainerIS0_E), UNUSED)

<P><STRONG><a name="[13e]"></a>OMIterator&lang;OMString&rang;::~OMIterator()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(t._ZN10OMIteratorI8OMStringED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardLogging2()
</UL>

<P><STRONG><a name="[43b]"></a>OMIterator&lang;OMString&rang;::~OMIterator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, display.o(t._ZN10OMIteratorI8OMStringED1Ev), UNUSED)

<P><STRONG><a name="[37b]"></a>OMNullValue&lang;OMString&rang;::get()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, display.o(t._ZN11OMNullValueI8OMStringE3getEv))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMList&lang;OMString&rang;::getCurrent(void*) const
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMIterator&lang;OMString&rang;::operator *() const
</UL>

<P><STRONG><a name="[146]"></a>OMList&lang;OMString&rang;::_removeFirst()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, display.o(t._ZN6OMListI8OMStringE12_removeFirstEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OMList&lang;OMString&rang;::_removeFirst() &rArr; OMString::~OMString() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::~OMString()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMList&lang;OMString&rang;::~OMList()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::rootState_processEvent()
</UL>

<P><STRONG><a name="[143]"></a>OMList&lang;OMString&rang;::add(OMString)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, display.o(t._ZN6OMListI8OMStringE3addES0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OMList&lang;OMString&rang;::add(OMString) &rArr; OMString::OMString(const OMString&) &rArr; OMString::setSize(int) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMString::OMString(const OMString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::rootState_processEvent()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setLoggedLines(OMString)
</UL>

<P><STRONG><a name="[b7]"></a>OMList&lang;OMString&rang;::~OMList()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, display.o(t._ZN6OMListI8OMStringED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OMList&lang;OMString&rang;::~OMList() &rArr; OMList&lang;OMString&rang;::_removeFirst() &rArr; OMString::~OMString() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMList&lang;OMString&rang;::_removeFirst()
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::~Display()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata__ZTV6OMListI8OMStringE)
</UL>
<P><STRONG><a name="[43c]"></a>OMList&lang;OMString&rang;::~OMList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, display.o(t._ZN6OMListI8OMStringED1Ev), UNUSED)

<P><STRONG><a name="[136]"></a>OMIterator&lang;OMString&rang;::operator *() const</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, display.o(t._ZNK10OMIteratorI8OMStringEdeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OMIterator&lang;OMString&rang;::operator *() const
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMNullValue&lang;OMString&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::drawSDCardLogging2()
</UL>

<P><STRONG><a name="[b8]"></a>OMList&lang;OMString&rang;::getCurrent(void*) const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, display.o(t._ZNK6OMListI8OMStringE10getCurrentEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OMList&lang;OMString&rang;::getCurrent(void*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMNullValue&lang;OMString&rang;::get()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata__ZTV6OMListI8OMStringE)
</UL>
<P><STRONG><a name="[ba]"></a>OMList&lang;OMString&rang;::getNext(void*&) const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, display.o(t._ZNK6OMListI8OMStringE7getNextERPv))
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata__ZTV6OMListI8OMStringE)
</UL>
<P><STRONG><a name="[b9]"></a>OMList&lang;OMString&rang;::getFirst(void*&) const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(t._ZNK6OMListI8OMStringE8getFirstERPv))
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata__ZTV6OMListI8OMStringE)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[41]"></a>&lang;Func1&rang;</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = &lang;Func1&rang; &rArr; Led::Led(WST_TSK*) &rArr; WSTMonitor_sendInit(void*, unsigned short, void*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::Led(WST_TSK*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledbar.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>__sti___11_WST_TMM_cpp_5cffd7cf</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___11_WST_TMM_cpp_5cffd7cf &rArr; WST_TMM::WST_TMM()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::WST_TMM()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tmm.o(.init_array)
</UL>
<P><STRONG><a name="[45]"></a>&lang;Func3&rang;</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wst_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = &lang;Func3&rang; &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tmr.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>__sti___11_WST_TMR_cpp_d87a1f05</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wst_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __sti___11_WST_TMR_cpp_d87a1f05 &rArr; __aeabi_atexit &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tmr.o(.init_array)
</UL>
<P><STRONG><a name="[e6]"></a>__sti___11_WSTRTOS_cpp_b410bc26</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wstrtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __sti___11_WSTRTOS_cpp_b410bc26 &rArr; WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wstrtos.o(.init_array)
</UL>
<P><STRONG><a name="[210]"></a>delay_ms</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran_man
</UL>

<P><STRONG><a name="[20d]"></a>spi_tran_man</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = spi_tran_man &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_id_man
</UL>

<P><STRONG><a name="[213]"></a>spi_tran</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_dat
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
</UL>

<P><STRONG><a name="[216]"></a>wr_cmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBargraph
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawPixel
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_reg
</UL>

<P><STRONG><a name="[221]"></a>wr_dat</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, glcd_mcb1700.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawPixel
</UL>

<P><STRONG><a name="[212]"></a>wr_dat_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wr_dat_start &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBargraph
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
</UL>

<P><STRONG><a name="[21f]"></a>wr_dat_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wr_dat_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBargraph
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
</UL>

<P><STRONG><a name="[21e]"></a>wr_dat_only</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wr_dat_only
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBargraph
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
</UL>

<P><STRONG><a name="[214]"></a>rd_dat</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rd_dat &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_reg
</UL>

<P><STRONG><a name="[21a]"></a>wr_reg</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawPixel
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>

<P><STRONG><a name="[215]"></a>rd_reg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rd_reg &rArr; rd_dat &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_dat
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[217]"></a>rd_id_man</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, glcd_mcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rd_id_man &rArr; spi_tran_man &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_Configure
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran_man
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[238]"></a>GetSSPClockFreq</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetSSPClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
</UL>

<P><STRONG><a name="[72]"></a>SSP_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>SSP_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssp_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[229]"></a>SSPx_Initialize</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SSPx_Initialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_PeripheralSelect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Initialize
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_Configure
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Initialize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Initialize
</UL>

<P><STRONG><a name="[22c]"></a>SSPx_Uninitialize</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SSPx_Uninitialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Uninitialize
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Uninitialize
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Uninitialize
</UL>

<P><STRONG><a name="[22e]"></a>SSPx_PowerControl</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSPx_PowerControl &rArr; GPDMA_ChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelDisable
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_PowerControl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_PowerControl
</UL>

<P><STRONG><a name="[231]"></a>SSPx_Send</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSPx_Send &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Send
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Send
</UL>

<P><STRONG><a name="[233]"></a>SSPx_Receive</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSPx_Receive &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Receive
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Receive
</UL>

<P><STRONG><a name="[234]"></a>SSPx_Transfer</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSPx_Transfer &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Transfer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Transfer
</UL>

<P><STRONG><a name="[235]"></a>SSPx_GetDataCount</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSPx_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_GetDataCount
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_GetDataCount
</UL>

<P><STRONG><a name="[237]"></a>SSPx_Control</STRONG> (Thumb, 1314 bytes, Stack size 56 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSPx_Control &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelDisable
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSSPClockFreq
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_Configure
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Control
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Control
</UL>

<P><STRONG><a name="[239]"></a>SSPx_GetStatus</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SSPx_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_GetStatus
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_GetStatus
</UL>

<P><STRONG><a name="[23c]"></a>SSPx_IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSPx_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>SSP0_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SSP0_Initialize &rArr; SSPx_Initialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>SSP0_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SSP0_Uninitialize &rArr; SSPx_Uninitialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>SSP0_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SSP0_PowerControl &rArr; SSPx_PowerControl &rArr; GPDMA_ChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>SSP0_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSP0_Send &rArr; SSPx_Send &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>SSP0_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSP0_Receive &rArr; SSPx_Receive &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>SSP0_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSP0_Transfer &rArr; SSPx_Transfer &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>SSP0_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSP0_GetDataCount &rArr; SSPx_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>SSP0_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSP0_Control &rArr; SSPx_Control &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>SSP0_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SSP0_GetStatus &rArr; SSPx_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>SSP1_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SSP1_Initialize &rArr; SSPx_Initialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>SSP1_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SSP1_Uninitialize &rArr; SSPx_Uninitialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>SSP1_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SSP1_PowerControl &rArr; SSPx_PowerControl &rArr; GPDMA_ChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>SSP1_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSP1_Send &rArr; SSPx_Send &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>SSP1_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSP1_Receive &rArr; SSPx_Receive &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>SSP1_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSP1_Transfer &rArr; SSPx_Transfer &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>SSP1_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSP1_GetDataCount &rArr; SSPx_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>SSP1_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSP1_Control &rArr; SSPx_Control &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>SSP1_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SSP1_GetStatus &rArr; SSPx_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[230]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_PowerControl
</UL>

<P><STRONG><a name="[24a]"></a>Set_Channel_active_flag</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_Channel_active_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelEnable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>

<P><STRONG><a name="[249]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Uninitialize
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Initialize
</UL>

<P><STRONG><a name="[24b]"></a>Clear_Channel_active_flag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelDisable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>

<P><STRONG><a name="[86]"></a>mc0_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mc0_Init &rArr; mc_spi_Init &rArr; mc_control_lock &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>mc0_UnInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mc0_UnInit &rArr; mc_spi_UnInit
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_UnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>mc0_RdSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mc0_RdSect &rArr; mc_spi_ReadSector &rArr; mc_read_block &rArr; mc_read_data &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_ReadSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>mc0_WrSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mc0_WrSect &rArr; mc_spi_WriteSector &rArr; mc_write_block &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_WriteSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>mc0_RdInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_ReadInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>mc0_DevCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mc0_DevCtrl &rArr; mc_spi_DevCtrl &rArr; mc_spi_Init &rArr; mc_control_lock &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>MC0_SPI_SignalEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DrvEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.text)
</UL>
<P><STRONG><a name="[375]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_id2obj))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexDelete
</UL>

<P><STRONG><a name="[370]"></a>rt_ms2tick</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessagePut
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[378]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[37a]"></a>rt_timer_insert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[379]"></a>rt_timer_remove</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_timer_remove))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[35a]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[313]"></a>fs_component_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, fs_mapi.o(i.fs_component_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_component_init
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_rtos_tick_freq
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_cdrive
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[346]"></a>mc_control_bus_speed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_mc_spi.o(i.mc_control_bus_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mc_control_bus_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_set_speed
</UL>

<P><STRONG><a name="[32f]"></a>mc_control_lock</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, fs_mc_spi.o(i.mc_control_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mc_control_lock &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_data
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[331]"></a>mc_control_ss</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_control_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_control_ss
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_spi_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_ocr
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[341]"></a>mc_parse_cid</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, fs_mc_spi.o(i.mc_parse_cid))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[342]"></a>mc_parse_csd</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_parse_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_parse_csd
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[337]"></a>mc_read_block</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, fs_mc_spi.o(i.mc_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc_read_block &rArr; mc_read_data &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wait_busy
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_data
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_ReadSector
</UL>

<P><STRONG><a name="[338]"></a>mc_read_data</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, fs_mc_spi.o(i.mc_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mc_read_data &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
</UL>

<P><STRONG><a name="[33b]"></a>mc_read_ocr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_read_ocr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mc_read_ocr &rArr; mc_send_command &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[333]"></a>mc_read_response</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fs_mc_spi.o(i.mc_read_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mc_read_response &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_ocr
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[335]"></a>mc_read_status</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mc_read_status &rArr; mc_send_command &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_set_speed
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[33a]"></a>mc_receive</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_data
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wait_busy
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_data
</UL>

<P><STRONG><a name="[33d]"></a>mc_send</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_data
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
</UL>

<P><STRONG><a name="[33e]"></a>mc_send_cid</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_send_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mc_send_cid &rArr; mc_read_data &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_data
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[332]"></a>mc_send_command</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fs_mc_spi.o(i.mc_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mc_send_command &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_ocr
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[330]"></a>mc_set_block_len</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_set_block_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mc_set_block_len &rArr; mc_send_command &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[344]"></a>mc_spi_set_speed</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, fs_mc_spi.o(i.mc_spi_set_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc_spi_set_speed &rArr; mc_read_status &rArr; mc_send_command &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_bus_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[339]"></a>mc_wait_busy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mc_wait_busy &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
</UL>

<P><STRONG><a name="[345]"></a>mc_write_block</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, fs_mc_spi.o(i.mc_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc_write_block &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_data
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wait_busy
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_WriteSector
</UL>

<P><STRONG><a name="[334]"></a>mc_write_data</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, fs_mc_spi.o(i.mc_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[2e1]"></a>alloc_clus</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[2e2]"></a>alloc_table_read</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_table_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[2e4]"></a>alloc_table_write</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, fs_fat.o(i.alloc_table_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>

<P><STRONG><a name="[2eb]"></a>bs_read</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, fs_fat.o(i.bs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bs_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[2e6]"></a>cache_fat</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, fs_fat.o(i.cache_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[348]"></a>char_validate</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, fs_fat.o(i.char_validate))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
</UL>

<P><STRONG><a name="[2ee]"></a>clear_clus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.clear_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[2ef]"></a>clus_to_sect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.clus_to_sect))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[2f2]"></a>create_dot_entries</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, fs_fat.o(i.create_dot_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_dot_entries &rArr; entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[2f8]"></a>create_lfn_entry</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, fs_fat.o(i.create_lfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = create_lfn_entry &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[2fa]"></a>create_sfn_entry</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, fs_fat.o(i.create_sfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = create_sfn_entry &rArr; entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[2f7]"></a>entry_flush</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs_fat.o(i.entry_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = entry_flush &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[318]"></a>entry_pos_comp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fs_fat.o(i.entry_pos_comp))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[2f9]"></a>entry_pos_inc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fs_fat.o(i.entry_pos_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[2f3]"></a>entry_read</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.entry_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[319]"></a>entry_type</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.entry_type))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[32e]"></a>fat_crc32</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, fs_fat.o(i.fat_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
</UL>

<P><STRONG><a name="[304]"></a>file_locked</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, fs_fat.o(i.file_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = file_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[2ff]"></a>find_param</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, fs_fat.o(i.find_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_param
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[2f6]"></a>format_date</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fs_fat.o(i.format_date))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[2f5]"></a>format_time</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.format_time))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[317]"></a>frec_allocate</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, fs_fat.o(i.frec_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[307]"></a>frec_delete</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, fs_fat.o(i.frec_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = frec_delete &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[306]"></a>frec_delete_elink</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fs_fat.o(i.frec_delete_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = frec_delete_elink
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_delete
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[31b]"></a>frec_find</STRONG> (Thumb, 500 bytes, Stack size 80 bytes, fs_fat.o(i.frec_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[321]"></a>frec_find_elink</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, fs_fat.o(i.frec_find_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = frec_find_elink &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[303]"></a>frec_next</STRONG> (Thumb, 424 bytes, Stack size 128 bytes, fs_fat.o(i.frec_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_char_cnt
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[30c]"></a>fsinfo_read</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fs_fat.o(i.fsinfo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsinfo_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[2fd]"></a>fsinfo_write</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fs_fat.o(i.fsinfo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[2e3]"></a>get_EOC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fs_fat.o(i.get_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[2e5]"></a>get_fat_sect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.get_fat_sect))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>

<P><STRONG><a name="[30e]"></a>get_root_clus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.get_root_clus))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[324]"></a>lfn_char_cnt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.lfn_char_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
</UL>

<P><STRONG><a name="[311]"></a>link_clus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_fat.o(i.link_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = link_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[31c]"></a>long_ent_hash</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, fs_fat.o(i.long_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = long_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[347]"></a>name_analyse</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, fs_fat.o(i.name_analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_analyse
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[349]"></a>name_basis_gen</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, fs_fat.o(i.name_basis_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_basis_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[322]"></a>name_hash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.name_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[34d]"></a>name_nt_gen</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, fs_fat.o(i.name_nt_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_nt_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[34c]"></a>name_strip</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, fs_fat.o(i.name_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_strip
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[34a]"></a>name_validate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fs_fat.o(i.name_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = name_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
</UL>

<P><STRONG><a name="[310]"></a>path_create</STRONG> (Thumb, 558 bytes, Stack size 144 bytes, fs_fat.o(i.path_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_nt_gen
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[300]"></a>path_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs_fat.o(i.path_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = path_init
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[301]"></a>path_open</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, fs_fat.o(i.path_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[2fe]"></a>path_validate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fs_fat.o(i.path_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = path_validate &rArr; name_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[30d]"></a>read_cache</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fs_fat.o(i.read_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_cache &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[2ec]"></a>read_sector</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_fat.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[31e]"></a>sfn_extract</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fs_fat.o(i.sfn_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sfn_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[31f]"></a>short_ent_hash</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, fs_fat.o(i.short_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = short_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[31d]"></a>sn_chksum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_fat.o(i.sn_chksum))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[305]"></a>unlink_clus</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fs_fat.o(i.unlink_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = unlink_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[2f1]"></a>write_cache</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, fs_fat.o(i.write_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[2fb]"></a>write_sector</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_fat.o(i.write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>

<P><STRONG><a name="[278]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[284]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[50]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
