<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\Exercise_1b_MovingLight.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\Exercise_1b_MovingLight.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Apr 03 22:29:28 2017
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; WST_RXF_Main(short, char**) &rArr; WST_RXF::start() &rArr; WST_TSK::execute() &rArr; WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEvent(unsigned char*, unsigned char, unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[fe]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[13]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">NMI_Handler</a><BR>
 <LI><a href="#[14]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">HardFault_Handler</a><BR>
 <LI><a href="#[15]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MemManage_Handler</a><BR>
 <LI><a href="#[16]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BusFault_Handler</a><BR>
 <LI><a href="#[17]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UsageFault_Handler</a><BR>
 <LI><a href="#[18]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">SVC_Handler</a><BR>
 <LI><a href="#[19]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">DebugMon_Handler</a><BR>
 <LI><a href="#[1a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">PendSV_Handler</a><BR>
 <LI><a href="#[32]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[44]">&lang;Func3&rang;</a> from wst_tmr.o(.text) referenced from wst_tmr.o(.text)
 <LI><a href="#[32]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[33]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3e]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[35]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[36]">DMA_IRQHandler</a> from gpdma_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[38]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[37]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3a]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3c]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3b]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[39]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[52]">SSP1_Control</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[48]">SSP1_GPDMA_Rx_SignalEvent</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[47]">SSP1_GPDMA_Tx_SignalEvent</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[51]">SSP1_GetDataCount</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[53]">SSP1_GetStatus</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[2b]">SSP1_IRQHandler</a> from ssp_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4b]">SSP1_Initialize</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[4d]">SSP1_PowerControl</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[4f]">SSP1_Receive</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[4e]">SSP1_Send</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[50]">SSP1_Transfer</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[4c]">SSP1_Uninitialize</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[4a]">SSP_GetCapabilities</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[49]">SSP_GetVersion</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[18]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">SysTick_Handler</a> from wsttarget.o(CODE_RXF_RUNNING_FAST) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[40]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[1d]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">UART0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3d]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[46]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[55]">Default_OMInitializer::~Default_OMInitializer__deallocating()</a> from default.o(.text) referenced from default.o(.constdata__ZTV21Default_OMInitializer)
 <LI><a href="#[54]">Default_OMInitializer::~Default_OMInitializer()</a> from default.o(.text) referenced from default.o(.constdata__ZTV21Default_OMInitializer)
 <LI><a href="#[45]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[58]">LedBar::cancelTimeout(const WST_TMR*)</a> from ledbar.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[5c]">LedBar::startBehavior()</a> from ledbar.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[57]">LedBar::rootState_entDef()</a> from ledbar.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[59]">LedBar::rootState_processEvent()</a> from ledbar.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[56]">LedBar::~LedBar__deallocating()</a> from ledbar.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[3f]">LedBar::~LedBar()</a> from ledbar.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[3f]">LedBar::~LedBar()</a> from ledbar.o(.text) referenced from default.o(.text)
 <LI><a href="#[5d]">WST_EVT::~WST_EVT__deallocating()</a> from wst_fsm.o(i._ZN7WST_EVTD0Ev) referenced from wst_fsm.o(.constdata__ZTV7WST_EVT)
 <LI><a href="#[61]">WST_FSM::cancelTimeout(const WST_TMR*)</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[60]">WST_FSM::rootState_entDef()</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[62]">WST_FSM::rootState_processEvent()</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[5a]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[5a]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[5b]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from ledbar.o(.constdata__ZTV6LedBar)
 <LI><a href="#[5b]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[5f]">WST_FSM::~WST_FSM__deallocating()</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[5e]">WST_FSM::~WST_FSM()</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[43]">WST_TMR::WST_TMR()</a> from wst_tmr.o(i._ZN7WST_TMRC1Ev) referenced from wst_tmr.o(.text)
 <LI><a href="#[63]">WST_TMR::~WST_TMR__deallocating()</a> from wst_tmm.o(i._ZN7WST_TMRD0Ev) referenced from wst_tmm.o(.constdata__ZTV7WST_TMR)
 <LI><a href="#[42]">WST_TMR::~WST_TMR()</a> from wst_tmm.o(i._ZN7WST_TMRD1Ev) referenced from wst_tmm.o(.constdata__ZTV7WST_TMR)
 <LI><a href="#[42]">WST_TMR::~WST_TMR()</a> from wst_tmm.o(i._ZN7WST_TMRD1Ev) referenced from wst_tmr.o(.text)
 <LI><a href="#[e2]">WST_TSK::~WST_TSK()</a> from wst_tsk.o(.text) referenced from wst_tsk.o(.text)
 <LI><a href="#[68]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[64]">__sti___11_Default_cpp_itsLed</a> from default.o(.text) referenced from default.o(.init_array)
 <LI><a href="#[65]">__sti___11_WST_TMM_cpp_5cffd7cf</a> from wst_tmm.o(.text) referenced from wst_tmm.o(.init_array)
 <LI><a href="#[67]">__sti___11_WST_TMR_cpp_d87a1f05</a> from wst_tmr.o(.text) referenced from wst_tmr.o(.init_array)
 <LI><a href="#[66]">__sti___11_WST_TSK_cpp_b410bc26</a> from wst_tsk.o(.text) referenced from wst_tsk.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[68]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[119]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[11b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[76]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[11c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[11d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[120]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[121]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[70]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[122]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[123]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[124]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[125]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[126]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[127]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[128]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[129]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[130]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[7b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[71]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[131]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[132]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[133]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[134]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[135]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[136]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[6b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[138]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[73]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[75]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[139]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[77]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; WST_RXF_Main(short, char**) &rArr; WST_RXF::start() &rArr; WST_TSK::execute() &rArr; WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEvent(unsigned char*, unsigned char, unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[13a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ff]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[13b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[7e]"></a>Default_initRelations()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, default.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Default_initRelations()
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setShouldDelete(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCB1700::MCB1700()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_OMInitializer::Default_OMInitializer()
</UL>

<P><STRONG><a name="[13c]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[80]"></a>Default_startBehavior()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, default.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Default_startBehavior() &rArr; LedBar::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_MEM::getMemory(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::startBehavior()
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCB1700::MCB1700()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_OMInitializer::Default_OMInitializer()
</UL>

<P><STRONG><a name="[81]"></a>Default_OMInitializer::Default_OMInitializer()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, default.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_startBehavior()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_initRelations()
</UL>

<P><STRONG><a name="[13d]"></a>Default_OMInitializer::Default_OMInitializer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, default.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>Default_OMInitializer::~Default_OMInitializer()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, default.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_OMInitializer::~Default_OMInitializer__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> default.o(.constdata__ZTV21Default_OMInitializer)
</UL>
<P><STRONG><a name="[13e]"></a>Default_OMInitializer::~Default_OMInitializer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, default.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>Default_OMInitializer::~Default_OMInitializer__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, default.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Default_OMInitializer::~Default_OMInitializer__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_OMInitializer::~Default_OMInitializer()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> default.o(.constdata__ZTV21Default_OMInitializer)
</UL>
<P><STRONG><a name="[85]"></a>MCB1700::MCB1700()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mainmcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MCB1700::MCB1700() &rArr; Default_startBehavior() &rArr; LedBar::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_MEM::getMemory(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_startBehavior()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_initRelations()
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
</UL>

<P><STRONG><a name="[13f]"></a>MCB1700::MCB1700__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mainmcb1700.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>WST_RXF_Main(short, char**)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, mainmcb1700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WST_RXF_Main(short, char**) &rArr; WST_RXF::start() &rArr; WST_TSK::execute() &rArr; WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEvent(unsigned char*, unsigned char, unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF::start()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF::initialize()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCB1700::MCB1700()
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>WSTMonitor_sendTypeSize()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wstmonitor_sendtypes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[78]"></a>main</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rxf_behaviorpkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; WST_RXF_Main(short, char**) &rArr; WST_RXF::start() &rArr; WST_TSK::execute() &rArr; WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEvent(unsigned char*, unsigned char, unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF::initialize()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[140]"></a>WST_RXF::WST_RXF()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_rxf.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>WST_RXF::WST_RXF__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_rxf.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>WST_RXF::~WST_RXF()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_rxf.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>WST_RXF::~WST_RXF__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_rxf.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>WST_RXF::initialize()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wst_rxf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WST_RXF::initialize() &rArr; WSTMonitor_init() &rArr; WSTMonitor_sendVersion() &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
</UL>

<P><STRONG><a name="[88]"></a>WST_RXF::start()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wst_rxf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WST_RXF::start() &rArr; WST_TSK::execute() &rArr; WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEvent(unsigned char*, unsigned char, unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
</UL>

<P><STRONG><a name="[144]"></a>WST_ERR::~WST_ERR()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_err.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>WST_ERR::~WST_ERR__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_err.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wst_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::popNullTransition()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::executeOnce()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator new(unsigned)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_Default_cpp_itsLed
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WST_TMR_cpp_d87a1f05
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WST_TSK_cpp_b410bc26
</UL>

<P><STRONG><a name="[146]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[118]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[46]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[91]"></a>LedBar::initStatechart()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ledbar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(WST_TSK*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(int, int, WST_TSK*)
</UL>

<P><STRONG><a name="[83]"></a>LedBar::LedBar(int, int, WST_TSK*)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LedBar::LedBar(int, int, WST_TSK*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::initStatechart()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_Default_cpp_itsLed
</UL>

<P><STRONG><a name="[147]"></a>LedBar::LedBar__sub_object(int, int, WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, ledbar.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>LedBar::LedBar(WST_TSK*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ledbar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::initStatechart()
</UL>

<P><STRONG><a name="[148]"></a>LedBar::LedBar__sub_object(WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ledbar.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>LedBar::cancelTimeouts()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LedBar::cancelTimeouts() &rArr; WST_FSM::cancel(WST_TMR*) &rArr; WST_TMM::stop(WST_TMR*) &rArr; WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::~LedBar()
</UL>

<P><STRONG><a name="[3f]"></a>LedBar::~LedBar()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LedBar::~LedBar() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_MEM::returnMemory(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::cancelTimeouts()
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::~LedBar__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> default.o(.text)
<LI> ledbar.o(.constdata__ZTV6LedBar)
</UL>
<P><STRONG><a name="[149]"></a>LedBar::~LedBar__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ledbar.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>LedBar::~LedBar__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LedBar::~LedBar__deallocating() &rArr; LedBar::~LedBar() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_MEM::returnMemory(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::~LedBar()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledbar.o(.constdata__ZTV6LedBar)
</UL>
<P><STRONG><a name="[98]"></a>LedBar::off()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ledbar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::rootState_processEvent()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::rootState_entDef()
</UL>

<P><STRONG><a name="[9a]"></a>LedBar::on()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ledbar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::rootState_processEvent()
</UL>

<P><STRONG><a name="[14a]"></a>LedBar::getBitNr() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ledbar.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>LedBar::setBitNr(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ledbar.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>LedBar::getDelay() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ledbar.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>LedBar::setDelay(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ledbar.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>LedBar::startBehavior()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LedBar::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_MEM::getMemory(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_startBehavior()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledbar.o(.constdata__ZTV6LedBar)
</UL>
<P><STRONG><a name="[58]"></a>LedBar::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ledbar.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ledbar.o(.constdata__ZTV6LedBar)
</UL>
<P><STRONG><a name="[57]"></a>LedBar::rootState_entDef()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedBar::rootState_entDef()
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::pushNullTransition()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::off()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledbar.o(.constdata__ZTV6LedBar)
</UL>
<P><STRONG><a name="[59]"></a>LedBar::rootState_processEvent()</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, ledbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LedBar::rootState_processEvent() &rArr; WST_FSM::scheduleTimeout(unsigned, char*) &rArr; WST_TMM::start(unsigned, WST_FSM*) &rArr; WST_TMM::processTimeouts() &rArr; WST_TMM::getExpiredTimeout() &rArr; WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::pushNullTransition()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::popNullTransition()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::on()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::off()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledbar.o(.constdata__ZTV6LedBar)
</UL>
<P><STRONG><a name="[9e]"></a>WST_MEM::WST_MEM()</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, wst_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_MEM::WST_MEM()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
</UL>

<P><STRONG><a name="[14e]"></a>WST_MEM::WST_MEM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_mem.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>WST_MEM::getMemory(unsigned)</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, wst_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WST_MEM::getMemory(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::WST_MEM()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::reallocMemory(unsigned, unsigned, void*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>

<P><STRONG><a name="[95]"></a>WST_MEM::returnMemory(void*)</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, wst_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WST_MEM::returnMemory(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::reallocMemory(unsigned, unsigned, void*)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::~LedBar__deallocating()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::cancelEvents(WST_FSM*, short)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::~WST_EVT__deallocating()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM__deallocating()
</UL>

<P><STRONG><a name="[a2]"></a>WST_MEM::reallocMemory(unsigned, unsigned, void*)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wst_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[b9]"></a>SSPx_GPDMA_Tx_SignalEvent</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_GPDMA_Tx_SignalEvent
</UL>

<P><STRONG><a name="[ba]"></a>SSPx_GPDMA_Rx_SignalEvent</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSPx_GPDMA_Rx_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_GPDMA_Rx_SignalEvent
</UL>

<P><STRONG><a name="[47]"></a>SSP1_GPDMA_Tx_SignalEvent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP1_GPDMA_Tx_SignalEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GPDMA_Tx_SignalEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>SSP1_GPDMA_Rx_SignalEvent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSP1_GPDMA_Rx_SignalEvent &rArr; SSPx_GPDMA_Rx_SignalEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GPDMA_Rx_SignalEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>SSP1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSP1_IRQHandler &rArr; SSPx_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>GPDMA_Initialize</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
</UL>

<P><STRONG><a name="[aa]"></a>GPDMA_Uninitialize</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Uninitialize
</UL>

<P><STRONG><a name="[a8]"></a>GPDMA_PeripheralSelect</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_PeripheralSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
</UL>

<P><STRONG><a name="[af]"></a>GPDMA_ChannelConfigure</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Channel_active_flag
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Channel_active_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Transfer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Receive
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Send
</UL>

<P><STRONG><a name="[bf]"></a>GPDMA_ChannelEnable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpdma_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Channel_active_flag
</UL>

<P><STRONG><a name="[ac]"></a>GPDMA_ChannelDisable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_ChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Channel_active_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_PowerControl
</UL>

<P><STRONG><a name="[14f]"></a>GPDMA_ChannelGetStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpdma_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>GPDMA_ChannelGetCount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GetDataCount
</UL>

<P><STRONG><a name="[36]"></a>DMA_IRQHandler</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Channel_active_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>GPIO_PortClock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpio_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>GPIO_SetDir</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, gpio_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
</UL>

<P><STRONG><a name="[b6]"></a>GPIO_PinWrite</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gpio_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
</UL>

<P><STRONG><a name="[151]"></a>GPIO_PinRead</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>GPIO_PortWrite</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, gpio_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>GPIO_PortRead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>PIN_Configure</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, pin_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIN_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Uninitialize
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
</UL>

<P><STRONG><a name="[154]"></a>PIN_ConfigureTPIU</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pin_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>PIN_ConfigureI2C0Pins</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pin_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, system_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[40]"></a>SystemInit</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>WST_FSM::WST_FSM()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(WST_TSK*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(int, int, WST_TSK*)
</UL>

<P><STRONG><a name="[156]"></a>WST_FSM::WST_FSM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>WST_FSM::cleanUpRelations()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
</UL>

<P><STRONG><a name="[c2]"></a>WST_FSM::cancelEventsAndTimeouts()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_MEM::returnMemory(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getInst()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::cancelEvents(WST_FSM*, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
</UL>

<P><STRONG><a name="[5e]"></a>WST_FSM::~WST_FSM()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_MEM::returnMemory(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancelEventsAndTimeouts()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cleanUpRelations()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::~LedBar()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[157]"></a>WST_FSM::~WST_FSM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>WST_FSM::~WST_FSM__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WST_FSM::~WST_FSM__deallocating() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_MEM::returnMemory(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[94]"></a>WST_FSM::cancel(WST_TMR*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WST_FSM::cancel(WST_TMR*) &rArr; WST_TMM::stop(WST_TMR*) &rArr; WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getInst()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::rootState_processEvent()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::cancelTimeouts()
</UL>

<P><STRONG><a name="[158]"></a>WST_FSM::destroy()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>WST_FSM::endBehavior()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>WST_FSM::gen(WST_EVT*, bool)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::send(WST_EVT*, const void*&)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::send(WST_EVT*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
</UL>

<P><STRONG><a name="[ca]"></a>WST_FSM::takeEvent(WST_EVT*)</STRONG> (Thumb, 582 bytes, Stack size 88 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEvent(unsigned char*, unsigned char, unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTimeOut(unsigned char*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEvent(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::executeOnce()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::handleTrigger(WST_EVT*)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::handleSyncEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[d0]"></a>WST_FSM::handleSyncEvent(WST_EVT*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wst_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[99]"></a>WST_FSM::popNullTransition()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WST_FSM::popNullTransition()
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::rootState_processEvent()
</UL>

<P><STRONG><a name="[97]"></a>WST_FSM::pushNullTransition()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::rootState_processEvent()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::rootState_entDef()
</UL>

<P><STRONG><a name="[60]"></a>WST_FSM::rootState_entDef()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[61]"></a>WST_FSM::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[62]"></a>WST_FSM::rootState_processEvent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[9b]"></a>WST_FSM::scheduleTimeout(unsigned, char*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WST_FSM::scheduleTimeout(unsigned, char*) &rArr; WST_TMM::start(unsigned, WST_FSM*) &rArr; WST_TMM::processTimeouts() &rArr; WST_TMM::getExpiredTimeout() &rArr; WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getInst()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::rootState_processEvent()
</UL>

<P><STRONG><a name="[7f]"></a>WST_FSM::setShouldDelete(bool)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_initRelations()
</UL>

<P><STRONG><a name="[90]"></a>WST_FSM::setTask(WST_TSK*, bool)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(WST_TSK*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(int, int, WST_TSK*)
</UL>

<P><STRONG><a name="[96]"></a>WST_FSM::startBehavior()</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WST_FSM::startBehavior() &rArr; WST_MEM::getMemory(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::startBehavior()
</UL>

<P><STRONG><a name="[15a]"></a>WST_FSM::terminate()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>WST_FSM::send(WST_EVT*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WST_FSM::send(WST_EVT*) &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ledbar.o(.constdata__ZTV6LedBar)
<LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[5b]"></a>WST_FSM::send(WST_EVT*, const void*&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WST_FSM::send(WST_EVT*, const void*&) &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ledbar.o(.constdata__ZTV6LedBar)
<LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[d2]"></a>WST_FSM::handleTrigger(WST_EVT*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wst_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[e1]"></a>WST_MSQ::WST_MSQ()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wst_msq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK()
</UL>

<P><STRONG><a name="[15b]"></a>WST_MSQ::WST_MSQ__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_msq.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>WST_MSQ::~WST_MSQ()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_msq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
</UL>

<P><STRONG><a name="[15c]"></a>WST_MSQ::~WST_MSQ__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_msq.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>WST_MSQ::cancelEvents(WST_FSM*, short)</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, wst_msq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_MEM::returnMemory(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancelEventsAndTimeouts()
</UL>

<P><STRONG><a name="[d3]"></a>WST_MSQ::get()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wst_msq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WST_MSQ::get()
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::executeOnce()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>

<P><STRONG><a name="[c9]"></a>WST_MSQ::put(WST_EVT*, bool)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wst_msq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WST_MSQ::put(WST_EVT*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
</UL>

<P><STRONG><a name="[15d]"></a>WST_MSQ::startMSQ()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_msq.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>WST_TMM::getInst()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wst_tmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::cancel()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::executeOnce()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancelEventsAndTimeouts()
</UL>

<P><STRONG><a name="[d4]"></a>WST_TMM::WST_TMM()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_TMM::WST_TMM()
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::initTimeoutLists()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WST_TMM_cpp_5cffd7cf
</UL>

<P><STRONG><a name="[15e]"></a>WST_TMM::WST_TMM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_tmm.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>WST_TMM::WSTTimeToTicks(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wst_tmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
</UL>

<P><STRONG><a name="[c7]"></a>WST_TMM::stop(WST_TMR*)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WST_TMM::stop(WST_TMR*) &rArr; WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::cancel()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
</UL>

<P><STRONG><a name="[c4]"></a>WST_TMM::cancelEvents(WST_FSM*)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_MEM::returnMemory(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::cancelEvents(WST_FSM*, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancelEventsAndTimeouts()
</UL>

<P><STRONG><a name="[d8]"></a>WST_TMM::getExpiredTimeout()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WST_TMM::getExpiredTimeout() &rArr; WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
</UL>

<P><STRONG><a name="[da]"></a>WST_TMM::tick(short)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wst_tmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
</UL>

<P><STRONG><a name="[d9]"></a>WST_TMM::processTimeouts()</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WST_TMM::processTimeouts() &rArr; WST_TMM::getExpiredTimeout() &rArr; WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::tick(short)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getExpiredTimeout()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::executeOnce()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
</UL>

<P><STRONG><a name="[d1]"></a>WST_TMM::start(unsigned, WST_FSM*)</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WST_TMM::start(unsigned, WST_FSM*) &rArr; WST_TMM::processTimeouts() &rArr; WST_TMM::getExpiredTimeout() &rArr; WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator new(unsigned)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::WSTTimeToTicks(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
</UL>

<P><STRONG><a name="[dd]"></a>WST_TMM::initMutex()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wst_tmm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX()
</UL>

<P><STRONG><a name="[e0]"></a>WST_TSK::WST_TSK()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_TSK::WST_TSK()
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::WST_MSQ()
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WST_TSK_cpp_b410bc26
</UL>

<P><STRONG><a name="[15f]"></a>WST_TSK::WST_TSK__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_tsk.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>WST_TSK::cleanUpRelations()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_tsk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
</UL>

<P><STRONG><a name="[e2]"></a>WST_TSK::~WST_TSK()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_TSK::~WST_TSK()
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::cleanUpRelations()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::~WST_MSQ()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::executeOnce()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tsk.o(.text)
</UL>
<P><STRONG><a name="[160]"></a>WST_TSK::~WST_TSK__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_tsk.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>WST_TSK::execute()</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WST_TSK::execute() &rArr; WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEvent(unsigned char*, unsigned char, unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_pollIncomingData()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::get()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getInst()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF::start()
</UL>

<P><STRONG><a name="[e7]"></a>WST_TSK::executeOnce()</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, wst_tsk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::get()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getInst()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[d6]"></a>WST_MTX::WST_MTX_enterCriticalRegion()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wst_mtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX(const WST_MTX*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getExpiredTimeout()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
</UL>

<P><STRONG><a name="[df]"></a>WST_MTX::WST_MTX()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::initMutex()
</UL>

<P><STRONG><a name="[161]"></a>WST_MTX::WST_MTX__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>WST_MTX::WST_MTX(const WST_MTX*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wst_mtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
</UL>

<P><STRONG><a name="[162]"></a>WST_MTX::WST_MTX__sub_object(const WST_MTX*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>WST_MTX::WST_MTX_exitCriticalRegion()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wst_mtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_MTX::WST_MTX_exitCriticalRegion()
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::~WST_MTX_inUse()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::~WST_MTX()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getExpiredTimeout()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
</UL>

<P><STRONG><a name="[e9]"></a>WST_MTX::~WST_MTX()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::~WST_MTX_inUse()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
</UL>

<P><STRONG><a name="[163]"></a>WST_MTX::~WST_MTX__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wst_mtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::~WST_MTX()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX(const WST_MTX*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
</UL>

<P><STRONG><a name="[164]"></a>WST_MTX_inUse::WST_MTX_inUse__sub_object(const WST_MTX*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>WST_MTX_inUse::~WST_MTX_inUse()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::~WST_MTX()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
</UL>

<P><STRONG><a name="[165]"></a>WST_MTX_inUse::~WST_MTX_inUse__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>WST_TMR::operator delete (void*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wst_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WST_TMR::operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::~WST_TMR__deallocating()
</UL>

<P><STRONG><a name="[db]"></a>WST_TMR::operator new(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wst_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WST_TMR::operator new(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
</UL>

<P><STRONG><a name="[ed]"></a>WST_TMR::cancel()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getInst()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
</UL>

<P><STRONG><a name="[d5]"></a>WST_TMR::initTimeoutLists()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wst_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::WST_TMM()
</UL>

<P><STRONG><a name="[10b]"></a>WSTMonitor_IO_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wstmonitorio_keil_cortexm3_itm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[107]"></a>WSTMonitor_IO_PutByte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wstmonitorio_keil_cortexm3_itm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>

<P><STRONG><a name="[10d]"></a>WSTMonitor_IO_GetByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wstmonitorio_keil_cortexm3_itm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>

<P><STRONG><a name="[110]"></a>WSTMonitorIO_receiveIncomingData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wstmonitorio_keil_cortexm3_itm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_pollIncomingData()
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[166]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::reallocMemory(unsigned, unsigned, void*)
</UL>

<P><STRONG><a name="[f0]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[167]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_PowerControl
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func3&rang;
</UL>

<P><STRONG><a name="[8d]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[8c]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[f4]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[72]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[16f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[170]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[f6]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[6f]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[f8]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[b]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[f9]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[74]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[fb]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[f5]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[79]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[fa]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[f7]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[fc]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[172]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[174]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[100]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[101]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[104]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[103]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[105]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[106]"></a>WSTMonitor_sendDataStruct(void*, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_IO_PutByte
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendBufferReset()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendError()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendOpCall(void*, void*, unsigned short, void*, void*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendVersion()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendHighwater()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendFSMSize()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTimeOut(unsigned char*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEvent(unsigned char*, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[108]"></a>WSTMonitor_sendFSMSize()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendFSMSize() &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[109]"></a>WSTMonitor_sendHighwater()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendHighwater() &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[10a]"></a>WSTMonitor_sendVersion()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendVersion() &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[8a]"></a>WSTMonitor_init()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WSTMonitor_init() &rArr; WSTMonitor_sendVersion() &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_IO_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendVersion()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendHighwater()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendFSMSize()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF::initialize()
</UL>

<P><STRONG><a name="[10f]"></a>WSTMonitor_resumeRxf()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>

<P><STRONG><a name="[10e]"></a>WSTMonitor_suspendRxf()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>

<P><STRONG><a name="[e6]"></a>WSTMonitor_performCmd()</STRONG> (Thumb, 648 bytes, Stack size 40 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WSTMonitor_performCmd() &rArr; WST_MEM::getMemory(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_IO_GetByte
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_suspendRxf()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_resumeRxf()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>

<P><STRONG><a name="[e5]"></a>WSTMonitor_pollIncomingData()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WSTMonitor_pollIncomingData()
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitorIO_receiveIncomingData
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>

<P><STRONG><a name="[111]"></a>WSTMonitor_sendInit(void*, unsigned short, void*)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>

<P><STRONG><a name="[112]"></a>WSTMonitor_sendDestroy(void*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>

<P><STRONG><a name="[113]"></a>WSTMonitor_sendOpCall(void*, void*, unsigned short, void*, void*)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
</UL>

<P><STRONG><a name="[114]"></a>WSTMonitor_isFiltered(const void*)</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTimeOut(unsigned char*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEvent(unsigned char*, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[cf]"></a>WSTMonitor_sendEvent(unsigned char*, unsigned char, unsigned char*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WSTMonitor_sendEvent(unsigned char*, unsigned char, unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_isFiltered(const void*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[ce]"></a>WSTMonitor_sendTimeOut(unsigned char*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WSTMonitor_sendTimeOut(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_isFiltered(const void*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[115]"></a>WSTMonitor_sendError()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>

<P><STRONG><a name="[116]"></a>WSTMonitor_sendBufferReset()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wstmonitor.o(CODE_ANIM_RUNNING_FAST), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>

<P><STRONG><a name="[9f]"></a>WSTTarget_enterCriticalRegion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wsttarget.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator new(unsigned)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator delete (void*)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::get()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::cancelEvents(WST_FSM*, short)
</UL>

<P><STRONG><a name="[a0]"></a>WSTTarget_exitCriticalRegion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wsttarget.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator new(unsigned)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator delete (void*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::get()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::cancelEvents(WST_FSM*, short)
</UL>

<P><STRONG><a name="[89]"></a>WSTTarget_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, wsttarget.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WSTTarget_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>WSTTarget_Cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wsttarget.o(CODE_RXF_RUNNING_FAST), UNUSED)

<P><STRONG><a name="[178]"></a>os_def_interrupt()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wsttarget.o(CODE_RXF_RUNNING_FAST), UNUSED)

<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wsttarget.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_incrementRxfTicks()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>WSTRTOS_incrementRxfTicks()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wstrtos.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[cd]"></a>WSTRTOS_getRxfTicks()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wstrtos.o(CODE_RXF_RUNNING_FAST))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendOpCall(void*, void*, unsigned short, void*, void*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::WST_TMM()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[cb]"></a>WST_EVT::WST_EVT()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wst_fsm.o(i._ZN7WST_EVTC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[179]"></a>WST_EVT::WST_EVT__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_fsm.o(i._ZN7WST_EVTC1Ev), UNUSED)

<P><STRONG><a name="[5d]"></a>WST_EVT::~WST_EVT__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wst_fsm.o(i._ZN7WST_EVTD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WST_EVT::~WST_EVT__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_fsm.o(.constdata__ZTV7WST_EVT)
</UL>
<P><STRONG><a name="[43]"></a>WST_TMR::WST_TMR()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wst_tmr.o(i._ZN7WST_TMRC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> wst_tmr.o(.text)
</UL>
<P><STRONG><a name="[17a]"></a>WST_TMR::WST_TMR__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_tmr.o(i._ZN7WST_TMRC1Ev), UNUSED)

<P><STRONG><a name="[63]"></a>WST_TMR::~WST_TMR__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_tmm.o(i._ZN7WST_TMRD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WST_TMR::~WST_TMR__deallocating() &rArr; WST_TMR::operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator delete (void*)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::~WST_TMR()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tmm.o(.constdata__ZTV7WST_TMR)
</UL>
<P><STRONG><a name="[42]"></a>WST_TMR::~WST_TMR()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wst_tmm.o(i._ZN7WST_TMRD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::~WST_TMR__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wst_tmr.o(.text)
<LI> wst_tmm.o(.constdata__ZTV7WST_TMR)
</UL>
<P><STRONG><a name="[17b]"></a>WST_TMR::~WST_TMR__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_tmm.o(i._ZN7WST_TMRD1Ev), UNUSED)

<P><STRONG><a name="[82]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_OMInitializer::~Default_OMInitializer__deallocating()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::executeOnce()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>

<P><STRONG><a name="[a1]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
</UL>

<P><STRONG><a name="[de]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::initMutex()
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WST_TMR_cpp_d87a1f05
</UL>

<P><STRONG><a name="[9d]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[64]"></a>__sti___11_Default_cpp_itsLed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, default.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___11_Default_cpp_itsLed &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBar::LedBar(int, int, WST_TSK*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> default.o(.init_array)
</UL>
<P><STRONG><a name="[b5]"></a>GetSSPClockFreq</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetSSPClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
</UL>

<P><STRONG><a name="[49]"></a>SSP_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>SSP_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssp_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>SSPx_Initialize</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SSPx_Initialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_PeripheralSelect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Initialize
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_Configure
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Initialize
</UL>

<P><STRONG><a name="[a9]"></a>SSPx_Uninitialize</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SSPx_Uninitialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Uninitialize
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Uninitialize
</UL>

<P><STRONG><a name="[ab]"></a>SSPx_PowerControl</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSPx_PowerControl &rArr; GPDMA_ChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelDisable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_PowerControl
</UL>

<P><STRONG><a name="[ae]"></a>SSPx_Send</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSPx_Send &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Send
</UL>

<P><STRONG><a name="[b0]"></a>SSPx_Receive</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSPx_Receive &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Receive
</UL>

<P><STRONG><a name="[b1]"></a>SSPx_Transfer</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSPx_Transfer &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Transfer
</UL>

<P><STRONG><a name="[b2]"></a>SSPx_GetDataCount</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSPx_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_GetDataCount
</UL>

<P><STRONG><a name="[b4]"></a>SSPx_Control</STRONG> (Thumb, 1314 bytes, Stack size 56 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSPx_Control &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelDisable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSSPClockFreq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_Configure
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Control
</UL>

<P><STRONG><a name="[b8]"></a>SSPx_GetStatus</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SSPx_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_GetStatus
</UL>

<P><STRONG><a name="[bb]"></a>SSPx_IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSPx_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>SSP1_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SSP1_Initialize &rArr; SSPx_Initialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>SSP1_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SSP1_Uninitialize &rArr; SSPx_Uninitialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>SSP1_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SSP1_PowerControl &rArr; SSPx_PowerControl &rArr; GPDMA_ChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>SSP1_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSP1_Send &rArr; SSPx_Send &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>SSP1_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSP1_Receive &rArr; SSPx_Receive &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>SSP1_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSP1_Transfer &rArr; SSPx_Transfer &rArr; GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>SSP1_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSP1_GetDataCount &rArr; SSPx_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>SSP1_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSP1_Control &rArr; SSPx_Control &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>SSP1_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SSP1_GetStatus &rArr; SSPx_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPx_PowerControl
</UL>

<P><STRONG><a name="[bd]"></a>Set_Channel_active_flag</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_Channel_active_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelEnable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>

<P><STRONG><a name="[bc]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Uninitialize
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Initialize
</UL>

<P><STRONG><a name="[be]"></a>Clear_Channel_active_flag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpdma_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelDisable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>

<P><STRONG><a name="[65]"></a>__sti___11_WST_TMM_cpp_5cffd7cf</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___11_WST_TMM_cpp_5cffd7cf &rArr; WST_TMM::WST_TMM()
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::WST_TMM()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tmm.o(.init_array)
</UL>
<P><STRONG><a name="[66]"></a>__sti___11_WST_TSK_cpp_b410bc26</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___11_WST_TSK_cpp_b410bc26 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tsk.o(.init_array)
</UL>
<P><STRONG><a name="[44]"></a>&lang;Func3&rang;</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wst_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = &lang;Func3&rang; &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tmr.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>__sti___11_WST_TMR_cpp_d87a1f05</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wst_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___11_WST_TMR_cpp_d87a1f05 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tmr.o(.init_array)
</UL>
<P><STRONG><a name="[45]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
