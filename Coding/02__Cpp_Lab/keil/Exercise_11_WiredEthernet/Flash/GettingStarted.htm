<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\GettingStarted.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\GettingStarted.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed May 03 16:33:20 2017
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; WSTRTOS_Init() &rArr; WST_RXF_Main(short, char**) &rArr; TestBuilder::TestBuilder(WST_TSK*) &rArr; EthernetController::EthernetController(WST_TSK*) &rArr; connect &rArr; net_tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[205]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[166]">WST_OSW_MEM_malloc(unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[105]">WST_MEM::getMemory(unsigned)</a><BR>
 <LI><a href="#[3f]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">rt_alloc_box</a><BR>
 <LI><a href="#[1e9]">net_sys_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e9]">net_sys_error</a><BR>
 <LI><a href="#[13]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">NMI_Handler</a><BR>
 <LI><a href="#[14]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">HardFault_Handler</a><BR>
 <LI><a href="#[15]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MemManage_Handler</a><BR>
 <LI><a href="#[16]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BusFault_Handler</a><BR>
 <LI><a href="#[17]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UsageFault_Handler</a><BR>
 <LI><a href="#[19]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">DebugMon_Handler</a><BR>
 <LI><a href="#[32]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ADC_IRQHandler</a><BR>
 <LI><a href="#[24b]">net_strtoupper</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24b]">net_strtoupper</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[45]">&lang;Func3&rang;</a> from wst_tmr.o(.text) referenced from wst_tmr.o(.text)
 <LI><a href="#[32]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[33]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3e]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[35]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[81]">Control</a> from emac_lpc17xx.o(.text) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[80]">ControlTimer</a> from emac_lpc17xx.o(.text) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[36]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[38]">ENET_IRQHandler</a> from emac_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[74]">GetCapabilities</a> from emac_lpc17xx.o(.text) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[8b]">GetLinkInfo</a> from phy_dp83848c.o(.text) referenced from phy_dp83848c.o(.constdata)
 <LI><a href="#[8a]">GetLinkState</a> from phy_dp83848c.o(.text) referenced from phy_dp83848c.o(.constdata)
 <LI><a href="#[78]">GetMacAddress</a> from emac_lpc17xx.o(.text) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[7d]">GetRxFrameSize</a> from emac_lpc17xx.o(.text) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[7e]">GetRxFrameTime</a> from emac_lpc17xx.o(.text) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[7f]">GetTxFrameTime</a> from emac_lpc17xx.o(.text) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[73]">GetVersion</a> from emac_lpc17xx.o(.text) referenced 2 times from emac_lpc17xx.o(.constdata)
 <LI><a href="#[14]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[37]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[75]">Initialize</a> from emac_lpc17xx.o(.text) referenced 2 times from emac_lpc17xx.o(.constdata)
 <LI><a href="#[3a]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[82]">PHY_Read</a> from emac_lpc17xx.o(.text) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[83]">PHY_Write</a> from emac_lpc17xx.o(.text) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[2c]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3c]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[77]">PowerControl</a> from emac_lpc17xx.o(.text) referenced 2 times from emac_lpc17xx.o(.constdata)
 <LI><a href="#[3b]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[39]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7c]">ReadFrame</a> from emac_lpc17xx.o(.text) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[12]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7b]">SendFrame</a> from emac_lpc17xx.o(.text) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[7a]">SetAddressFilter</a> from emac_lpc17xx.o(.text) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[88]">SetInterface</a> from phy_dp83848c.o(.text) referenced from phy_dp83848c.o(.constdata)
 <LI><a href="#[79]">SetMacAddress</a> from emac_lpc17xx.o(.text) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[89]">SetMode</a> from phy_dp83848c.o(.text) referenced from phy_dp83848c.o(.constdata)
 <LI><a href="#[1b]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[1d]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">UART0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3d]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[76]">Uninitialize</a> from emac_lpc17xx.o(.text) referenced 2 times from emac_lpc17xx.o(.constdata)
 <LI><a href="#[17]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[51]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[1b9]">WST_Monitor_receiveTask(void*)</a> from wstmonitor.o(.text) referenced from wstmonitor.o(.text)
 <LI><a href="#[188]">WST_OSW_TMM_timerCallBack(const void*)</a> from wst_osw.o(.text) referenced from wst_osw.o(.text)
 <LI><a href="#[a3]">TestBuilder::startBehavior()</a> from testbuilder.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[a4]">TestBuilder::destroy()</a> from testbuilder.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[9d]">TestBuilder::~TestBuilder__deallocating()</a> from testbuilder.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[9c]">TestBuilder::~TestBuilder()</a> from testbuilder.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[a6]">evReceivedData::~evReceivedData__deallocating()</a> from examplepkg.o(i._ZN14evReceivedDataD0Ev) referenced from examplepkg.o(.constdata__ZTV14evReceivedData)
 <LI><a href="#[a5]">evReceivedData::~evReceivedData()</a> from examplepkg.o(i._ZN14evReceivedDataD1Ev) referenced from examplepkg.o(.constdata__ZTV14evReceivedData)
 <LI><a href="#[ab]">ActiveController::cancelTimeout(const WST_TMR*)</a> from activecontroller.o(.text) referenced from activecontroller.o(.constdata__ZTV16ActiveController)
 <LI><a href="#[aa]">ActiveController::startBehavior()</a> from activecontroller.o(.text) referenced from activecontroller.o(.constdata__ZTV16ActiveController)
 <LI><a href="#[ac]">ActiveController::rootState_entDef()</a> from activecontroller.o(.text) referenced from activecontroller.o(.constdata__ZTV16ActiveController)
 <LI><a href="#[ad]">ActiveController::rootState_processEvent()</a> from activecontroller.o(.text) referenced from activecontroller.o(.constdata__ZTV16ActiveController)
 <LI><a href="#[a9]">ActiveController::~ActiveController__deallocating()</a> from activecontroller.o(.text) referenced from activecontroller.o(.constdata__ZTV16ActiveController)
 <LI><a href="#[a8]">ActiveController::~ActiveController()</a> from activecontroller.o(.text) referenced from activecontroller.o(.constdata__ZTV16ActiveController)
 <LI><a href="#[b6]">EthernetController::cancelTimeout(const WST_TMR*)</a> from ethernetcontroller.o(.text) referenced from ethernetcontroller.o(.constdata__ZTV18EthernetController)
 <LI><a href="#[b5]">EthernetController::startBehavior()</a> from ethernetcontroller.o(.text) referenced from ethernetcontroller.o(.constdata__ZTV18EthernetController)
 <LI><a href="#[b7]">EthernetController::rootState_entDef()</a> from ethernetcontroller.o(.text) referenced from ethernetcontroller.o(.constdata__ZTV18EthernetController)
 <LI><a href="#[b8]">EthernetController::rootState_processEvent()</a> from ethernetcontroller.o(.text) referenced from ethernetcontroller.o(.constdata__ZTV18EthernetController)
 <LI><a href="#[b4]">EthernetController::~EthernetController__deallocating()</a> from ethernetcontroller.o(.text) referenced from ethernetcontroller.o(.constdata__ZTV18EthernetController)
 <LI><a href="#[b3]">EthernetController::~EthernetController()</a> from ethernetcontroller.o(.text) referenced from ethernetcontroller.o(.constdata__ZTV18EthernetController)
 <LI><a href="#[c1]">SequentialController::cancelTimeout(const WST_TMR*)</a> from sequentialcontroller.o(.text) referenced from sequentialcontroller.o(.constdata__ZTV20SequentialController)
 <LI><a href="#[c0]">SequentialController::startBehavior()</a> from sequentialcontroller.o(.text) referenced from sequentialcontroller.o(.constdata__ZTV20SequentialController)
 <LI><a href="#[c2]">SequentialController::rootState_entDef()</a> from sequentialcontroller.o(.text) referenced from sequentialcontroller.o(.constdata__ZTV20SequentialController)
 <LI><a href="#[c3]">SequentialController::rootState_processEvent()</a> from sequentialcontroller.o(.text) referenced from sequentialcontroller.o(.constdata__ZTV20SequentialController)
 <LI><a href="#[bf]">SequentialController::~SequentialController__deallocating()</a> from sequentialcontroller.o(.text) referenced from sequentialcontroller.o(.constdata__ZTV20SequentialController)
 <LI><a href="#[be]">SequentialController::~SequentialController()</a> from sequentialcontroller.o(.text) referenced from sequentialcontroller.o(.constdata__ZTV20SequentialController)
 <LI><a href="#[50]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[cd]">LED::startBehavior()</a> from led.o(.text) referenced from led.o(.constdata__ZTV3LED)
 <LI><a href="#[cb]">LED::rootState_entDef()</a> from led.o(.text) referenced from led.o(.constdata__ZTV3LED)
 <LI><a href="#[cc]">LED::rootState_processEvent()</a> from led.o(.text) referenced from led.o(.constdata__ZTV3LED)
 <LI><a href="#[ca]">LED::~LED__deallocating()</a> from led.o(.text) referenced from led.o(.constdata__ZTV3LED)
 <LI><a href="#[c9]">LED::~LED()</a> from led.o(.text) referenced from led.o(.constdata__ZTV3LED)
 <LI><a href="#[cf]">evOn::~evOn__deallocating()</a> from examplepkg.o(i._ZN4evOnD0Ev) referenced from examplepkg.o(.constdata__ZTV4evOn)
 <LI><a href="#[ce]">evOn::~evOn()</a> from examplepkg.o(i._ZN4evOnD1Ev) referenced from examplepkg.o(.constdata__ZTV4evOn)
 <LI><a href="#[d2]">evOff::~evOff__deallocating()</a> from examplepkg.o(i._ZN5evOffD0Ev) referenced from examplepkg.o(.constdata__ZTV5evOff)
 <LI><a href="#[d1]">evOff::~evOff()</a> from examplepkg.o(i._ZN5evOffD1Ev) referenced from examplepkg.o(.constdata__ZTV5evOff)
 <LI><a href="#[d4]">WST_EVT::~WST_EVT__deallocating()</a> from examplepkg.o(i._ZN7WST_EVTD0Ev) referenced from examplepkg.o(.constdata__ZTV7WST_EVT)
 <LI><a href="#[9f]">WST_FSM::cancelTimeout(const WST_TMR*)</a> from wst_fsm.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[9f]">WST_FSM::cancelTimeout(const WST_TMR*)</a> from wst_fsm.o(.text) referenced from led.o(.constdata__ZTV3LED)
 <LI><a href="#[9f]">WST_FSM::cancelTimeout(const WST_TMR*)</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[9e]">WST_FSM::rootState_entDef()</a> from wst_fsm.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[9e]">WST_FSM::rootState_entDef()</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[a0]">WST_FSM::rootState_processEvent()</a> from wst_fsm.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[a0]">WST_FSM::rootState_processEvent()</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[a1]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[a1]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from activecontroller.o(.constdata__ZTV16ActiveController)
 <LI><a href="#[a1]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from ethernetcontroller.o(.constdata__ZTV18EthernetController)
 <LI><a href="#[a1]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from sequentialcontroller.o(.constdata__ZTV20SequentialController)
 <LI><a href="#[a1]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from led.o(.constdata__ZTV3LED)
 <LI><a href="#[a1]">WST_FSM::send(WST_EVT*)</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[a2]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from testbuilder.o(.constdata__ZTV11TestBuilder)
 <LI><a href="#[a2]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from activecontroller.o(.constdata__ZTV16ActiveController)
 <LI><a href="#[a2]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from ethernetcontroller.o(.constdata__ZTV18EthernetController)
 <LI><a href="#[a2]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from sequentialcontroller.o(.constdata__ZTV20SequentialController)
 <LI><a href="#[a2]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from led.o(.constdata__ZTV3LED)
 <LI><a href="#[a2]">WST_FSM::send(WST_EVT*, const void*&)</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[d6]">WST_FSM::~WST_FSM__deallocating()</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[d5]">WST_FSM::~WST_FSM()</a> from wst_fsm.o(.text) referenced from wst_fsm.o(.constdata__ZTV7WST_FSM)
 <LI><a href="#[42]">WST_MSQ::~WST_MSQ()</a> from wst_msq.o(.text) referenced from wst_osw.o(.text)
 <LI><a href="#[44]">WST_TMR::WST_TMR()</a> from wst_tmr.o(i._ZN7WST_TMRC1Ev) referenced from wst_tmr.o(.text)
 <LI><a href="#[d7]">WST_TMR::~WST_TMR__deallocating()</a> from wst_tmm.o(i._ZN7WST_TMRD0Ev) referenced from wst_tmm.o(.constdata__ZTV7WST_TMR)
 <LI><a href="#[43]">WST_TMR::~WST_TMR()</a> from wst_tmm.o(i._ZN7WST_TMRD1Ev) referenced from wst_tmm.o(.constdata__ZTV7WST_TMR)
 <LI><a href="#[43]">WST_TMR::~WST_TMR()</a> from wst_tmm.o(i._ZN7WST_TMRD1Ev) referenced from wst_tmr.o(.text)
 <LI><a href="#[41]">WST_TSK::task_start(void*)</a> from wst_tsk.o(.text) referenced from wst_osw.o(.text)
 <LI><a href="#[d8]">WST_TSK::~WST_TSK__deallocating()</a> from wst_tsk.o(.text) referenced from wst_tsk.o(.constdata__ZTV7WST_TSK)
 <LI><a href="#[46]">WST_TSK::~WST_TSK()</a> from wst_tsk.o(.text) referenced from wst_tsk.o(.constdata__ZTV7WST_TSK)
 <LI><a href="#[46]">WST_TSK::~WST_TSK()</a> from wst_tsk.o(.text) referenced from wstrtos.o(.text)
 <LI><a href="#[da]">evToggle::~evToggle__deallocating()</a> from examplepkg.o(i._ZN8evToggleD0Ev) referenced from examplepkg.o(.constdata__ZTV8evToggle)
 <LI><a href="#[d9]">evToggle::~evToggle()</a> from examplepkg.o(i._ZN8evToggleD1Ev) referenced from examplepkg.o(.constdata__ZTV8evToggle)
 <LI><a href="#[a7]">evReceivedData::isTypeOf(short) const</a> from examplepkg.o(.text) referenced from examplepkg.o(.constdata__ZTV14evReceivedData)
 <LI><a href="#[d0]">evOn::isTypeOf(short) const</a> from examplepkg.o(.text) referenced from examplepkg.o(.constdata__ZTV4evOn)
 <LI><a href="#[d3]">evOff::isTypeOf(short) const</a> from examplepkg.o(.text) referenced from examplepkg.o(.constdata__ZTV5evOff)
 <LI><a href="#[db]">evToggle::isTypeOf(short) const</a> from examplepkg.o(.text) referenced from examplepkg.o(.constdata__ZTV8evToggle)
 <LI><a href="#[b1]">thunk{-64} to ActiveController::cancelTimeout(const WST_TMR*)</a> from activecontroller.o(.text) referenced from activecontroller.o(.constdata__ZTV16ActiveController)
 <LI><a href="#[b0]">thunk{-64} to ActiveController::rootState_entDef()</a> from activecontroller.o(.text) referenced from activecontroller.o(.constdata__ZTV16ActiveController)
 <LI><a href="#[b2]">thunk{-64} to ActiveController::rootState_processEvent()</a> from activecontroller.o(.text) referenced from activecontroller.o(.constdata__ZTV16ActiveController)
 <LI><a href="#[af]">thunk{-64} to ActiveController::~ActiveController__deallocating()</a> from activecontroller.o(.text) referenced from activecontroller.o(.constdata__ZTV16ActiveController)
 <LI><a href="#[ae]">thunk{-64} to ActiveController::~ActiveController()</a> from activecontroller.o(.text) referenced from activecontroller.o(.constdata__ZTV16ActiveController)
 <LI><a href="#[bc]">thunk{-64} to EthernetController::cancelTimeout(const WST_TMR*)</a> from ethernetcontroller.o(.text) referenced from ethernetcontroller.o(.constdata__ZTV18EthernetController)
 <LI><a href="#[bb]">thunk{-64} to EthernetController::rootState_entDef()</a> from ethernetcontroller.o(.text) referenced from ethernetcontroller.o(.constdata__ZTV18EthernetController)
 <LI><a href="#[bd]">thunk{-64} to EthernetController::rootState_processEvent()</a> from ethernetcontroller.o(.text) referenced from ethernetcontroller.o(.constdata__ZTV18EthernetController)
 <LI><a href="#[ba]">thunk{-64} to EthernetController::~EthernetController__deallocating()</a> from ethernetcontroller.o(.text) referenced from ethernetcontroller.o(.constdata__ZTV18EthernetController)
 <LI><a href="#[b9]">thunk{-64} to EthernetController::~EthernetController()</a> from ethernetcontroller.o(.text) referenced from ethernetcontroller.o(.constdata__ZTV18EthernetController)
 <LI><a href="#[c7]">thunk{-64} to SequentialController::cancelTimeout(const WST_TMR*)</a> from sequentialcontroller.o(.text) referenced from sequentialcontroller.o(.constdata__ZTV20SequentialController)
 <LI><a href="#[c6]">thunk{-64} to SequentialController::rootState_entDef()</a> from sequentialcontroller.o(.text) referenced from sequentialcontroller.o(.constdata__ZTV20SequentialController)
 <LI><a href="#[c8]">thunk{-64} to SequentialController::rootState_processEvent()</a> from sequentialcontroller.o(.text) referenced from sequentialcontroller.o(.constdata__ZTV20SequentialController)
 <LI><a href="#[c5]">thunk{-64} to SequentialController::~SequentialController__deallocating()</a> from sequentialcontroller.o(.text) referenced from sequentialcontroller.o(.constdata__ZTV20SequentialController)
 <LI><a href="#[c4]">thunk{-64} to SequentialController::~SequentialController()</a> from sequentialcontroller.o(.text) referenced from sequentialcontroller.o(.constdata__ZTV20SequentialController)
 <LI><a href="#[df]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[de]">__sti___11_WSTRTOS_cpp_b410bc26</a> from wstrtos.o(.text) referenced from wstrtos.o(.init_array)
 <LI><a href="#[dc]">__sti___11_WST_TMM_cpp_5cffd7cf</a> from wst_tmm.o(.text) referenced from wst_tmm.o(.init_array)
 <LI><a href="#[dd]">__sti___11_WST_TMR_cpp_d87a1f05</a> from wst_tmr.o(.text) referenced from wst_tmr.o(.init_array)
 <LI><a href="#[4d]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[4c]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4e]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4b]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[6f]">bsd_cb_tcp</a> from net_bsd.o(i.bsd_cb_tcp) referenced from net_bsd.o(i.socket)
 <LI><a href="#[6e]">bsd_cb_udp</a> from net_bsd.o(i.bsd_cb_udp) referenced from net_bsd.o(i.socket)
 <LI><a href="#[52]">eth_notify</a> from net_eth.o(i.eth_notify) referenced from net_eth.o(i.net_eth_iface_init)
 <LI><a href="#[4f]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[72]">main</a> from rxf_behaviorpkg.o(.text) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[53]">nbns_listener</a> from net_nbns_client.o(i.nbns_listener) referenced from net_nbns_client.o(i.net_nbns_client_init)
 <LI><a href="#[8d]">netCore_Thread</a> from net_sys.o(i.netCore_Thread) referenced from net_config.o(.constdata)
 <LI><a href="#[8e]">netETH_Thread</a> from net_eth.o(i.netETH_Thread) referenced from net_config.o(.constdata)
 <LI><a href="#[9b]">net_arp_notify</a> from net_arp.o(i.net_arp_notify) referenced from net_config.o(.constdata)
 <LI><a href="#[98]">net_bsd_socket_init</a> from net_bsd.o(i.net_bsd_socket_init) referenced from net_config.o(.constdata)
 <LI><a href="#[99]">net_bsd_socket_run</a> from net_bsd.o(i.net_bsd_socket_run) referenced from net_config.o(.constdata)
 <LI><a href="#[8f]">net_eth_iface_init</a> from net_eth.o(i.net_eth_iface_init) referenced from net_config.o(.constdata)
 <LI><a href="#[90]">net_eth_iface_run</a> from net_eth.o(i.net_eth_iface_run) referenced from net_config.o(.constdata)
 <LI><a href="#[91]">net_loop_iface_init</a> from net_loop.o(i.net_loop_iface_init) referenced from net_config.o(.constdata)
 <LI><a href="#[92]">net_loop_iface_run</a> from net_loop.o(i.net_loop_iface_run) referenced from net_config.o(.constdata)
 <LI><a href="#[9a]">net_nbns_client_init</a> from net_nbns_client.o(i.net_nbns_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[93]">net_ping_client_init</a> from net_ping.o(i.net_ping_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[94]">net_ping_client_run</a> from net_ping.o(i.net_ping_client_run) referenced from net_config.o(.constdata)
 <LI><a href="#[8c]">net_sys_tick</a> from net_sys.o(i.net_sys_tick) referenced from net_config.o(.constdata)
 <LI><a href="#[96]">net_tcp_socket_init</a> from net_tcp.o(i.net_tcp_socket_init) referenced from net_config.o(.constdata)
 <LI><a href="#[97]">net_tcp_socket_run</a> from net_tcp.o(i.net_tcp_socket_run) referenced from net_config.o(.constdata)
 <LI><a href="#[95]">net_udp_socket_init</a> from net_udp.o(i.net_udp_socket_init) referenced from net_config.o(.constdata)
 <LI><a href="#[70]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[71]">osTimerThread</a> from rt_cmsis.o(i.osTimerThread) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[6d]">os_idle_demon</a> from rtx_conf_cm.o(.text) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[3f]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[40]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[48]">rt_mut_release</a> from rt_mutex.o(i.rt_mut_release) referenced from rtx_conf_cm.o(.text)
 <LI><a href="#[47]">rt_mut_wait</a> from rt_mutex.o(i.rt_mut_wait) referenced from rtx_conf_cm.o(.text)
 <LI><a href="#[54]">svcDelay</a> from rt_cmsis.o(i.svcDelay) referenced from rt_cmsis.o(i.osDelay)
 <LI><a href="#[55]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[56]">svcKernelRunning</a> from rt_cmsis.o(i.svcKernelRunning) referenced from rt_cmsis.o(i.osKernelRunning)
 <LI><a href="#[57]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[58]">svcKernelSysTick</a> from rt_cmsis.o(i.svcKernelSysTick) referenced from rt_cmsis.o(i.osKernelSysTick)
 <LI><a href="#[59]">svcMessageCreate</a> from rt_cmsis.o(i.svcMessageCreate) referenced from rt_cmsis.o(i.osMessageCreate)
 <LI><a href="#[5a]">svcMessageGet</a> from rt_cmsis.o(i.svcMessageGet) referenced from rt_cmsis.o(i.osMessageGet)
 <LI><a href="#[5b]">svcMessagePut</a> from rt_cmsis.o(i.svcMessagePut) referenced from rt_cmsis.o(i.osMessagePut)
 <LI><a href="#[5c]">svcMutexCreate</a> from rt_cmsis.o(i.svcMutexCreate) referenced from rt_cmsis.o(i.osMutexCreate)
 <LI><a href="#[5d]">svcMutexDelete</a> from rt_cmsis.o(i.svcMutexDelete) referenced from rt_cmsis.o(i.osMutexDelete)
 <LI><a href="#[5e]">svcMutexRelease</a> from rt_cmsis.o(i.svcMutexRelease) referenced from rt_cmsis.o(i.osMutexRelease)
 <LI><a href="#[5f]">svcMutexWait</a> from rt_cmsis.o(i.svcMutexWait) referenced from rt_cmsis.o(i.osMutexWait)
 <LI><a href="#[60]">svcSemaphoreCreate</a> from rt_cmsis.o(i.svcSemaphoreCreate) referenced from rt_cmsis.o(i.osSemaphoreCreate)
 <LI><a href="#[61]">svcSemaphoreRelease</a> from rt_cmsis.o(i.svcSemaphoreRelease) referenced from rt_cmsis.o(i.osSemaphoreRelease)
 <LI><a href="#[62]">svcSemaphoreWait</a> from rt_cmsis.o(i.svcSemaphoreWait) referenced from rt_cmsis.o(i.osSemaphoreWait)
 <LI><a href="#[63]">svcSignalClear</a> from rt_cmsis.o(i.svcSignalClear) referenced from rt_cmsis.o(i.osSignalClear)
 <LI><a href="#[64]">svcSignalSet</a> from rt_cmsis.o(i.svcSignalSet) referenced from rt_cmsis.o(i.osSignalSet)
 <LI><a href="#[65]">svcSignalWait</a> from rt_cmsis.o(i.svcSignalWait) referenced from rt_cmsis.o(i.osSignalWait)
 <LI><a href="#[66]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[67]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[67]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadGetId)
 <LI><a href="#[68]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[68]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadTerminate)
 <LI><a href="#[69]">svcThreadYield</a> from rt_cmsis.o(i.svcThreadYield) referenced from rt_cmsis.o(i.osThreadYield)
 <LI><a href="#[6a]">svcTimerCall</a> from rt_cmsis.o(i.svcTimerCall) referenced from rt_cmsis.o(i.osTimerCall)
 <LI><a href="#[6b]">svcTimerCreate</a> from rt_cmsis.o(i.svcTimerCreate) referenced from rt_cmsis.o(i.osTimerCreate)
 <LI><a href="#[6c]">svcTimerStart</a> from rt_cmsis.o(i.svcTimerStart) referenced from rt_cmsis.o(i.osTimerStart)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[df]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ea]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2ea]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2eb]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2ec]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2ed]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[eb]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2ee]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[f7]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[2ef]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2f0]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2f1]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2f2]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2f3]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2f4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2f5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2f6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2f7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2f8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2f9]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2fa]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2fb]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2fc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2fd]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2fe]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2ff]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[300]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[301]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[302]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[303]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[f2]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[304]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[305]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[306]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[307]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[308]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[309]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[30a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[e9]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[30b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[f4]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f6]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[30c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[f8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postli_1 &rArr; _platform_post_lib_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[fa]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; WSTRTOS_Init() &rArr; WST_RXF_Main(short, char**) &rArr; TestBuilder::TestBuilder(WST_TSK*) &rArr; EthernetController::EthernetController(WST_TSK*) &rArr; connect &rArr; net_tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1ee]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[fc]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[30d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[fe]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[f9]"></a>_platform_post_lib_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_conf_cm.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _platform_post_lib_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postli_1
</UL>

<P><STRONG><a name="[103]"></a>WST_RXF_Main(short, char**)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, maintargetcomponent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = WST_RXF_Main(short, char**) &rArr; TestBuilder::TestBuilder(WST_TSK*) &rArr; EthernetController::EthernetController(WST_TSK*) &rArr; connect &rArr; net_tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF::start()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF::initialize()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
</UL>

<P><STRONG><a name="[30e]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[108]"></a>WSTMonitor_sendTypeSize()</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, wstmonitor_sendtypes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WSTMonitor_sendTypeSize() &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize6()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize5()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize4()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize3()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize2()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize1()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize0()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[72]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rxf_behaviorpkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = main &rArr; WSTRTOS_Init() &rArr; WST_RXF_Main(short, char**) &rArr; TestBuilder::TestBuilder(WST_TSK*) &rArr; EthernetController::EthernetController(WST_TSK*) &rArr; connect &rArr; net_tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[30f]"></a>WST_ERR::~WST_ERR()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_err.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>WST_ERR::~WST_ERR__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_err.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wst_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator new(unsigned)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_initTimerTask()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_resume(WST_TSK*)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_suspend(WST_TSK*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_start(WST_TSK*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_userInit(void(*)(void*), osPriority, void*, unsigned short, void*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_cleanup(WST_MTX*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_init(WST_MTX*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_getCount(WST_MSQ*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_init(WST_MSQ*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_get(WST_MSQ*, WST_EVT**)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::popNullTransition()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::executeOnce()
</UL>

<P><STRONG><a name="[18f]"></a>WST_EVT::toBeCancelled(const WST_FSM*, short)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wst_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_EVT::toBeCancelled(const WST_FSM*, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
</UL>

<P><STRONG><a name="[311]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>

<P><STRONG><a name="[312]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_ddtor_pointer_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ddtor_pointer_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[313]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[2d6]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[314]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[315]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[316]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[11a]"></a>ActiveController::ClassWSTMonitor_getTypeSize0()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, activecontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize0()
</UL>

<P><STRONG><a name="[109]"></a>WSTMonitor_getTypeSize0()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize0()
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::ClassWSTMonitor_getTypeSize0()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[11b]"></a>ActiveController::ClassWSTMonitor_getTypeSize1()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, activecontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize1()
</UL>

<P><STRONG><a name="[10a]"></a>WSTMonitor_getTypeSize1()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize1()
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::ClassWSTMonitor_getTypeSize1()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[11c]"></a>ActiveController::ClassWSTMonitor_getTypeSize2()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, activecontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize2()
</UL>

<P><STRONG><a name="[10b]"></a>WSTMonitor_getTypeSize2()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize2()
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::ClassWSTMonitor_getTypeSize2()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[121]"></a>ActiveController::initStatechart()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, activecontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::ActiveController(WST_TSK*)
</UL>

<P><STRONG><a name="[11d]"></a>ActiveController::ActiveController(WST_TSK*)</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ActiveController::ActiveController(WST_TSK*) &rArr; connect &rArr; net_tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::initStatechart()
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[317]"></a>ActiveController::ActiveController__sub_object(WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, activecontroller.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>ActiveController::cancelTimeouts()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ActiveController::cancelTimeouts() &rArr; WST_FSM::cancel(WST_TMR*) &rArr; WST_TMM::stop(WST_TMR*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::~ActiveController()
</UL>

<P><STRONG><a name="[12b]"></a>ActiveController::cleanUpRelations()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, activecontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::~ActiveController()
</UL>

<P><STRONG><a name="[a8]"></a>ActiveController::~ActiveController()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ActiveController::~ActiveController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::cleanUpRelations()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::cancelTimeouts()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to ActiveController::~ActiveController()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::~ActiveController__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activecontroller.o(.constdata__ZTV16ActiveController)
</UL>
<P><STRONG><a name="[318]"></a>ActiveController::~ActiveController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, activecontroller.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>ActiveController::~ActiveController__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ActiveController::~ActiveController__deallocating() &rArr; ActiveController::~ActiveController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::~ActiveController()
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to ActiveController::~ActiveController__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activecontroller.o(.constdata__ZTV16ActiveController)
</UL>
<P><STRONG><a name="[af]"></a>thunk{-64} to ActiveController::~ActiveController__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = thunk{-64} to ActiveController::~ActiveController__deallocating() &rArr; ActiveController::~ActiveController__deallocating() &rArr; ActiveController::~ActiveController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::~ActiveController__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activecontroller.o(.constdata__ZTV16ActiveController)
</UL>
<P><STRONG><a name="[ae]"></a>thunk{-64} to ActiveController::~ActiveController()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = thunk{-64} to ActiveController::~ActiveController() &rArr; ActiveController::~ActiveController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::~ActiveController()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activecontroller.o(.constdata__ZTV16ActiveController)
</UL>
<P><STRONG><a name="[319]"></a>ActiveController::getItsLED() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, activecontroller.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>ActiveController::setItsLED(LED*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, activecontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::initRelations()
</UL>

<P><STRONG><a name="[aa]"></a>ActiveController::startBehavior()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ActiveController::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startDispatching()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::startBehavior()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activecontroller.o(.constdata__ZTV16ActiveController)
</UL>
<P><STRONG><a name="[ab]"></a>ActiveController::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, activecontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to ActiveController::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activecontroller.o(.constdata__ZTV16ActiveController)
</UL>
<P><STRONG><a name="[b1]"></a>thunk{-64} to ActiveController::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = thunk{-64} to ActiveController::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activecontroller.o(.constdata__ZTV16ActiveController)
</UL>
<P><STRONG><a name="[31a]"></a>ActiveController::getAddr() const</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, activecontroller.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>ActiveController::setAddr(sockaddr_in)</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, activecontroller.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>ActiveController::getDbuf(int) const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, activecontroller.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>ActiveController::setDbuf(int, char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, activecontroller.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>ActiveController::getDstPort()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, activecontroller.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>ActiveController::setDstPort(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, activecontroller.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>ActiveController::getRemoteIpAddr(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, activecontroller.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>ActiveController::setRemoteIpAddr(int, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, activecontroller.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>ActiveController::getSock() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, activecontroller.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>ActiveController::setSock(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, activecontroller.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>ActiveController::rootState_entDef()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ActiveController::rootState_entDef() &rArr; receive_data(int, char*) &rArr; recv &rArr; recvfrom &rArr; net_tcp_reset_window &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evToggle::evToggle()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_data(int, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to ActiveController::rootState_entDef()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activecontroller.o(.constdata__ZTV16ActiveController)
</UL>
<P><STRONG><a name="[b0]"></a>thunk{-64} to ActiveController::rootState_entDef()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = thunk{-64} to ActiveController::rootState_entDef() &rArr; ActiveController::rootState_entDef() &rArr; receive_data(int, char*) &rArr; recv &rArr; recvfrom &rArr; net_tcp_reset_window &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::rootState_entDef()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activecontroller.o(.constdata__ZTV16ActiveController)
</UL>
<P><STRONG><a name="[ad]"></a>ActiveController::rootState_processEvent()</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ActiveController::rootState_processEvent() &rArr; receive_data(int, char*) &rArr; recv &rArr; recvfrom &rArr; net_tcp_reset_window &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evToggle::evToggle()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_data(int, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to ActiveController::rootState_processEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activecontroller.o(.constdata__ZTV16ActiveController)
</UL>
<P><STRONG><a name="[b2]"></a>thunk{-64} to ActiveController::rootState_processEvent()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, activecontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = thunk{-64} to ActiveController::rootState_processEvent() &rArr; ActiveController::rootState_processEvent() &rArr; receive_data(int, char*) &rArr; recv &rArr; recvfrom &rArr; net_tcp_reset_window &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::rootState_processEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> activecontroller.o(.constdata__ZTV16ActiveController)
</UL>
<P><STRONG><a name="[134]"></a>EthernetController::initStatechart()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernetcontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::EthernetController(WST_TSK*)
</UL>

<P><STRONG><a name="[133]"></a>EthernetController::EthernetController(WST_TSK*)</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, ethernetcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = EthernetController::EthernetController(WST_TSK*) &rArr; connect &rArr; net_tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::initStatechart()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[324]"></a>EthernetController::EthernetController__sub_object(WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, ethernetcontroller.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>EthernetController::cancelTimeouts()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ethernetcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EthernetController::cancelTimeouts() &rArr; WST_FSM::cancel(WST_TMR*) &rArr; WST_TMM::stop(WST_TMR*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::~EthernetController()
</UL>

<P><STRONG><a name="[136]"></a>EthernetController::cleanUpRelations()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernetcontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::~EthernetController()
</UL>

<P><STRONG><a name="[b3]"></a>EthernetController::~EthernetController()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ethernetcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = EthernetController::~EthernetController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::cleanUpRelations()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::cancelTimeouts()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to EthernetController::~EthernetController()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::~EthernetController__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetcontroller.o(.constdata__ZTV18EthernetController)
</UL>
<P><STRONG><a name="[325]"></a>EthernetController::~EthernetController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ethernetcontroller.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>EthernetController::~EthernetController__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ethernetcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = EthernetController::~EthernetController__deallocating() &rArr; EthernetController::~EthernetController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::~EthernetController()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to EthernetController::~EthernetController__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetcontroller.o(.constdata__ZTV18EthernetController)
</UL>
<P><STRONG><a name="[ba]"></a>thunk{-64} to EthernetController::~EthernetController__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = thunk{-64} to EthernetController::~EthernetController__deallocating() &rArr; EthernetController::~EthernetController__deallocating() &rArr; EthernetController::~EthernetController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::~EthernetController__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetcontroller.o(.constdata__ZTV18EthernetController)
</UL>
<P><STRONG><a name="[b9]"></a>thunk{-64} to EthernetController::~EthernetController()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = thunk{-64} to EthernetController::~EthernetController() &rArr; EthernetController::~EthernetController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::~EthernetController()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetcontroller.o(.constdata__ZTV18EthernetController)
</UL>
<P><STRONG><a name="[326]"></a>EthernetController::getItsLED() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethernetcontroller.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>EthernetController::setItsLED(LED*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernetcontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::initRelations()
</UL>

<P><STRONG><a name="[b5]"></a>EthernetController::startBehavior()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ethernetcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EthernetController::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startDispatching()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::startBehavior()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetcontroller.o(.constdata__ZTV18EthernetController)
</UL>
<P><STRONG><a name="[b6]"></a>EthernetController::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ethernetcontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to EthernetController::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetcontroller.o(.constdata__ZTV18EthernetController)
</UL>
<P><STRONG><a name="[bc]"></a>thunk{-64} to EthernetController::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, ethernetcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = thunk{-64} to EthernetController::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetcontroller.o(.constdata__ZTV18EthernetController)
</UL>
<P><STRONG><a name="[327]"></a>EthernetController::getAddr() const</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, ethernetcontroller.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>EthernetController::setAddr(sockaddr_in)</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ethernetcontroller.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>EthernetController::getDbuf(int) const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernetcontroller.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>EthernetController::setDbuf(int, char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethernetcontroller.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>EthernetController::getDstPort()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethernetcontroller.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>EthernetController::setDstPort(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethernetcontroller.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>EthernetController::getRemoteIpAddr(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethernetcontroller.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>EthernetController::setRemoteIpAddr(int, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethernetcontroller.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>EthernetController::getSock() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethernetcontroller.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>EthernetController::setSock(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernetcontroller.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>EthernetController::rootState_entDef()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ethernetcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = EthernetController::rootState_entDef() &rArr; send_data(int, const char*) &rArr; send &rArr; sendto &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data(int, const char*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to EthernetController::rootState_entDef()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetcontroller.o(.constdata__ZTV18EthernetController)
</UL>
<P><STRONG><a name="[bb]"></a>thunk{-64} to EthernetController::rootState_entDef()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = thunk{-64} to EthernetController::rootState_entDef() &rArr; EthernetController::rootState_entDef() &rArr; send_data(int, const char*) &rArr; send &rArr; sendto &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::rootState_entDef()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetcontroller.o(.constdata__ZTV18EthernetController)
</UL>
<P><STRONG><a name="[b8]"></a>EthernetController::rootState_processEvent()</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ethernetcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = EthernetController::rootState_processEvent() &rArr; send_data(int, const char*) &rArr; send &rArr; sendto &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data(int, const char*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evToggle::evToggle()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to EthernetController::rootState_processEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetcontroller.o(.constdata__ZTV18EthernetController)
</UL>
<P><STRONG><a name="[bd]"></a>thunk{-64} to EthernetController::rootState_processEvent()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = thunk{-64} to EthernetController::rootState_processEvent() &rArr; EthernetController::rootState_processEvent() &rArr; send_data(int, const char*) &rArr; send &rArr; sendto &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::rootState_processEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetcontroller.o(.constdata__ZTV18EthernetController)
</UL>
<P><STRONG><a name="[12f]"></a>receive_data(int, char*)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, examplepkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = receive_data(int, char*) &rArr; recv &rArr; recvfrom &rArr; net_tcp_reset_window &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::rootState_processEvent()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::rootState_entDef()
</UL>

<P><STRONG><a name="[137]"></a>send_data(int, const char*)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, examplepkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = send_data(int, const char*) &rArr; send &rArr; sendto &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::rootState_processEvent()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::rootState_entDef()
</UL>

<P><STRONG><a name="[130]"></a>evToggle::evToggle()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, examplepkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evToggle::evToggle()
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::rootState_processEvent()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::rootState_processEvent()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::rootState_entDef()
</UL>

<P><STRONG><a name="[331]"></a>evToggle::evToggle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, examplepkg.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>evToggle::isTypeOf(short) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, examplepkg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> examplepkg.o(.constdata__ZTV8evToggle)
</UL>
<P><STRONG><a name="[13b]"></a>evOn::evOn()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, examplepkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evOn::evOn()
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::rootState_processEvent()
</UL>

<P><STRONG><a name="[332]"></a>evOn::evOn__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, examplepkg.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>evOn::isTypeOf(short) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, examplepkg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> examplepkg.o(.constdata__ZTV4evOn)
</UL>
<P><STRONG><a name="[13c]"></a>evOff::evOff()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, examplepkg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evOff::evOff()
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::rootState_processEvent()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::rootState_entDef()
</UL>

<P><STRONG><a name="[333]"></a>evOff::evOff__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, examplepkg.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>evOff::isTypeOf(short) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, examplepkg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> examplepkg.o(.constdata__ZTV5evOff)
</UL>
<P><STRONG><a name="[13d]"></a>evReceivedData::evReceivedData()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, examplepkg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
</UL>

<P><STRONG><a name="[334]"></a>evReceivedData::evReceivedData__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, examplepkg.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>evReceivedData::isTypeOf(short) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, examplepkg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> examplepkg.o(.constdata__ZTV14evReceivedData)
</UL>
<P><STRONG><a name="[13f]"></a>LED::initStatechart()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::LED(WST_TSK*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::LED(int, WST_TSK*)
</UL>

<P><STRONG><a name="[13e]"></a>LED::LED(int, WST_TSK*)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LED::LED(int, WST_TSK*) &rArr; WSTMonitor_sendInit(void*, unsigned short, void*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::initStatechart()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[335]"></a>LED::LED__sub_object(int, WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>LED::LED(WST_TSK*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::initStatechart()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
</UL>

<P><STRONG><a name="[336]"></a>LED::LED__sub_object(WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>LED::~LED()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = LED::~LED() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::~LED__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata__ZTV3LED)
</UL>
<P><STRONG><a name="[337]"></a>LED::~LED__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>LED::~LED__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LED::~LED__deallocating() &rArr; LED::~LED() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::~LED()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata__ZTV3LED)
</UL>
<P><STRONG><a name="[141]"></a>LED::off()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::rootState_processEvent()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::rootState_entDef()
</UL>

<P><STRONG><a name="[142]"></a>LED::on()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::rootState_processEvent()
</UL>

<P><STRONG><a name="[cd]"></a>LED::startBehavior()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LED::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::startBehavior()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata__ZTV3LED)
</UL>
<P><STRONG><a name="[338]"></a>LED::getBitIndicator() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>LED::setBitIndicator(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>LED::rootState_entDef()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LED::rootState_entDef()
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::off()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata__ZTV3LED)
</UL>
<P><STRONG><a name="[cc]"></a>LED::rootState_processEvent()</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED::rootState_processEvent()
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::on()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::off()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata__ZTV3LED)
</UL>
<P><STRONG><a name="[144]"></a>SequentialController::initStatechart()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sequentialcontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::SequentialController(WST_TSK*)
</UL>

<P><STRONG><a name="[143]"></a>SequentialController::SequentialController(WST_TSK*)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sequentialcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SequentialController::SequentialController(WST_TSK*) &rArr; WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::initStatechart()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[33a]"></a>SequentialController::SequentialController__sub_object(WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, sequentialcontroller.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>SequentialController::cancelTimeouts()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sequentialcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SequentialController::cancelTimeouts() &rArr; WST_FSM::cancel(WST_TMR*) &rArr; WST_TMM::stop(WST_TMR*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::~SequentialController()
</UL>

<P><STRONG><a name="[146]"></a>SequentialController::cleanUpRelations()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sequentialcontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::~SequentialController()
</UL>

<P><STRONG><a name="[be]"></a>SequentialController::~SequentialController()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sequentialcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SequentialController::~SequentialController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::cleanUpRelations()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::cancelTimeouts()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to SequentialController::~SequentialController()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::~SequentialController__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sequentialcontroller.o(.constdata__ZTV20SequentialController)
</UL>
<P><STRONG><a name="[33b]"></a>SequentialController::~SequentialController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, sequentialcontroller.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>SequentialController::~SequentialController__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sequentialcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SequentialController::~SequentialController__deallocating() &rArr; SequentialController::~SequentialController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::~SequentialController()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to SequentialController::~SequentialController__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sequentialcontroller.o(.constdata__ZTV20SequentialController)
</UL>
<P><STRONG><a name="[c5]"></a>thunk{-64} to SequentialController::~SequentialController__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sequentialcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = thunk{-64} to SequentialController::~SequentialController__deallocating() &rArr; SequentialController::~SequentialController__deallocating() &rArr; SequentialController::~SequentialController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::~SequentialController__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sequentialcontroller.o(.constdata__ZTV20SequentialController)
</UL>
<P><STRONG><a name="[c4]"></a>thunk{-64} to SequentialController::~SequentialController()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sequentialcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = thunk{-64} to SequentialController::~SequentialController() &rArr; SequentialController::~SequentialController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::~SequentialController()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sequentialcontroller.o(.constdata__ZTV20SequentialController)
</UL>
<P><STRONG><a name="[33c]"></a>SequentialController::getItsLED() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sequentialcontroller.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>SequentialController::setItsLED(LED*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sequentialcontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::initRelations()
</UL>

<P><STRONG><a name="[c0]"></a>SequentialController::startBehavior()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sequentialcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SequentialController::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startDispatching()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::startBehavior()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sequentialcontroller.o(.constdata__ZTV20SequentialController)
</UL>
<P><STRONG><a name="[c1]"></a>SequentialController::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sequentialcontroller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to SequentialController::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sequentialcontroller.o(.constdata__ZTV20SequentialController)
</UL>
<P><STRONG><a name="[c7]"></a>thunk{-64} to SequentialController::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, sequentialcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = thunk{-64} to SequentialController::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::cancelTimeout(const WST_TMR*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sequentialcontroller.o(.constdata__ZTV20SequentialController)
</UL>
<P><STRONG><a name="[c2]"></a>SequentialController::rootState_entDef()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sequentialcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SequentialController::rootState_entDef() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOff::evOff()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to SequentialController::rootState_entDef()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sequentialcontroller.o(.constdata__ZTV20SequentialController)
</UL>
<P><STRONG><a name="[c6]"></a>thunk{-64} to SequentialController::rootState_entDef()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sequentialcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = thunk{-64} to SequentialController::rootState_entDef() &rArr; SequentialController::rootState_entDef() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::rootState_entDef()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sequentialcontroller.o(.constdata__ZTV20SequentialController)
</UL>
<P><STRONG><a name="[c3]"></a>SequentialController::rootState_processEvent()</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, sequentialcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SequentialController::rootState_processEvent() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOff::evOff()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOn::evOn()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-64} to SequentialController::rootState_processEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sequentialcontroller.o(.constdata__ZTV20SequentialController)
</UL>
<P><STRONG><a name="[c8]"></a>thunk{-64} to SequentialController::rootState_processEvent()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sequentialcontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = thunk{-64} to SequentialController::rootState_processEvent() &rArr; SequentialController::rootState_processEvent() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::rootState_processEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sequentialcontroller.o(.constdata__ZTV20SequentialController)
</UL>
<P><STRONG><a name="[147]"></a>TestBuilder::ClassWSTMonitor_getTypeSize3()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testbuilder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize3()
</UL>

<P><STRONG><a name="[10c]"></a>WSTMonitor_getTypeSize3()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize3()
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::ClassWSTMonitor_getTypeSize3()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[148]"></a>TestBuilder::ClassWSTMonitor_getTypeSize4()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testbuilder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize4()
</UL>

<P><STRONG><a name="[10d]"></a>WSTMonitor_getTypeSize4()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize4()
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::ClassWSTMonitor_getTypeSize4()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[149]"></a>TestBuilder::ClassWSTMonitor_getTypeSize5()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testbuilder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize5()
</UL>

<P><STRONG><a name="[10e]"></a>WSTMonitor_getTypeSize5()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize5()
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::ClassWSTMonitor_getTypeSize5()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[14a]"></a>TestBuilder::ClassWSTMonitor_getTypeSize6()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testbuilder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_getTypeSize6()
</UL>

<P><STRONG><a name="[10f]"></a>WSTMonitor_getTypeSize6()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WSTMonitor_getTypeSize6()
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::ClassWSTMonitor_getTypeSize6()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
</UL>

<P><STRONG><a name="[14b]"></a>TestBuilder::initRelations()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestBuilder::initRelations()
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::setItsLED(LED*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::setItsLED(LED*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::setItsLED(LED*)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[14f]"></a>TestBuilder::setTask(WST_TSK*, bool)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestBuilder::setTask(WST_TSK*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setTask(WST_TSK*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[106]"></a>TestBuilder::TestBuilder(WST_TSK*)</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TestBuilder::TestBuilder(WST_TSK*) &rArr; EthernetController::EthernetController(WST_TSK*) &rArr; connect &rArr; net_tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::setShouldDelete(bool)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::setTask(WST_TSK*, bool)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::initRelations()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::SequentialController(WST_TSK*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::LED(int, WST_TSK*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::EthernetController(WST_TSK*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::WST_FSM()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::ActiveController(WST_TSK*)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
</UL>

<P><STRONG><a name="[33d]"></a>TestBuilder::TestBuilder__sub_object(WST_TSK*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>TestBuilder::~TestBuilder()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = TestBuilder::~TestBuilder() &rArr; SequentialController::~SequentialController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::~SequentialController()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::~LED()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::~EthernetController()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::~ActiveController()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbuilder.o(.constdata__ZTV11TestBuilder)
</UL>
<P><STRONG><a name="[33e]"></a>TestBuilder::~TestBuilder__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>TestBuilder::~TestBuilder__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TestBuilder::~TestBuilder__deallocating() &rArr; TestBuilder::~TestBuilder() &rArr; SequentialController::~SequentialController() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbuilder.o(.constdata__ZTV11TestBuilder)
</UL>
<P><STRONG><a name="[33f]"></a>TestBuilder::getItsActiveController() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>TestBuilder::getItsEthernetController() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>TestBuilder::getItsLED1() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>TestBuilder::getItsLED2() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>TestBuilder::getItsLED3() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>TestBuilder::getItsSequentialController() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbuilder.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>TestBuilder::startBehavior()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TestBuilder::startBehavior() &rArr; SequentialController::startBehavior() &rArr; WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::startBehavior()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::startBehavior()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::startBehavior()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::startBehavior()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbuilder.o(.constdata__ZTV11TestBuilder)
</UL>
<P><STRONG><a name="[a4]"></a>TestBuilder::destroy()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, testbuilder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestBuilder::destroy()
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::destroy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbuilder.o(.constdata__ZTV11TestBuilder)
</UL>
<P><STRONG><a name="[11f]"></a>WST_FSM::WST_FSM()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::SequentialController(WST_TSK*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::LED(WST_TSK*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::LED(int, WST_TSK*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::EthernetController(WST_TSK*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::ActiveController(WST_TSK*)
</UL>

<P><STRONG><a name="[345]"></a>WST_FSM::WST_FSM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>WST_FSM::cleanUpRelations()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
</UL>

<P><STRONG><a name="[152]"></a>WST_FSM::cancelEventsAndTimeouts()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::cancelEvents(WST_FSM*, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
</UL>

<P><STRONG><a name="[d5]"></a>WST_FSM::~WST_FSM()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancelEventsAndTimeouts()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cleanUpRelations()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::~SequentialController()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::~LED()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::~EthernetController()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::~ActiveController()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[346]"></a>WST_FSM::~WST_FSM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>WST_FSM::~WST_FSM__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = WST_FSM::~WST_FSM__deallocating() &rArr; WST_FSM::~WST_FSM() &rArr; WST_FSM::cancelEventsAndTimeouts() &rArr; WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[128]"></a>WST_FSM::cancel(WST_TMR*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WST_FSM::cancel(WST_TMR*) &rArr; WST_TMM::stop(WST_TMR*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::rootState_processEvent()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::cancelTimeouts()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::rootState_processEvent()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::cancelTimeouts()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::rootState_processEvent()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::cancelTimeouts()
</UL>

<P><STRONG><a name="[151]"></a>WST_FSM::destroy()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::destroy()
</UL>

<P><STRONG><a name="[347]"></a>WST_FSM::endBehavior()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>WST_FSM::gen(WST_EVT*, bool)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::rootState_processEvent()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::rootState_entDef()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::rootState_processEvent()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::send(WST_EVT*, const void*&)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::send(WST_EVT*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::rootState_processEvent()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::rootState_entDef()
</UL>

<P><STRONG><a name="[158]"></a>WST_FSM::takeEvent(WST_EVT*)</STRONG> (Thumb, 584 bytes, Stack size 96 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEventStart(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventStart(unsigned char*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventEnd(unsigned char*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::handleTrigger(WST_EVT*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::handleSyncEvent(WST_EVT*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::executeOnce()
</UL>

<P><STRONG><a name="[15d]"></a>WST_FSM::handleSyncEvent(WST_EVT*)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, wst_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[15f]"></a>WST_FSM::popNullTransition()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wst_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>

<P><STRONG><a name="[348]"></a>WST_FSM::pushNullTransition()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>WST_FSM::rootState_entDef()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> testbuilder.o(.constdata__ZTV11TestBuilder)
<LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[9f]"></a>WST_FSM::cancelTimeout(const WST_TMR*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> led.o(.constdata__ZTV3LED)
<LI> testbuilder.o(.constdata__ZTV11TestBuilder)
<LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[a0]"></a>WST_FSM::rootState_processEvent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> testbuilder.o(.constdata__ZTV11TestBuilder)
<LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[132]"></a>WST_FSM::scheduleTimeout(unsigned, char*)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WST_FSM::scheduleTimeout(unsigned, char*) &rArr; WST_TMM::start(unsigned, WST_FSM*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::rootState_processEvent()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::rootState_entDef()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::rootState_processEvent()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::rootState_entDef()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::rootState_processEvent()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::rootState_entDef()
</UL>

<P><STRONG><a name="[150]"></a>WST_FSM::setShouldDelete(bool)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
</UL>

<P><STRONG><a name="[120]"></a>WST_FSM::setTask(WST_TSK*, bool)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wst_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::setTask(WST_TSK*, bool)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::SequentialController(WST_TSK*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::LED(WST_TSK*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::LED(int, WST_TSK*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::EthernetController(WST_TSK*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::ActiveController(WST_TSK*)
</UL>

<P><STRONG><a name="[12d]"></a>WST_FSM::startBehavior()</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WST_FSM::startBehavior() &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::WST_EVT()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::startBehavior()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::startBehavior()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::startBehavior()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::startBehavior()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::startBehavior()
</UL>

<P><STRONG><a name="[349]"></a>WST_FSM::terminate()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wst_fsm.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>WST_FSM::send(WST_EVT*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WST_FSM::send(WST_EVT*) &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> led.o(.constdata__ZTV3LED)
<LI> sequentialcontroller.o(.constdata__ZTV20SequentialController)
<LI> testbuilder.o(.constdata__ZTV11TestBuilder)
<LI> activecontroller.o(.constdata__ZTV16ActiveController)
<LI> ethernetcontroller.o(.constdata__ZTV18EthernetController)
<LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[a2]"></a>WST_FSM::send(WST_EVT*, const void*&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wst_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WST_FSM::send(WST_EVT*, const void*&) &rArr; WST_FSM::gen(WST_EVT*, bool) &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> led.o(.constdata__ZTV3LED)
<LI> sequentialcontroller.o(.constdata__ZTV20SequentialController)
<LI> testbuilder.o(.constdata__ZTV11TestBuilder)
<LI> activecontroller.o(.constdata__ZTV16ActiveController)
<LI> ethernetcontroller.o(.constdata__ZTV18EthernetController)
<LI> wst_fsm.o(.constdata__ZTV7WST_FSM)
</UL>
<P><STRONG><a name="[161]"></a>WST_FSM::handleTrigger(WST_EVT*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wst_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[163]"></a>WST_MEM::WST_MEM()</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, wst_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_MEM::WST_MEM()
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
</UL>

<P><STRONG><a name="[34a]"></a>WST_MEM::WST_MEM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_mem.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>WST_MEM::getMemory(unsigned)</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, wst_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_malloc(unsigned)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::WST_MEM()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::rootState_processEvent()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::rootState_entDef()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::rootState_processEvent()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::rootState_processEvent()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::rootState_entDef()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::initMutex()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_init(WST_MSQ*)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_malloc(unsigned)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::reallocMemory(unsigned, unsigned, void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startTaskAfterOSStart()
</UL>

<P><STRONG><a name="[12c]"></a>WST_MEM::returnMemory(void*)</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, wst_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_free(void*)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder__deallocating()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::~SequentialController__deallocating()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::~LED__deallocating()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evToggle::~evToggle__deallocating()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::~WST_EVT__deallocating()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOff::~evOff__deallocating()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOn::~evOn__deallocating()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evReceivedData::~evReceivedData__deallocating()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::~EthernetController__deallocating()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::~ActiveController__deallocating()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cleanup(WST_MSQ*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::~WST_MSQ()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::reallocMemory(unsigned, unsigned, void*)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::~WST_FSM__deallocating()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>

<P><STRONG><a name="[168]"></a>WST_MEM::reallocMemory(unsigned, unsigned, void*)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wst_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[16a]"></a>WST_MSQ::WST_MSQ(unsigned short, bool)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wst_msq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_init(WST_MSQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::cleanUpRelations()
</UL>

<P><STRONG><a name="[34b]"></a>WST_MSQ::WST_MSQ__sub_object(unsigned short, bool)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, wst_msq.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>WST_MSQ::WST_MSQ(unsigned short, void*, bool)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, wst_msq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_init(WST_MSQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(unsigned char*, void*, unsigned char, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[34c]"></a>WST_MSQ::WST_MSQ__sub_object(unsigned short, void*, bool)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, wst_msq.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>WST_MSQ::~WST_MSQ()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wst_msq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WST_MSQ::~WST_MSQ() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::cleanUpRelations()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_osw.o(.text)
</UL>
<P><STRONG><a name="[34d]"></a>WST_MSQ::~WST_MSQ__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_msq.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>WST_MSQ::cancelEvents(WST_FSM*, short)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wst_msq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancelEventsAndTimeouts()
</UL>

<P><STRONG><a name="[16e]"></a>WST_MSQ::get()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wst_msq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WST_MSQ::get() &rArr; WST_OSW_MSQ_get(WST_MSQ*, WST_EVT**) &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_get(WST_MSQ*, WST_EVT**)
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::executeOnce()
</UL>

<P><STRONG><a name="[170]"></a>WST_MSQ::isEmpty()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wst_msq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_getCount(WST_MSQ*)
</UL>

<P><STRONG><a name="[157]"></a>WST_MSQ::put(WST_EVT*, bool)</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, wst_msq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTimeOut(unsigned char*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::gen(WST_EVT*, bool)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>

<P><STRONG><a name="[174]"></a>WST_MTX::WST_MTX()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wst_mtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WST_MTX::WST_MTX() &rArr; WST_OSW_MTX_init(WST_MTX*) &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_init(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::initMutex()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_malloc(unsigned)
</UL>

<P><STRONG><a name="[34e]"></a>WST_MTX::WST_MTX__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>WST_MTX::WST_MTX(const WST_MTX*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_mtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
</UL>

<P><STRONG><a name="[34f]"></a>WST_MTX::WST_MTX__sub_object(const WST_MTX*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>WST_MTX::~WST_MTX()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_cleanup(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::~WST_MTX_inUse()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
</UL>

<P><STRONG><a name="[350]"></a>WST_MTX::~WST_MTX__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>WST_MTX::WST_MTX_enterCriticalRegion()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_mtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WST_MTX::WST_MTX_enterCriticalRegion() &rArr; WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getExpiredTimeout()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
</UL>

<P><STRONG><a name="[17c]"></a>WST_MTX::WST_MTX_exitCriticalRegion()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_mtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getExpiredTimeout()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::~WST_MTX_inUse()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
</UL>

<P><STRONG><a name="[190]"></a>WST_MTX::WST_MTX_getRtosMutex()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_mtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_cleanup(WST_MTX*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_init(WST_MTX*)
</UL>

<P><STRONG><a name="[17d]"></a>WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, wst_mtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::~WST_MTX()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX(const WST_MTX*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[351]"></a>WST_MTX_inUse::WST_MTX_inUse__sub_object(const WST_MTX*)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>WST_MTX_inUse::~WST_MTX_inUse()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::~WST_MTX()
</UL>

<P><STRONG><a name="[352]"></a>WST_MTX_inUse::~WST_MTX_inUse__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_mtx.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>WST_OSW_TSK_init(WST_TSK*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_osw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startTaskAfterOSStart()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(unsigned char*, void*, unsigned char, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[180]"></a>WST_OSW_TMM_delay(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_OSW_TMM_delay(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>

<P><STRONG><a name="[182]"></a>WST_OSW_TSK_userInit(void(*)(void*), osPriority, void*, unsigned short, void*)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WST_OSW_TSK_userInit(void(*)(void*), osPriority, void*, unsigned short, void*) &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_Monitor_createReceiveTask()
</UL>

<P><STRONG><a name="[183]"></a>WST_OSW_TSK_cleanup(WST_TSK*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WST_OSW_TSK_cleanup(WST_TSK*)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::endDispatching()
</UL>

<P><STRONG><a name="[185]"></a>WST_OSW_TSK_start(WST_TSK*)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WST_OSW_TSK_start(WST_TSK*) &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startDispatching()
</UL>

<P><STRONG><a name="[186]"></a>WST_OSW_TSK_suspend(WST_TSK*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wst_osw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::suspend()
</UL>

<P><STRONG><a name="[187]"></a>WST_OSW_TSK_resume(WST_TSK*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wst_osw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::resume()
</UL>

<P><STRONG><a name="[188]"></a>WST_OSW_TMM_timerCallBack(const void*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WST_OSW_TMM_timerCallBack(const void*) &rArr; WST_TMM::processTimeouts() &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_incrementRxfTicks()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_osw.o(.text)
</UL>
<P><STRONG><a name="[16d]"></a>WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::WST_MSQ(unsigned short, bool)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_EVT::toBeCancelled(const WST_FSM*, short)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::cancelEvents(WST_FSM*, short)
</UL>

<P><STRONG><a name="[171]"></a>WST_OSW_MSQ_getCount(WST_MSQ*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wst_osw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::isEmpty()
</UL>

<P><STRONG><a name="[16f]"></a>WST_OSW_MSQ_get(WST_MSQ*, WST_EVT**)</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WST_OSW_MSQ_get(WST_MSQ*, WST_EVT**) &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::get()
</UL>

<P><STRONG><a name="[179]"></a>WST_OSW_MTX_exitCriticalRegion(WST_MTX*)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_getRtosMutex()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::~WST_MTX()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTimeOut(unsigned char*)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_malloc(unsigned)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_free(void*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventStart(unsigned char*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventEnd(unsigned char*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendBufferReset()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendError()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendOpCall(void*, void*, unsigned short, void*, void*)
</UL>

<P><STRONG><a name="[177]"></a>WST_OSW_MTX_enterCriticalRegion(WST_MTX*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_getRtosMutex()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX(const WST_MTX*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTimeOut(unsigned char*)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_malloc(unsigned)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_free(void*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventStart(unsigned char*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventEnd(unsigned char*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendBufferReset()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendError()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendOpCall(void*, void*, unsigned short, void*, void*)
</UL>

<P><STRONG><a name="[166]"></a>WST_OSW_MEM_malloc(unsigned)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
</UL>

<P><STRONG><a name="[167]"></a>WST_OSW_MEM_free(void*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>

<P><STRONG><a name="[195]"></a>WST_OSW_TMM_initTimerTask()</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WST_OSW_TMM_initTimerTask() &rArr; osTimerCreate &rArr; svcTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
</UL>

<P><STRONG><a name="[16b]"></a>WST_OSW_MSQ_init(WST_MSQ*)</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::WST_MSQ(unsigned short, void*, bool)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::WST_MSQ(unsigned short, bool)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startTaskAfterOSStart()
</UL>

<P><STRONG><a name="[198]"></a>WST_OSW_MSQ_cleanup(WST_MSQ*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_osw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>

<P><STRONG><a name="[173]"></a>WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
</UL>

<P><STRONG><a name="[175]"></a>WST_OSW_MTX_init(WST_MTX*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wst_osw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WST_OSW_MTX_init(WST_MTX*) &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_getRtosMutex()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX()
</UL>

<P><STRONG><a name="[17a]"></a>WST_OSW_MTX_cleanup(WST_MTX*)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wst_osw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_getRtosMutex()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::~WST_MTX()
</UL>

<P><STRONG><a name="[353]"></a>WST_RXF::WST_RXF()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_rxf.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>WST_RXF::WST_RXF__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_rxf.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>WST_RXF::~WST_RXF()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wst_rxf.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>WST_RXF::~WST_RXF__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_rxf.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>WST_RXF::initialize()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wst_rxf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WST_RXF::initialize() &rArr; WSTMonitor_init() &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
</UL>

<P><STRONG><a name="[107]"></a>WST_RXF::start()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wst_rxf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WST_RXF::start() &rArr; WST_TSK::execute() &rArr; WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEventStart(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
</UL>

<P><STRONG><a name="[19d]"></a>WST_TMM::WST_TMM()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_TMM::WST_TMM()
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::initTimeoutLists()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WST_TMM_cpp_5cffd7cf
</UL>

<P><STRONG><a name="[357]"></a>WST_TMM::WST_TMM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_tmm.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>WST_TMM::WSTTimeToTicks(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wst_tmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
</UL>

<P><STRONG><a name="[156]"></a>WST_TMM::stop(WST_TMR*)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WST_TMM::stop(WST_TMR*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancel(WST_TMR*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::cancel()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::cancelEvents(WST_FSM*)
</UL>

<P><STRONG><a name="[153]"></a>WST_TMM::cancelEvents(WST_FSM*)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = WST_TMM::cancelEvents(WST_FSM*) &rArr; WST_MSQ::cancelEvents(WST_FSM*, short) &rArr; WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::cancelEvents(WST_FSM*, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::cancelEventsAndTimeouts()
</UL>

<P><STRONG><a name="[19f]"></a>WST_TMM::getExpiredTimeout()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WST_TMM::getExpiredTimeout() &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
</UL>

<P><STRONG><a name="[1a0]"></a>WST_TMM::tick(short)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WST_TMM::tick(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
</UL>

<P><STRONG><a name="[18a]"></a>WST_TMM::processTimeouts()</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WST_TMM::processTimeouts() &rArr; WST_MSQ::put(WST_EVT*, bool) &rArr; WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::tick(short)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::getExpiredTimeout()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_timerCallBack(const void*)
</UL>

<P><STRONG><a name="[160]"></a>WST_TMM::start(unsigned, WST_FSM*)</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WST_TMM::start(unsigned, WST_FSM*) &rArr; WST_MTX::WST_MTX_exitCriticalRegion() &rArr; WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator new(unsigned)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::WSTTimeToTicks(unsigned)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_exitCriticalRegion()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX_enterCriticalRegion()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::scheduleTimeout(unsigned, char*)
</UL>

<P><STRONG><a name="[1a4]"></a>WST_TMM::initMutex()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WST_TMM::initMutex() &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
</UL>

<P><STRONG><a name="[1a5]"></a>WST_TMR::operator delete (void*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wst_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WST_TMR::operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::~WST_TMR__deallocating()
</UL>

<P><STRONG><a name="[1a1]"></a>WST_TMR::operator new(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wst_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WST_TMR::operator new(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_exitCriticalRegion
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_enterCriticalRegion
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
</UL>

<P><STRONG><a name="[1a6]"></a>WST_TMR::cancel()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::stop(WST_TMR*)
</UL>

<P><STRONG><a name="[19e]"></a>WST_TMR::initTimeoutLists()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wst_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::WST_TMM()
</UL>

<P><STRONG><a name="[11e]"></a>WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_init(WST_TSK*)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::WST_MSQ(unsigned short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::SequentialController(WST_TSK*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::EthernetController(WST_TSK*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::ActiveController(WST_TSK*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WSTRTOS_cpp_b410bc26
</UL>

<P><STRONG><a name="[358]"></a>WST_TSK::WST_TSK__sub_object(char*, unsigned char, unsigned short, unsigned short, bool)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, wst_tsk.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>WST_TSK::WST_TSK(unsigned char*, void*, unsigned char, unsigned short, unsigned short, bool)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, wst_tsk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_init(WST_TSK*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::WST_MSQ(unsigned short, void*, bool)
</UL>

<P><STRONG><a name="[359]"></a>WST_TSK::WST_TSK__sub_object(unsigned char*, void*, unsigned char, unsigned short, unsigned short, bool)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, wst_tsk.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>WST_TSK::cleanUpRelations()</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WST_TSK::cleanUpRelations() &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::~WST_MSQ()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::WST_MSQ(unsigned short, bool)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
</UL>

<P><STRONG><a name="[46]"></a>WST_TSK::~WST_TSK()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WST_TSK::~WST_TSK() &rArr; WST_TSK::cleanUpRelations() &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_cleanup(WST_TSK*)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::~WST_MSQ()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::cleanUpRelations()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::~SequentialController()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::~EthernetController()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::~ActiveController()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wstrtos.o(.text)
<LI> wst_tsk.o(.constdata__ZTV7WST_TSK)
</UL>
<P><STRONG><a name="[35a]"></a>WST_TSK::~WST_TSK__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wst_tsk.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>WST_TSK::~WST_TSK__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WST_TSK::~WST_TSK__deallocating() &rArr; WST_TSK::~WST_TSK() &rArr; WST_TSK::cleanUpRelations() &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tsk.o(.constdata__ZTV7WST_TSK)
</UL>
<P><STRONG><a name="[19c]"></a>WST_TSK::execute()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WST_TSK::execute() &rArr; WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEventStart(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_delay(unsigned)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::get()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF::start()
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::task_start(void*)
</UL>

<P><STRONG><a name="[1ac]"></a>WST_TSK::executeOnce()</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, wst_tsk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::get()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
</UL>

<P><STRONG><a name="[1ad]"></a>WST_TSK::endDispatching()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_tsk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_cleanup(WST_TSK*)
</UL>

<P><STRONG><a name="[41]"></a>WST_TSK::task_start(void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WST_TSK::task_start(void*) &rArr; WST_TSK::execute() &rArr; WST_FSM::takeEvent(WST_EVT*) &rArr; WSTMonitor_sendEventStart(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_osw.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>WST_TSK::startDispatching()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WST_TSK::startDispatching() &rArr; WST_OSW_TSK_start(WST_TSK*) &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_start(WST_TSK*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::startBehavior()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::startBehavior()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::startBehavior()
</UL>

<P><STRONG><a name="[1ae]"></a>WST_TSK::suspend()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_tsk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_suspend(WST_TSK*)
</UL>

<P><STRONG><a name="[1af]"></a>WST_TSK::resume()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wst_tsk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_resume(WST_TSK*)
</UL>

<P><STRONG><a name="[1b0]"></a>WST_TSK::startTaskAfterOSStart()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wst_tsk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WST_TSK::startTaskAfterOSStart() &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_init(WST_TSK*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_init(WST_MSQ*)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
</UL>

<P><STRONG><a name="[110]"></a>WSTMonitor_sendDataStruct(void*, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_IO_PutByte
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDestroy(void*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendInit(void*, unsigned short, void*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTimeOut(unsigned char*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventStart(unsigned char*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendEventEnd(unsigned char*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendBufferReset()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendError()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendOpCall(void*, void*, unsigned short, void*, void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendVersion()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendHighwater()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendStateSize()
</UL>

<P><STRONG><a name="[1b2]"></a>WSTMonitor_sendStateSize()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendStateSize() &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[1b3]"></a>WSTMonitor_sendHighwater()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendHighwater() &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[1b4]"></a>WSTMonitor_sendVersion()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendVersion() &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[1b8]"></a>WSTMonitor_resumeRxf()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wstmonitor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>

<P><STRONG><a name="[1b7]"></a>WSTMonitor_suspendRxf()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wstmonitor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>

<P><STRONG><a name="[1b5]"></a>WSTMonitor_performCmd()</STRONG> (Thumb, 642 bytes, Stack size 40 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WSTMonitor_performCmd() &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_IO_GetByte
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_suspendRxf()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_resumeRxf()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_Monitor_receiveTask(void*)
</UL>

<P><STRONG><a name="[1b9]"></a>WST_Monitor_receiveTask(void*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WST_Monitor_receiveTask(void*) &rArr; WSTMonitor_performCmd() &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitorIO_receiveIncomingData
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wstmonitor.o(.text)
</UL>
<P><STRONG><a name="[1bb]"></a>WST_Monitor_createReceiveTask()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WST_Monitor_createReceiveTask() &rArr; WST_OSW_TSK_userInit(void(*)(void*), osPriority, void*, unsigned short, void*) &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_userInit(void(*)(void*), osPriority, void*, unsigned short, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[19b]"></a>WSTMonitor_init()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WSTMonitor_init() &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendTypeSize()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX::WST_MTX()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_IO_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_Monitor_createReceiveTask()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendVersion()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendHighwater()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendStateSize()
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF::initialize()
</UL>

<P><STRONG><a name="[1bd]"></a>WSTMonitor_pollIncomingData()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wstmonitor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitorIO_receiveIncomingData
</UL>

<P><STRONG><a name="[126]"></a>WSTMonitor_sendInit(void*, unsigned short, void*)</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WSTMonitor_sendInit(void*, unsigned short, void*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::SequentialController(WST_TSK*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::TestBuilder(WST_TSK*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::LED(WST_TSK*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::LED(int, WST_TSK*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::EthernetController(WST_TSK*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::ActiveController(WST_TSK*)
</UL>

<P><STRONG><a name="[12a]"></a>WSTMonitor_sendDestroy(void*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendDestroy(void*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBuilder::~TestBuilder()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequentialController::~SequentialController()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::~LED()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::~EthernetController()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::~ActiveController()
</UL>

<P><STRONG><a name="[1be]"></a>WSTMonitor_sendOpCall(void*, void*, unsigned short, void*, void*)</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, wstmonitor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_getRxfTicks()
</UL>

<P><STRONG><a name="[15e]"></a>WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WSTMonitor_sendEventCreate(unsigned char*, unsigned char, unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::handleSyncEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[15a]"></a>WSTMonitor_sendEventStart(unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendEventStart(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[15c]"></a>WSTMonitor_sendEventEnd(unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendEventEnd(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[172]"></a>WSTMonitor_sendTimeOut(unsigned char*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wstmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WSTMonitor_sendTimeOut(unsigned char*) &rArr; WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
</UL>

<P><STRONG><a name="[1bf]"></a>WSTMonitor_sendError()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wstmonitor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>

<P><STRONG><a name="[1c0]"></a>WSTMonitor_sendBufferReset()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wstmonitor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
</UL>

<P><STRONG><a name="[1bc]"></a>WSTMonitor_IO_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wstmonitorio_keil_cortexm3_itm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_init()
</UL>

<P><STRONG><a name="[1b1]"></a>WSTMonitor_IO_PutByte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wstmonitorio_keil_cortexm3_itm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendDataStruct(void*, unsigned short)
</UL>

<P><STRONG><a name="[1b6]"></a>WSTMonitor_IO_GetByte</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wstmonitorio_keil_cortexm3_itm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_performCmd()
</UL>

<P><STRONG><a name="[1ba]"></a>WSTMonitorIO_receiveIncomingData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wstmonitorio_keil_cortexm3_itm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_pollIncomingData()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_Monitor_receiveTask(void*)
</UL>

<P><STRONG><a name="[112]"></a>WSTRTOS_Init()</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, wstrtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = WSTRTOS_Init() &rArr; WST_RXF_Main(short, char**) &rArr; TestBuilder::TestBuilder(WST_TSK*) &rArr; EthernetController::EthernetController(WST_TSK*) &rArr; connect &rArr; net_tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_RXF_Main(short, char**)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::initMutex()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_initTimerTask()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_ERR::error(const WST_ERR::ErrorCode&, const unsigned&)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::startTaskAfterOSStart()
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35b]"></a>WSTRTOS_Cleanup()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wstrtos.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>WSTRTOS_incrementRxfTicks()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wstrtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_timerCallBack(const void*)
</UL>

<P><STRONG><a name="[159]"></a>WSTRTOS_getRxfTicks()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wstrtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::WST_TMM()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::processTimeouts()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MSQ::put(WST_EVT*, bool)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::handleSyncEvent(WST_EVT*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTMonitor_sendOpCall(void*, void*, unsigned short, void*, void*)
</UL>

<P><STRONG><a name="[164]"></a>WSTTarget_enterCriticalRegion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wsttarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator new(unsigned)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator delete (void*)
</UL>

<P><STRONG><a name="[165]"></a>WSTTarget_exitCriticalRegion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wsttarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator new(unsigned)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator delete (void*)
</UL>

<P><STRONG><a name="[111]"></a>WSTTarget_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wsttarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WSTTarget_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35c]"></a>WSTTarget_Cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wsttarget.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>os_def_interrupt()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wsttarget.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>WSTTarget_isInISR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wsttarget.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[e0]"></a>os_error</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[e1]"></a>rt_init_robin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[e2]"></a>rt_chk_robin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[e3]"></a>__user_perthread_libspace</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>

<P><STRONG><a name="[e4]"></a>_mutex_initialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[e5]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[e6]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[38]"></a>ENET_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ENET_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[35f]"></a>GPIO_PortClock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpio_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>GPIO_SetDir</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, gpio_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uninitialize
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
</UL>

<P><STRONG><a name="[1c6]"></a>GPIO_PinWrite</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gpio_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
</UL>

<P><STRONG><a name="[360]"></a>GPIO_PinRead</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>GPIO_PortWrite</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, gpio_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>GPIO_PortRead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
</UL>

<P><STRONG><a name="[1cd]"></a>PIN_Configure</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, pin_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIN_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uninitialize
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[362]"></a>PIN_ConfigureTPIU</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pin_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>PIN_ConfigureI2C0Pins</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pin_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[205]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1d1]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, system_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTTarget_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[1d3]"></a>netos_thread_create</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = netos_thread_create &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[1d4]"></a>netos_thread_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_suspend
</UL>

<P><STRONG><a name="[1d5]"></a>netos_thread_pass</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[1d7]"></a>netos_timer_create</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_timer_create &rArr; osTimerCreate &rArr; svcTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[1d8]"></a>netos_timer_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[1d9]"></a>netos_mutex_create</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_mutex_create &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
</UL>

<P><STRONG><a name="[1da]"></a>netos_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>

<P><STRONG><a name="[1db]"></a>netos_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
</UL>

<P><STRONG><a name="[1dc]"></a>netos_flag_wait</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_suspend
</UL>

<P><STRONG><a name="[1de]"></a>netos_flag_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_notify
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_resume
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
</UL>

<P><STRONG><a name="[1e0]"></a>netos_flag_clear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalClear
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[1e2]"></a>netos_delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1e3]"></a>netif_create</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = netif_create &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[1e5]"></a>netif_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>

<P><STRONG><a name="[1e7]"></a>netif_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
</UL>

<P><STRONG><a name="[28d]"></a>net_igmp_is_member</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[282]"></a>net_igmp_collect_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
</UL>

<P><STRONG><a name="[277]"></a>net_igmp_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[364]"></a>netDHCP_Enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>netDHCP_Disable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>net_ppp_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[366]"></a>net_ppp_get_option</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>net_ppp_set_option</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>net_slip_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[368]"></a>net_slip_get_option</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>net_slip_set_option</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>netSNTPc_GetTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>net_sys_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_socket
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[36b]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_aton
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
</UL>

<P><STRONG><a name="[1ec]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[fb]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WST_TMR_cpp_d87a1f05
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WSTRTOS_cpp_b410bc26
</UL>

<P><STRONG><a name="[24c]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_prefix_add
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_is_onlink
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::reallocMemory(unsigned, unsigned, void*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[1f0]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[36c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MTX_inUse::WST_MTX_inUse(const WST_MTX*)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::cleanUpRelations()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[36d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_init
</UL>

<P><STRONG><a name="[1f1]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[370]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::start(unsigned, WST_FSM*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_release_socket
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_init
</UL>

<P><STRONG><a name="[371]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[2e9]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[e7]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func3&rang;
</UL>

<P><STRONG><a name="[1f3]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[1f4]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1ef]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[1f8]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[1f9]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1ed]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[1eb]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[4b]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxa_finalize &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[1f7]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ef]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[1fb]"></a>__rt_new_handler_addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_new_handler_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_new_handler_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[373]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[1fd]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ed]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[1ff]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[c]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1fa]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[51]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[200]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[201]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[ff]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[f5]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[203]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_eh_globals_addr_twolibspace.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1fc]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[202]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[1fe]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[204]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[375]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[206]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[207]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[20a]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[209]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[20b]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[a6]"></a>evReceivedData::~evReceivedData__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, examplepkg.o(i._ZN14evReceivedDataD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evReceivedData::~evReceivedData__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evReceivedData::~evReceivedData()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> examplepkg.o(.constdata__ZTV14evReceivedData)
</UL>
<P><STRONG><a name="[a5]"></a>evReceivedData::~evReceivedData()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, examplepkg.o(i._ZN14evReceivedDataD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evReceivedData::~evReceivedData__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> examplepkg.o(.constdata__ZTV14evReceivedData)
</UL>
<P><STRONG><a name="[37a]"></a>evReceivedData::~evReceivedData__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, examplepkg.o(i._ZN14evReceivedDataD1Ev), UNUSED)

<P><STRONG><a name="[cf]"></a>evOn::~evOn__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, examplepkg.o(i._ZN4evOnD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evOn::~evOn__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOn::~evOn()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> examplepkg.o(.constdata__ZTV4evOn)
</UL>
<P><STRONG><a name="[ce]"></a>evOn::~evOn()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, examplepkg.o(i._ZN4evOnD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOn::~evOn__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> examplepkg.o(.constdata__ZTV4evOn)
</UL>
<P><STRONG><a name="[37b]"></a>evOn::~evOn__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, examplepkg.o(i._ZN4evOnD1Ev), UNUSED)

<P><STRONG><a name="[d2]"></a>evOff::~evOff__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, examplepkg.o(i._ZN5evOffD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evOff::~evOff__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOff::~evOff()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> examplepkg.o(.constdata__ZTV5evOff)
</UL>
<P><STRONG><a name="[d1]"></a>evOff::~evOff()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, examplepkg.o(i._ZN5evOffD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOff::~evOff__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> examplepkg.o(.constdata__ZTV5evOff)
</UL>
<P><STRONG><a name="[37c]"></a>evOff::~evOff__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, examplepkg.o(i._ZN5evOffD1Ev), UNUSED)

<P><STRONG><a name="[13a]"></a>WST_EVT::WST_EVT()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, examplepkg.o(i._ZN7WST_EVTC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evReceivedData::evReceivedData()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOff::evOff()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evOn::evOn()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evToggle::evToggle()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::startBehavior()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_FSM::takeEvent(WST_EVT*)
</UL>

<P><STRONG><a name="[37d]"></a>WST_EVT::WST_EVT__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, examplepkg.o(i._ZN7WST_EVTC1Ev), UNUSED)

<P><STRONG><a name="[d4]"></a>WST_EVT::~WST_EVT__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, examplepkg.o(i._ZN7WST_EVTD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WST_EVT::~WST_EVT__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> examplepkg.o(.constdata__ZTV7WST_EVT)
</UL>
<P><STRONG><a name="[44]"></a>WST_TMR::WST_TMR()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wst_tmr.o(i._ZN7WST_TMRC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> wst_tmr.o(.text)
</UL>
<P><STRONG><a name="[37e]"></a>WST_TMR::WST_TMR__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_tmr.o(i._ZN7WST_TMRC1Ev), UNUSED)

<P><STRONG><a name="[d7]"></a>WST_TMR::~WST_TMR__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wst_tmm.o(i._ZN7WST_TMRD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WST_TMR::~WST_TMR__deallocating() &rArr; WST_TMR::operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::operator delete (void*)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::~WST_TMR()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tmm.o(.constdata__ZTV7WST_TMR)
</UL>
<P><STRONG><a name="[43]"></a>WST_TMR::~WST_TMR()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wst_tmm.o(i._ZN7WST_TMRD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMR::~WST_TMR__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wst_tmm.o(.constdata__ZTV7WST_TMR)
<LI> wst_tmr.o(.text)
</UL>
<P><STRONG><a name="[37f]"></a>WST_TMR::~WST_TMR__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wst_tmm.o(i._ZN7WST_TMRD1Ev), UNUSED)

<P><STRONG><a name="[da]"></a>evToggle::~evToggle__deallocating()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, examplepkg.o(i._ZN8evToggleD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evToggle::~evToggle__deallocating() &rArr; WST_MEM::returnMemory(void*) &rArr; WST_OSW_MEM_free(void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evToggle::~evToggle()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::returnMemory(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> examplepkg.o(.constdata__ZTV8evToggle)
</UL>
<P><STRONG><a name="[d9]"></a>evToggle::~evToggle()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, examplepkg.o(i._ZN8evToggleD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evToggle::~evToggle__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> examplepkg.o(.constdata__ZTV8evToggle)
</UL>
<P><STRONG><a name="[380]"></a>evToggle::~evToggle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, examplepkg.o(i._ZN8evToggleD1Ev), UNUSED)

<P><STRONG><a name="[194]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete (void*) &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_free(void*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::~WST_TSK__deallocating()
</UL>

<P><STRONG><a name="[193]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MEM_malloc(unsigned)
</UL>

<P><STRONG><a name="[20c]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_WST_TMR_cpp_d87a1f05
</UL>

<P><STRONG><a name="[162]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_MEM::getMemory(unsigned)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
</UL>

<P><STRONG><a name="[2cf]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[124]"></a>bind</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, net_bsd.o(i.bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bind &rArr; bsd_open_udp &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_addr_valid
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_open_udp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_transfer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::EthernetController(WST_TSK*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::ActiveController(WST_TSK*)
</UL>

<P><STRONG><a name="[129]"></a>closesocket</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, net_bsd.o(i.closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = closesocket &rArr; bsd_kill_socket &rArr; net_tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_first
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_wait
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_state
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::~ActiveController()
</UL>

<P><STRONG><a name="[125]"></a>connect</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, net_bsd.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = connect &rArr; net_tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_addr_valid
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_addr_unspec
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_wait
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_open_udp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_transfer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::EthernetController(WST_TSK*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::ActiveController(WST_TSK*)
</UL>

<P><STRONG><a name="[2ce]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[2d4]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[2cc]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[23c]"></a>isrMessageGet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[23e]"></a>isrMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[241]"></a>isrSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.isrSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[244]"></a>isrSignalSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[246]"></a>isr_evt_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_event.o(i.isr_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>

<P><STRONG><a name="[23d]"></a>isr_mbx_receive</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>

<P><STRONG><a name="[240]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[243]"></a>isr_sem_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_semaphore.o(i.isr_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[8d]"></a>netCore_Thread</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, net_sys.o(i.netCore_Thread))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_proc_tick
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[26f]"></a>netETH_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(i.netETH_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[8e]"></a>netETH_Thread</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, net_eth.o(i.netETH_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = netETH_Thread &rArr; eth_receive &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_check_link
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>netInitialize</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_sys.o(i.netInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = netInitialize &rArr; netos_thread_create &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::ActiveController(WST_TSK*)
</UL>

<P><STRONG><a name="[262]"></a>netMAC_aton</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, net_addr.o(i.netMAC_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netMAC_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[263]"></a>net_addr4_aton</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, net_addr.o(i.net_addr4_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[238]"></a>net_addr4_is_subnet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr.o(i.net_addr4_is_subnet))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_route
</UL>

<P><STRONG><a name="[264]"></a>net_addr6_aton</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, net_addr.o(i.net_addr6_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = net_addr6_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[23a]"></a>net_addr6_comp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_comp))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_comp
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_refresh
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_get_route
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_proc_response
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
</UL>

<P><STRONG><a name="[20e]"></a>net_addr6_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_copy))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_transfer
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_from
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_copy
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_router_remove
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
</UL>

<P><STRONG><a name="[254]"></a>net_addr6_create</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, net_addr.o(i.net_addr6_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_addr6_create
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_slaac_run
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_prefix_add
</UL>

<P><STRONG><a name="[287]"></a>net_addr6_get_solicited</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_get_solicited))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
</UL>

<P><STRONG><a name="[298]"></a>net_addr6_is_linklocal</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_is_linklocal))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[252]"></a>net_addr6_is_onlink</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, net_addr.o(i.net_addr6_is_onlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_addr6_is_onlink
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_is_onlink
</UL>

<P><STRONG><a name="[292]"></a>net_addr6_is_solicited</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_is_solicited))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
</UL>

<P><STRONG><a name="[23b]"></a>net_addr6_is_unspec</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_is_unspec))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_addr_unspec
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[21f]"></a>net_addr_comp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_comp))
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
</UL>

<P><STRONG><a name="[21b]"></a>net_addr_copy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_copy))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
</UL>

<P><STRONG><a name="[265]"></a>net_addr_get_local</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_get_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_addr_get_local &rArr; net_ip4_get_local &rArr; ip4_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
</UL>

<P><STRONG><a name="[230]"></a>net_addr_is_unspec</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_is_unspec))
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
</UL>

<P><STRONG><a name="[267]"></a>net_arp_cache_add</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = net_arp_cache_add &rArr; arp_cache_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subnet
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[26a]"></a>net_arp_cache_early</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_early))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_arp_cache_early &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subnet
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[26b]"></a>net_arp_cache_find</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subnet
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[270]"></a>net_arp_init</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, net_arp.o(i.net_arp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_arp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[9b]"></a>net_arp_notify</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_arp.o(i.net_arp_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_arp_notify &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[26c]"></a>net_arp_process</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = net_arp_process &rArr; arp_send_reply &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[26e]"></a>net_arp_run</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_arp_run &rArr; arp_probe_run &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[221]"></a>net_bsd_notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_bsd.o(i.net_bsd_notify))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
</UL>

<P><STRONG><a name="[220]"></a>net_bsd_resume</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_bsd.o(i.net_bsd_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_bsd_resume &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
</UL>

<P><STRONG><a name="[98]"></a>net_bsd_socket_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_bsd.o(i.net_bsd_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_bsd_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>net_bsd_socket_run</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, net_bsd.o(i.net_bsd_socket_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_bsd_socket_run &rArr; bsd_enable &rArr; net_bsd_resume &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[229]"></a>net_bsd_suspend</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, net_bsd.o(i.net_bsd_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_bsd_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_id
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_wait
</UL>

<P><STRONG><a name="[8f]"></a>net_eth_iface_init</STRONG> (Thumb, 502 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = net_eth_iface_init &rArr; net_addr6_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_memcrc
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_aton
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>net_eth_iface_run</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = net_eth_iface_run &rArr; net_icmp6_process &rArr; net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_run
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_refresh
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_run
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[28e]"></a>net_eth_is_my_addr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_eth.o(i.net_eth_is_my_addr))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[214]"></a>net_eth_output</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, net_eth.o(i.net_eth_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[27d]"></a>net_eth_send_frame</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, net_eth.o(i.net_eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_make_mcast6
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_make_mcast4
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_subcast
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[274]"></a>net_eth_update_filter</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, net_eth.o(i.net_eth_update_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_eth_update_filter &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_make_mcast6
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_make_mcast4
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_collect_addr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[27a]"></a>net_icmp6_process</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, net_icmp6.o(i.net_icmp6_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = net_icmp6_process &rArr; net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_checksum
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_netif
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[25b]"></a>net_icmp6_send</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, net_icmp6.o(i.net_icmp6_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offload
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_checksum
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_get_solicited
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
</UL>

<P><STRONG><a name="[289]"></a>net_icmp6_send_echo</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, net_icmp6.o(i.net_icmp6_send_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = net_icmp6_send_echo &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>

<P><STRONG><a name="[276]"></a>net_icmp_process</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, net_icmp.o(i.net_icmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = net_icmp_process &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[28b]"></a>net_icmp_send_echo</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, net_icmp.o(i.net_icmp_send_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offload
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>

<P><STRONG><a name="[2a2]"></a>net_ip4_checksum</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[275]"></a>net_ip4_chk_frame</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = net_ip4_chk_frame &rArr; ip4_get_chksum &rArr; net_ip4_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_is_member
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_subcast
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_is_my_addr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[236]"></a>net_ip4_chksum_buf</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, net_ip4.o(i.net_ip4_chksum_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_ip4_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>

<P><STRONG><a name="[266]"></a>net_ip4_get_local</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, net_ip4.o(i.net_ip4_get_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ip4_get_local &rArr; ip4_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
</UL>

<P><STRONG><a name="[293]"></a>net_ip4_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[27f]"></a>net_ip4_is_subcast</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_is_subcast))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[28a]"></a>net_ip4_send_frame</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, net_ip4.o(i.net_ip4_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_slip_send_frame
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ppp_send_frame
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[28c]"></a>net_ip4_tx_offload</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_tx_offload))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_ip4_tx_offload &rArr; ip4_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
</UL>

<P><STRONG><a name="[283]"></a>net_ip6_checksum</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, net_ip6.o(i.net_ip6_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ip6_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
</UL>

<P><STRONG><a name="[278]"></a>net_ip6_chk_frame</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, net_ip6.o(i.net_ip6_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_ip6_chk_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_solicited
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[25c]"></a>net_ip6_get_local</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, net_ip6.o(i.net_ip6_get_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ip6_get_local &rArr; ip6_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
</UL>

<P><STRONG><a name="[294]"></a>net_ip6_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, net_ip6.o(i.net_ip6_init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[285]"></a>net_ip6_send_frame</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, net_ip6.o(i.net_ip6_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
</UL>

<P><STRONG><a name="[284]"></a>net_ip6_tx_netif</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ip6.o(i.net_ip6_tx_netif))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[288]"></a>net_ip6_tx_offload</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, net_ip6.o(i.net_ip6_tx_offload))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ip6_tx_offload &rArr; ip6_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
</UL>

<P><STRONG><a name="[91]"></a>net_loop_iface_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_loop.o(i.net_loop_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_loop_iface_init
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>net_loop_iface_run</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, net_loop.o(i.net_loop_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = net_loop_iface_run &rArr; net_icmp6_process &rArr; net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[291]"></a>net_loop_send_frame</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, net_loop.o(i.net_loop_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_loop_send_frame &rArr; net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[213]"></a>net_mem_alloc</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_buf
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
</UL>

<P><STRONG><a name="[2ac]"></a>net_mem_avail</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_mem.o(i.net_mem_avail))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[215]"></a>net_mem_free</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_clear_chain
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
</UL>

<P><STRONG><a name="[261]"></a>net_mem_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_mem_init &rArr; netos_mutex_create &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[295]"></a>net_mem_shrink</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_shrink
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
</UL>

<P><STRONG><a name="[272]"></a>net_memcrc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net_common.o(i.net_memcrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_memcrc
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[9a]"></a>net_nbns_client_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, net_nbns_client.o(i.net_nbns_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_nbns_client_init &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[281]"></a>net_ndp_cache_find</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, net_ndp.o(i.net_ndp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_ndp_cache_find &rArr; ndp_is_onlink &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_linklocal
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_is_onlink
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[279]"></a>net_ndp_cache_refresh</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, net_ndp.o(i.net_ndp_cache_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ndp_cache_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[271]"></a>net_ndp_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, net_ndp.o(i.net_ndp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ndp_init &rArr; net_addr6_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_create
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[286]"></a>net_ndp_process</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, net_ndp.o(i.net_ndp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_linklocal
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_router_remove
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_proc_response
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_prefix_add
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_next_opt
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_check_frame
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[273]"></a>net_ndp_run</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, net_ndp.o(i.net_ndp_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = net_ndp_run &rArr; ndp_slaac_run &rArr; ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_slaac_run
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_router_remove
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_probe_run
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[93]"></a>net_ping_client_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ping.o(i.net_ping_client_init))
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>net_ping_client_run</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, net_ping.o(i.net_ping_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = net_ping_client_run &rArr; ping_send_req &rArr; net_icmp6_send_echo &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[25e]"></a>net_rand32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_sys.o(i.net_rand32))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_proc_tick
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_slaac_run
</UL>

<P><STRONG><a name="[24b]"></a>net_strtoupper</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_common.o(i.net_strtoupper))
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strtoupper
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[216]"></a>net_sys_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_lock))
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_suspend
</UL>

<P><STRONG><a name="[8c]"></a>net_sys_tick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_sys_tick &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[219]"></a>net_sys_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_suspend
</UL>

<P><STRONG><a name="[233]"></a>net_sys_wakeup</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_sys_wakeup &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_tick
</UL>

<P><STRONG><a name="[223]"></a>net_tcp_abort</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = net_tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
</UL>

<P><STRONG><a name="[29e]"></a>net_tcp_alloc_port</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, net_tcp.o(i.net_tcp_alloc_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_tcp_alloc_port
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
</UL>

<P><STRONG><a name="[2db]"></a>net_tcp_check_send</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_check_send))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[22a]"></a>net_tcp_close</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, net_tcp.o(i.net_tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = net_tcp_close &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[22f]"></a>net_tcp_connect</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, net_tcp.o(i.net_tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = net_tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_copy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_alloc_port
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[29f]"></a>net_tcp_get_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_tcp_get_buf &rArr; net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[2dc]"></a>net_tcp_get_mss</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_get_mss))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[2a0]"></a>net_tcp_get_socket</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[22b]"></a>net_tcp_get_state</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_run
</UL>

<P><STRONG><a name="[22d]"></a>net_tcp_listen</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_tcp_listen &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_run
</UL>

<P><STRONG><a name="[27c]"></a>net_tcp_process</STRONG> (Thumb, 1294 bytes, Stack size 48 bytes, net_tcp.o(i.net_tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_cwnd
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_checksum
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[224]"></a>net_tcp_release_socket</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_release_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_tcp_release_socket &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
</UL>

<P><STRONG><a name="[2a8]"></a>net_tcp_reset_window</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_reset_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = net_tcp_reset_window &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[2a9]"></a>net_tcp_send</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, net_tcp.o(i.net_tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[96]"></a>net_tcp_socket_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_tcp_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>net_tcp_socket_run</STRONG> (Thumb, 748 bytes, Stack size 32 bytes, net_tcp.o(i.net_tcp_socket_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = net_tcp_socket_run &rArr; tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[225]"></a>net_udp_close</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_udp.o(i.net_udp_close))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
</UL>

<P><STRONG><a name="[24d]"></a>net_udp_get_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_udp_get_buf &rArr; net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[297]"></a>net_udp_get_socket</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_udp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
</UL>

<P><STRONG><a name="[227]"></a>net_udp_open</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, net_udp.o(i.net_udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_open_udp
</UL>

<P><STRONG><a name="[27b]"></a>net_udp_process</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, net_udp.o(i.net_udp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_udp_process &rArr; net_ip6_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_checksum
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_checksum
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[226]"></a>net_udp_release_socket</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, net_udp.o(i.net_udp_release_socket))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
</UL>

<P><STRONG><a name="[24e]"></a>net_udp_send</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, net_udp.o(i.net_udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = net_udp_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offload
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_checksum
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offload
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_checksum
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[95]"></a>net_udp_socket_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_udp.o(i.net_udp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_udp_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>osDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_delay(unsigned)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
</UL>

<P><STRONG><a name="[100]"></a>osKernelInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[1c1]"></a>osKernelRunning</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelRunning))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
</UL>

<P><STRONG><a name="[102]"></a>osKernelStart</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[1d0]"></a>osKernelSysTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelSysTick))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
</UL>

<P><STRONG><a name="[18c]"></a>osMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMessageCreate &rArr; svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_init(WST_MSQ*)
</UL>

<P><STRONG><a name="[18d]"></a>osMessageGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_get(WST_MSQ*, WST_EVT**)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[18e]"></a>osMessagePut</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_cancelEvents(WST_MSQ*, const WST_FSM*, short)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MSQ_put(WST_MSQ*, WST_EVT*, bool)
</UL>

<P><STRONG><a name="[199]"></a>osMutexCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_init(WST_MTX*)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
</UL>

<P><STRONG><a name="[19a]"></a>osMutexDelete</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexDelete), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_cleanup(WST_MTX*)
</UL>

<P><STRONG><a name="[191]"></a>osMutexRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_exitCriticalRegion(WST_MTX*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>

<P><STRONG><a name="[192]"></a>osMutexWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexWait))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_MTX_enterCriticalRegion(WST_MTX*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>

<P><STRONG><a name="[1e4]"></a>osSemaphoreCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSemaphoreCreate &rArr; svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
</UL>

<P><STRONG><a name="[1e8]"></a>osSemaphoreRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>

<P><STRONG><a name="[1e6]"></a>osSemaphoreWait</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreWait))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>

<P><STRONG><a name="[1e1]"></a>osSignalClear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSignalClear))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
</UL>

<P><STRONG><a name="[1df]"></a>osSignalSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>

<P><STRONG><a name="[1dd]"></a>osSignalWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSignalWait))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
</UL>

<P><STRONG><a name="[101]"></a>osThreadCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_start(WST_TSK*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_userInit(void(*)(void*), osPriority, void*, unsigned short, void*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
</UL>

<P><STRONG><a name="[70]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[1c2]"></a>osThreadGetId</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WSTRTOS_Init()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_id
</UL>

<P><STRONG><a name="[184]"></a>osThreadTerminate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadTerminate))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TSK_cleanup(WST_TSK*)
</UL>

<P><STRONG><a name="[1d6]"></a>osThreadYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadYield))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
</UL>

<P><STRONG><a name="[2b0]"></a>osTimerCall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCall))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[196]"></a>osTimerCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osTimerCreate &rArr; svcTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_initTimerTask()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
</UL>

<P><STRONG><a name="[197]"></a>osTimerStart</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_OSW_TMM_initTimerTask()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
</UL>

<P><STRONG><a name="[71]"></a>osTimerThread</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTimerThread &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[2d1]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[119]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[2e0]"></a>os_tick_ovf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_ovf))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelSysTick
</UL>

<P><STRONG><a name="[2df]"></a>os_tick_val</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_val))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelSysTick
</UL>

<P><STRONG><a name="[138]"></a>recv</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, net_bsd.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = recv &rArr; recvfrom &rArr; net_tcp_reset_window &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_data(int, char*)
</UL>

<P><STRONG><a name="[2b1]"></a>recvfrom</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, net_bsd.o(i.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = recvfrom &rArr; net_tcp_reset_window &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_wait
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_from
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_reset_window
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[3f]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[2e4]"></a>rt_alloc_mem</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[2b2]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[2b6]"></a>rt_dec_dly</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[2b8]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[2ba]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[2e3]"></a>rt_evt_clr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_event.o(i.rt_evt_clr))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalClear
</UL>

<P><STRONG><a name="[2bb]"></a>rt_evt_psh</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[2be]"></a>rt_evt_set</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
</UL>

<P><STRONG><a name="[2bf]"></a>rt_evt_wait</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
</UL>

<P><STRONG><a name="[40]"></a>rt_free_box</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[2e5]"></a>rt_free_mem</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[2b4]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[2d8]"></a>rt_get_same_rdy_prio</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_same_rdy_prio))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>

<P><STRONG><a name="[2de]"></a>rt_init_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[2c1]"></a>rt_init_stack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[23f]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[2e1]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[2c2]"></a>rt_mbx_psh</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[2c4]"></a>rt_mbx_send</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessagePut
</UL>

<P><STRONG><a name="[2c5]"></a>rt_mbx_wait</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[2c6]"></a>rt_mut_delete</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexDelete
</UL>

<P><STRONG><a name="[1c4]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>

<P><STRONG><a name="[48]"></a>rt_mut_release</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>rt_mut_wait</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[248]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[247]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[2b3]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[2b7]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
</UL>

<P><STRONG><a name="[2b9]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[2c7]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
</UL>

<P><STRONG><a name="[2c3]"></a>rt_ret_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[2bd]"></a>rt_ret_val2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[2bc]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[2c9]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[2e2]"></a>rt_sem_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_semaphore.o(i.rt_sem_init))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>

<P><STRONG><a name="[2c8]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[2ca]"></a>rt_sem_send</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
</UL>

<P><STRONG><a name="[2cb]"></a>rt_sem_wait</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
</UL>

<P><STRONG><a name="[115]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[2b5]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[2cd]"></a>rt_sys_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[2d0]"></a>rt_sys_start</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[117]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2d3]"></a>rt_tsk_create</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[2d5]"></a>rt_tsk_delete</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[2d7]"></a>rt_tsk_pass</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_same_rdy_prio
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadYield
</UL>

<P><STRONG><a name="[2d9]"></a>rt_tsk_prio</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[1c3]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[139]"></a>send</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, net_bsd.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = send &rArr; sendto &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data(int, const char*)
</UL>

<P><STRONG><a name="[2da]"></a>sendto</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, net_bsd.o(i.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sendto &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_addr_valid
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_addr_unspec
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_wait
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_open_udp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_transfer
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_mss
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_buf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_check_send
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[123]"></a>socket</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, net_bsd.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = socket &rArr; net_tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_socket
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetController::EthernetController(WST_TSK*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveController::ActiveController(WST_TSK*)
</UL>

<P><STRONG><a name="[54]"></a>svcDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osDelay)
</UL>
<P><STRONG><a name="[55]"></a>svcKernelInitialize</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[56]"></a>svcKernelRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_cmsis.o(i.svcKernelRunning))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelRunning)
</UL>
<P><STRONG><a name="[57]"></a>svcKernelStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[58]"></a>svcKernelSysTick</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcKernelSysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_val
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_ovf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelSysTick)
</UL>
<P><STRONG><a name="[59]"></a>svcMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessageCreate)
</UL>
<P><STRONG><a name="[5a]"></a>svcMessageGet</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rt_cmsis.o(i.svcMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessageGet)
</UL>
<P><STRONG><a name="[5b]"></a>svcMessagePut</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMessagePut &rArr; rt_mbx_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessagePut)
</UL>
<P><STRONG><a name="[5c]"></a>svcMutexCreate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexCreate)
</UL>
<P><STRONG><a name="[5d]"></a>svcMutexDelete</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexDelete &rArr; rt_mut_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexDelete)
</UL>
<P><STRONG><a name="[5e]"></a>svcMutexRelease</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexRelease &rArr; rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[5f]"></a>svcMutexWait</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcMutexWait &rArr; rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexWait)
</UL>
<P><STRONG><a name="[60]"></a>svcSemaphoreCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreCreate)
</UL>
<P><STRONG><a name="[61]"></a>svcSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svcSemaphoreRelease &rArr; rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[62]"></a>svcSemaphoreWait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcSemaphoreWait &rArr; rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreWait)
</UL>
<P><STRONG><a name="[63]"></a>svcSignalClear</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcSignalClear
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_clr
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalClear)
</UL>
<P><STRONG><a name="[64]"></a>svcSignalSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcSignalSet &rArr; rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalSet)
</UL>
<P><STRONG><a name="[65]"></a>svcSignalWait</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcSignalWait &rArr; rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalWait)
</UL>
<P><STRONG><a name="[66]"></a>svcThreadCreate</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[67]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rt_cmsis.o(i.osThreadExit)
<LI> rt_cmsis.o(i.osThreadGetId)
</UL>
<P><STRONG><a name="[68]"></a>svcThreadTerminate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rt_cmsis.o(i.osThreadExit)
<LI> rt_cmsis.o(i.osThreadTerminate)
</UL>
<P><STRONG><a name="[69]"></a>svcThreadYield</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcThreadYield &rArr; rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadYield)
</UL>
<P><STRONG><a name="[6a]"></a>svcTimerCall</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCall)
</UL>
<P><STRONG><a name="[6b]"></a>svcTimerCreate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCreate)
</UL>
<P><STRONG><a name="[6c]"></a>svcTimerStart</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcTimerStart &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerStart)
</UL>
<P><STRONG><a name="[2d2]"></a>sysTimerTick</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[4d]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[dc]"></a>__sti___11_WST_TMM_cpp_5cffd7cf</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wst_tmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___11_WST_TMM_cpp_5cffd7cf &rArr; WST_TMM::WST_TMM()
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TMM::WST_TMM()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tmm.o(.init_array)
</UL>
<P><STRONG><a name="[45]"></a>&lang;Func3&rang;</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wst_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = &lang;Func3&rang; &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tmr.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>__sti___11_WST_TMR_cpp_d87a1f05</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wst_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __sti___11_WST_TMR_cpp_d87a1f05 &rArr; __aeabi_atexit &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wst_tmr.o(.init_array)
</UL>
<P><STRONG><a name="[de]"></a>__sti___11_WSTRTOS_cpp_b410bc26</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wstrtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __sti___11_WSTRTOS_cpp_b410bc26 &rArr; WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool) &rArr; WST_MSQ::WST_MSQ(unsigned short, bool) &rArr; WST_OSW_MSQ_init(WST_MSQ*) &rArr; WST_MEM::getMemory(unsigned) &rArr; WST_OSW_MEM_malloc(unsigned) &rArr;  WST_MEM::getMemory(unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WST_TSK::WST_TSK(char*, unsigned char, unsigned short, unsigned short, bool)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wstrtos.o(.init_array)
</UL>
<P><STRONG><a name="[1c5]"></a>output_MDIO</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = output_MDIO &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
</UL>

<P><STRONG><a name="[1c7]"></a>turnaround_MDIO</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = turnaround_MDIO &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
</UL>

<P><STRONG><a name="[1c9]"></a>input_MDIO</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = input_MDIO &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortRead
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
</UL>

<P><STRONG><a name="[1ce]"></a>init_rx_desc</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[1cf]"></a>init_tx_desc</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[1cc]"></a>crc32_8bit_rev</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>

<P><STRONG><a name="[1cb]"></a>crc32_data</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddressFilter
</UL>

<P><STRONG><a name="[73]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>Initialize</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Initialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_Configure
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>Uninitialize</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uninitialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_Configure
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>PowerControl</STRONG> (Thumb, 558 bytes, Stack size 24 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_desc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_desc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>GetMacAddress</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>SetMacAddress</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>SetAddressFilter</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetAddressFilter &rArr; crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>SendFrame</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>ReadFrame</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReadFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>GetRxFrameSize</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>GetRxFrameTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>GetTxFrameTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>Control</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Control
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_desc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_desc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>ControlTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>PHY_Read</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PHY_Read &rArr; input_MDIO &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>PHY_Write</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PHY_Write &rArr; output_MDIO &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, phy_dp83848c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>Initialize</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, phy_dp83848c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>Uninitialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, phy_dp83848c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>PowerControl</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, phy_dp83848c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>SetInterface</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, phy_dp83848c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>SetMode</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, phy_dp83848c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>GetLinkState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, phy_dp83848c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>GetLinkInfo</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, phy_dp83848c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_dp83848c.o(.constdata)
</UL>
<P><STRONG><a name="[242]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_id2obj))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexDelete
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[2dd]"></a>rt_ms2tick</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessagePut
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[245]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalClear
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>

<P><STRONG><a name="[2e7]"></a>rt_timer_insert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[2e6]"></a>rt_timer_remove</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_timer_remove))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[2c0]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[260]"></a>eth_check_link</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, net_eth.o(i.eth_check_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eth_check_link
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[231]"></a>eth_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(i.eth_lock))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>

<P><STRONG><a name="[27e]"></a>eth_make_mcast4</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_eth.o(i.eth_make_mcast4))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[280]"></a>eth_make_mcast6</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_eth.o(i.eth_make_mcast6))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[52]"></a>eth_notify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_eth.o(i.eth_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eth_notify &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_eth.o(i.net_eth_iface_init)
</UL>
<P><STRONG><a name="[232]"></a>eth_receive</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, net_eth.o(i.eth_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eth_receive &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[234]"></a>eth_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(i.eth_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>

<P><STRONG><a name="[269]"></a>arp_cache_alloc</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, net_arp.o(i.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[268]"></a>arp_is_cacheable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, net_arp.o(i.arp_is_cacheable))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[210]"></a>arp_probe_run</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, net_arp.o(i.arp_probe_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = arp_probe_run &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_run
</UL>

<P><STRONG><a name="[26d]"></a>arp_proc_response</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, net_arp.o(i.arp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arp_proc_response
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[212]"></a>arp_send_reply</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, net_arp.o(i.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arp_send_reply &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[211]"></a>arp_send_request</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, net_arp.o(i.arp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_run
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
</UL>

<P><STRONG><a name="[2af]"></a>udp_port_in_use</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_udp.o(i.udp_port_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>

<P><STRONG><a name="[2a1]"></a>tcp_map_socket</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, net_tcp.o(i.tcp_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_map_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2a5]"></a>tcp_parse_opt</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, net_tcp.o(i.tcp_parse_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_parse_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2a4]"></a>tcp_proc_acknr</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_proc_acknr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_proc_acknr &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2a3]"></a>tcp_proc_dupack</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_proc_dupack))
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2ae]"></a>tcp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
</UL>

<P><STRONG><a name="[2ad]"></a>tcp_que_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_que_init))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
</UL>

<P><STRONG><a name="[2ab]"></a>tcp_que_resend</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_que_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[29d]"></a>tcp_send_ctrl</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_reset_window
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_abort
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2aa]"></a>tcp_send_data</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
</UL>

<P><STRONG><a name="[2a6]"></a>tcp_send_reset</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_send_reset &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2a7]"></a>tcp_set_cwnd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_set_cwnd))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[29c]"></a>tcp_transit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_transit &rArr; tcp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_abort
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2e8]"></a>tcp_write</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, net_tcp.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offload
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_checksum
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offload
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[20d]"></a>addr_from</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_bsd.o(i.addr_from))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[20f]"></a>addr_transfer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, net_bsd.o(i.addr_transfer))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[6f]"></a>bsd_cb_tcp</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, net_bsd.o(i.bsd_cb_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsd_cb_tcp &rArr; bsd_enable &rArr; net_bsd_resume &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_clear_chain
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_add_buf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_map_socket
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_copy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_bsd.o(i.socket)
</UL>
<P><STRONG><a name="[6e]"></a>bsd_cb_udp</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, net_bsd.o(i.bsd_cb_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsd_cb_udp &rArr; bsd_enable &rArr; net_bsd_resume &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_comp
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_add_buf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_map_socket
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_copy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_bsd.o(i.socket)
</UL>
<P><STRONG><a name="[21d]"></a>bsd_enable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, net_bsd.o(i.bsd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsd_enable &rArr; net_bsd_resume &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_notify
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_run
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
</UL>

<P><STRONG><a name="[222]"></a>bsd_kill_socket</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, net_bsd.o(i.bsd_kill_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = bsd_kill_socket &rArr; net_tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_clear_chain
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_release_socket
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_abort
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_release_socket
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_close
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[21a]"></a>bsd_map_socket</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, net_bsd.o(i.bsd_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsd_map_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
</UL>

<P><STRONG><a name="[218]"></a>bsd_open_udp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_bsd.o(i.bsd_open_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsd_open_udp &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[228]"></a>bsd_wait</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, net_bsd.o(i.bsd_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsd_wait &rArr; net_bsd_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[22e]"></a>is_addr_unspec</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_bsd.o(i.is_addr_unspec))
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[217]"></a>is_addr_valid</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, net_bsd.o(i.is_addr_valid))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[22c]"></a>list_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_bsd.o(i.list_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[21e]"></a>que_add_buf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_bsd.o(i.que_add_buf))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
</UL>

<P><STRONG><a name="[21c]"></a>que_clear_chain</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_bsd.o(i.que_clear_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = que_clear_chain &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
</UL>

<P><STRONG><a name="[53]"></a>nbns_listener</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, net_nbns_client.o(i.nbns_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nbns_listener &rArr; net_udp_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strtoupper
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_nbns_client.o(i.net_nbns_client_init)
</UL>
<P><STRONG><a name="[29b]"></a>ping_send_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_ping.o(i.ping_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ping_send_req &rArr; net_icmp6_send_echo &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_run
</UL>

<P><STRONG><a name="[25f]"></a>sys_proc_tick</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_sys.o(i.sys_proc_tick))
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[24f]"></a>ndp_cache_add</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, net_ndp.o(i.ndp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ndp_cache_add &rArr; ndp_cache_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[250]"></a>ndp_cache_alloc</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, net_ndp.o(i.ndp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ndp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
</UL>

<P><STRONG><a name="[29a]"></a>ndp_check_frame</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_ndp.o(i.ndp_check_frame))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[251]"></a>ndp_is_onlink</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, net_ndp.o(i.ndp_is_onlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ndp_is_onlink &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_onlink
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
</UL>

<P><STRONG><a name="[258]"></a>ndp_next_opt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_ndp.o(i.ndp_next_opt))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_proc_response
</UL>

<P><STRONG><a name="[253]"></a>ndp_prefix_add</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, net_ndp.o(i.ndp_prefix_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ndp_prefix_add &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_create
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[255]"></a>ndp_probe_run</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, net_ndp.o(i.ndp_probe_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ndp_probe_run &rArr; ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_run
</UL>

<P><STRONG><a name="[257]"></a>ndp_proc_response</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, net_ndp.o(i.ndp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ndp_proc_response
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_next_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[259]"></a>ndp_router_remove</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, net_ndp.o(i.ndp_router_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndp_router_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_run
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[25a]"></a>ndp_send_reply</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_ndp.o(i.ndp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[256]"></a>ndp_send_request</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, net_ndp.o(i.ndp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_run
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_slaac_run
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_probe_run
</UL>

<P><STRONG><a name="[25d]"></a>ndp_slaac_run</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, net_ndp.o(i.ndp_slaac_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ndp_slaac_run &rArr; ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_create
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_run
</UL>

<P><STRONG><a name="[235]"></a>ip4_get_chksum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ip4.o(i.ip4_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_get_chksum &rArr; net_ip4_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[237]"></a>ip4_get_route</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, net_ip4.o(i.ip4_get_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip4_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offload
</UL>

<P><STRONG><a name="[239]"></a>ip6_get_route</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, net_ip6.o(i.ip6_get_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip6_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offload
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
</UL>

<P><STRONG><a name="[249]"></a>mem_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(i.mem_lock))
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[24a]"></a>mem_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(i.mem_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[296]"></a>get_crc32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_common.o(i.get_crc32))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_memcrc
</UL>

<P><STRONG><a name="[1f5]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[4e]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
